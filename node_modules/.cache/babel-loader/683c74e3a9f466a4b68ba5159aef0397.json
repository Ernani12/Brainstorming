{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar point_1 = require(\"./point\");\n\nvar utils_1 = require(\"../utils\");\n\nvar Rect =\n/** @class */\nfunction () {\n  function Rect(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.center = new point_1.Point(0, 0);\n\n    if (width < 0) {\n      width = 0;\n    }\n\n    if (height < 0) {\n      height = 0;\n    }\n\n    this.ex = this.x + this.width;\n    this.ey = this.y + this.height;\n    this.calceCenter();\n  }\n\n  Rect.prototype.floor = function () {\n    this.x |= 0;\n    this.y |= 0;\n    this.width |= 0;\n    this.height |= 0;\n    this.ex = this.x + this.width;\n    this.ey = this.y + this.height;\n    this.calceCenter();\n  };\n\n  Rect.prototype.round = function () {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.width = Math.round(this.width);\n    this.height = Math.round(this.height);\n    this.ex = this.x + this.width;\n    this.ey = this.y + this.height;\n    this.calceCenter();\n  };\n\n  Rect.prototype.clone = function () {\n    return new Rect(this.x, this.y, this.width, this.height);\n  };\n\n  Rect.prototype.hit = function (pt, padding) {\n    if (padding === void 0) {\n      padding = 0;\n    }\n\n    return pt.x > this.x - padding && pt.x < this.ex + padding && pt.y > this.y - padding && pt.y < this.ey + padding;\n  };\n\n  Rect.prototype.hitRect = function (rect) {\n    return rect.x > this.x && rect.x < this.ex && rect.y > this.y && rect.y < this.ey || rect.ex > this.x && rect.ex < this.ex && rect.y > this.y && rect.y < this.ey || rect.ex > this.x && rect.ex < this.ex && rect.ey > this.y && rect.ey < this.ey || rect.x > this.x && rect.x < this.ex && rect.ey > this.y && rect.ey < this.ey;\n  };\n\n  Rect.prototype.hitRotate = function (point, rotate, center) {\n    var pts = this.toPoints();\n\n    for (var _i = 0, pts_1 = pts; _i < pts_1.length; _i++) {\n      var pt = pts_1[_i];\n      pt.rotate(rotate, center);\n    }\n\n    return utils_1.pointInRect(point, pts);\n  };\n\n  Rect.prototype.calceCenter = function () {\n    this.center.x = this.x + this.width / 2;\n    this.center.y = this.y + this.height / 2;\n  };\n\n  Rect.prototype.toPoints = function () {\n    return [new point_1.Point(this.x, this.y), new point_1.Point(this.ex, this.y), new point_1.Point(this.ex, this.ey), new point_1.Point(this.x, this.ey)];\n  };\n\n  Rect.prototype.translate = function (x, y) {\n    this.x += x;\n    this.y += y;\n    this.ex += x;\n    this.ey += y;\n    this.calceCenter();\n  };\n\n  Rect.prototype.scale = function (scale, center, scaleY) {\n    if (!center) {\n      center = this.center;\n    }\n\n    if (scaleY === undefined) {\n      scaleY = scale;\n    }\n\n    this.x = center.x - (center.x - this.x) * scale;\n    this.y = center.y - (center.y - this.y) * scaleY;\n    this.width *= scale;\n    this.height *= scaleY;\n    this.ex = this.x + this.width;\n    this.ey = this.y + this.height;\n    this.calceCenter();\n  };\n\n  return Rect;\n}();\n\nexports.Rect = Rect;","map":null,"metadata":{},"sourceType":"script"}