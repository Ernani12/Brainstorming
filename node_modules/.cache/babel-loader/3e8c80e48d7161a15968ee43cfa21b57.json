{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pen_1 = require(\"./pen\");\n\nvar point_1 = require(\"./point\");\n\nvar middles_1 = require(\"../middles\");\n\nvar curve_1 = require(\"../middles/lines/curve\");\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar utils_1 = require(\"../utils\");\n\nvar text_1 = require(\"../middles/nodes/text\");\n\nvar rect_1 = require(\"./rect\");\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n\n  function Line(json) {\n    var _this = _super.call(this, json) || this;\n\n    _this.controlPoints = [];\n    _this.fromArrowSize = 5;\n    _this.toArrowSize = 5;\n    _this.borderWidth = 0;\n    _this.borderColor = '#000000';\n    _this.animateColor = '';\n    _this.animateSpan = 1;\n    _this.animatePos = 0;\n    _this.isAnimate = false;\n    _this.animateFromSize = 0;\n    _this.animateToSize = 0;\n    _this.animateDotSize = 3;\n\n    if (json) {\n      if (json.from) {\n        _this.from = new point_1.Point(json.from.x, json.from.y, json.from.direction, json.from.anchorIndex, json.from.id);\n      }\n\n      if (json.to) {\n        _this.to = new point_1.Point(json.to.x, json.to.y, json.to.direction, json.to.anchorIndex, json.to.id);\n      }\n\n      for (var _i = 0, _a = json.controlPoints; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        _this.controlPoints.push(new point_1.Point(item.x, item.y, item.direction, item.anchorIndex, item.id));\n      }\n\n      _this.fromArrow = json.fromArrow || '';\n      _this.toArrow = json.toArrow || '';\n      _this.fromArrowSize = json.fromArrowSize || 5;\n      _this.toArrowSize = json.toArrowSize || 5;\n      _this.fromArrowColor = json.fromArrowColor;\n      _this.toArrowColor = json.toArrowColor;\n\n      if (json.animateColor) {\n        _this.animateColor = json.animateColor;\n      }\n\n      if (json.animateSpan) {\n        _this.animateSpan = json.animateSpan;\n      }\n\n      if (json.length) {\n        _this.length = json.length;\n      }\n\n      if (json.borderWidth) {\n        _this.borderColor = json.borderColor;\n        _this.borderWidth = json.borderWidth;\n      }\n\n      _this.animateDotSize = json.animateDotSize || 3;\n    } else {\n      _this.name = 'curve';\n      _this.fromArrow = 'triangleSolid';\n    }\n\n    var data = le5le_store_1.Store.get('topology-data');\n    _this.font.background = data.bkColor || '#fff';\n    return _this;\n  }\n\n  Line.prototype.setFrom = function (from, fromArrow) {\n    if (fromArrow === void 0) {\n      fromArrow = '';\n    }\n\n    this.from = from;\n    this.fromArrow = fromArrow;\n    this.textRect = null;\n  };\n\n  Line.prototype.setTo = function (to, toArrow) {\n    if (toArrow === void 0) {\n      toArrow = 'triangleSolid';\n    }\n\n    this.to = to;\n    this.toArrow = toArrow;\n    this.textRect = null;\n  };\n\n  Line.prototype.calcControlPoints = function () {\n    this.textRect = null;\n\n    if (this.to && middles_1.drawLineFns[this.name]) {\n      middles_1.drawLineFns[this.name].controlPointsFn(this);\n    }\n  };\n\n  Line.prototype.draw = function (ctx) {\n    if (this.animateDot) {\n      ctx.fillStyle = this.strokeStyle;\n\n      if (this.animateType === 'dot') {\n        ctx.beginPath();\n        ctx.arc(this.animateDot.x, this.animateDot.y, this.animateDotSize, 0, 2 * Math.PI, false);\n        ctx.fill();\n        return;\n      } else if (this.animateType === 'comet') {\n        var bulles = this.getBubbles();\n        ctx.save();\n\n        for (var _i = 0, bulles_1 = bulles; _i < bulles_1.length; _i++) {\n          var item = bulles_1[_i];\n          ctx.globalAlpha = item.a;\n          ctx.beginPath();\n          ctx.arc(item.pos.x, item.pos.y, item.r, 0, 2 * Math.PI, false);\n          ctx.fill();\n        }\n\n        ctx.restore();\n      }\n    }\n\n    if (!this.isAnimate && this.borderWidth > 0 && this.borderColor) {\n      ctx.save();\n      ctx.lineWidth = this.lineWidth + this.borderWidth;\n      ctx.strokeStyle = this.borderColor;\n\n      if (middles_1.drawLineFns[this.name]) {\n        middles_1.drawLineFns[this.name].drawFn(ctx, this);\n      }\n\n      ctx.restore();\n    }\n\n    if ((!this.isAnimate || this.animateType !== 'comet') && middles_1.drawLineFns[this.name]) {\n      middles_1.drawLineFns[this.name].drawFn(ctx, this);\n    }\n\n    var scale = le5le_store_1.Store.get('LT:scale') || 1;\n\n    if (this.fromArrow && middles_1.drawArrowFns[this.fromArrow]) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.lineDashOffset = 0;\n      ctx.setLineDash([]);\n      ctx.fillStyle = this.fromArrowColor || this.strokeStyle || ctx.strokeStyle;\n      ctx.strokeStyle = ctx.fillStyle;\n      var f = this.to;\n\n      if (this.name === 'curve') {\n        f = curve_1.getBezierPoint(0.95 - this.lineWidth / 100, this.to, this.controlPoints[1], this.controlPoints[0], this.from);\n      } else if (this.name !== 'line' && this.controlPoints.length) {\n        f = this.controlPoints[0];\n      }\n\n      middles_1.drawArrowFns[this.fromArrow](ctx, f, this.from, this.fromArrowSize * scale);\n      ctx.restore();\n    }\n\n    if (this.toArrow && middles_1.drawArrowFns[this.toArrow]) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.lineDashOffset = 0;\n      ctx.setLineDash([]);\n      ctx.fillStyle = this.toArrowColor || this.strokeStyle || ctx.strokeStyle;\n      ctx.strokeStyle = ctx.fillStyle;\n      var f = this.from;\n\n      if (this.name === 'curve') {\n        f = curve_1.getBezierPoint(0.95 - this.lineWidth / 100, this.from, this.controlPoints[0], this.controlPoints[1], this.to);\n      } else if (this.name !== 'line' && this.controlPoints.length) {\n        f = this.controlPoints[this.controlPoints.length - 1];\n      }\n\n      middles_1.drawArrowFns[this.toArrow](ctx, f, this.to, this.toArrowSize * scale);\n      ctx.restore();\n    }\n\n    if (this.text && !this.isAnimate) {\n      if (!this.textRect) {\n        this.calcTextRect();\n      }\n\n      text_1.text(ctx, this);\n    }\n  };\n\n  Line.prototype.pointIn = function (pt) {\n    return middles_1.drawLineFns[this.name].pointIn(pt, this);\n  };\n\n  Line.prototype.getLen = function () {\n    switch (this.name) {\n      case 'line':\n        return utils_1.lineLen(this.from, this.to);\n\n      case 'polyline':\n        if (!this.controlPoints || !this.controlPoints.length) {\n          return utils_1.lineLen(this.from, this.to);\n        }\n\n        var len = 0;\n        var curPt = this.from;\n\n        for (var _i = 0, _a = this.controlPoints; _i < _a.length; _i++) {\n          var pt = _a[_i];\n          len += utils_1.lineLen(curPt, pt);\n          curPt = pt;\n        }\n\n        len += utils_1.lineLen(curPt, this.to);\n        return len | 0;\n\n      case 'curve':\n        return utils_1.curveLen(this.from, this.controlPoints[0], this.controlPoints[1], this.to);\n    }\n\n    return 0;\n  };\n\n  Line.prototype.calcTextRect = function () {\n    var center = this.getCenter();\n    var width = Math.abs(this.from.x - this.to.x);\n\n    if (width < 100) {\n      width = 100;\n    }\n\n    var height = this.font.lineHeight * this.font.fontSize * (this.textMaxLine || 1);\n    this.textRect = new rect_1.Rect(center.x - width / 2, center.y - height / 2, width, height);\n  };\n\n  Line.prototype.getTextRect = function () {\n    if (!this.textRect) {\n      this.calcTextRect();\n    }\n\n    return this.textRect;\n  };\n\n  Line.prototype.getCenter = function () {\n    var center = new point_1.Point(this.from.x, this.from.y);\n\n    switch (this.name) {\n      case 'line':\n        center = this.getLineCenter(this.from, this.to);\n        break;\n\n      case 'polyline':\n        if (!this.controlPoints || !this.controlPoints.length) {\n          this.calcControlPoints();\n        }\n\n        var i = Math.floor(this.controlPoints.length / 2);\n        center = this.getLineCenter(this.controlPoints[i - 1], this.controlPoints[i]);\n        break;\n\n      case 'curve':\n        center = curve_1.getBezierPoint(0.5, this.to, this.controlPoints[1], this.controlPoints[0], this.from);\n    }\n\n    return center;\n  };\n\n  Line.prototype.getLineCenter = function (from, to) {\n    return new point_1.Point((from.x + to.x) / 2, (from.y + to.y) / 2);\n  };\n\n  Line.prototype.getPointByPos = function (pos) {\n    if (pos <= 0) {\n      return this.from;\n    }\n\n    switch (this.name) {\n      case 'line':\n        return this.getLinePtByPos(this.from, this.to, pos);\n\n      case 'polyline':\n        if (!this.controlPoints || !this.controlPoints.length) {\n          return this.getLinePtByPos(this.from, this.to, pos);\n        } else {\n          var points = [].concat(this.controlPoints, this.to);\n          var curPt = this.from;\n\n          for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n            var pt = points_1[_i];\n            var l = utils_1.lineLen(curPt, pt);\n\n            if (pos > l) {\n              pos -= l;\n              curPt = pt;\n            } else {\n              return this.getLinePtByPos(curPt, pt, pos);\n            }\n          }\n\n          return this.to;\n        }\n\n      case 'curve':\n        return curve_1.getBezierPoint(pos / this.getLen(), this.from, this.controlPoints[0], this.controlPoints[1], this.to);\n    }\n\n    return null;\n  };\n\n  Line.prototype.getLinePtByPos = function (from, to, pos) {\n    var length = utils_1.lineLen(from, to);\n\n    if (pos <= 0) {\n      return from;\n    }\n\n    if (pos >= length) {\n      return to;\n    }\n\n    var x, y;\n    x = from.x + (to.x - from.x) * (pos / length);\n    y = from.y + (to.y - from.y) * (pos / length);\n    return new point_1.Point(x, y);\n  };\n\n  Line.prototype.animate = function () {\n    if (this.animateFromSize) {\n      this.lineDashOffset = -this.animateFromSize;\n    }\n\n    this.animatePos += this.animateSpan;\n    this.animateDot = null;\n\n    switch (this.animateType) {\n      case 'beads':\n        this.lineDashOffset = -this.animatePos;\n        var len = this.lineWidth;\n\n        if (len < 5) {\n          len = 5;\n        }\n\n        this.lineDash = [len, len * 2];\n        break;\n      // tslint:disable-next-line:no-switch-case-fall-through\n\n      case 'dot':\n      case 'comet':\n        this.lineDash = null;\n        this.animateDot = this.getPointByPos(this.animatePos + this.animateFromSize);\n        break;\n\n      default:\n        this.lineDash = [this.animatePos, this.length - this.animatePos + 1];\n        break;\n    }\n\n    if (this.animatePos > this.length + this.animateSpan - this.animateFromSize - this.animateToSize) {\n      if (++this.animateCycleIndex >= this.animateCycle && this.animateCycle > 0) {\n        this.animateStart = 0;\n        le5le_store_1.Store.set('animateEnd', {\n          type: 'line',\n          data: this\n        });\n        return this.nextAnimate;\n      }\n\n      this.animatePos = this.animateSpan;\n    }\n  };\n\n  Line.prototype.getBubbles = function () {\n    var bubbles = [];\n\n    for (var i = 0; i < 30 && this.animatePos - i > 0; ++i) {\n      bubbles.push({\n        pos: this.getPointByPos(this.animatePos - i * 2 + this.animateFromSize),\n        a: 1 - i * .03,\n        r: this.lineWidth - i * .01\n      });\n    }\n\n    return bubbles;\n  };\n\n  Line.prototype.round = function () {\n    this.from.round();\n    this.to.round();\n  };\n\n  Line.prototype.translate = function (x, y) {\n    this.from.x += x;\n    this.from.y += y;\n    this.to.x += x;\n    this.to.y += y;\n\n    if (this.text) {\n      this.textRect = null;\n    }\n\n    for (var _i = 0, _a = this.controlPoints; _i < _a.length; _i++) {\n      var pt = _a[_i];\n      pt.x += x;\n      pt.y += y;\n    }\n\n    le5le_store_1.Store.set('pts-' + this.id, null);\n  };\n\n  Line.prototype.scale = function (scale, center) {\n    this.from.x = center.x - (center.x - this.from.x) * scale;\n    this.from.y = center.y - (center.y - this.from.y) * scale;\n    this.to.x = center.x - (center.x - this.to.x) * scale;\n    this.to.y = center.y - (center.y - this.to.y) * scale;\n\n    if (this.text && this.font && this.font.fontSize) {\n      this.font.fontSize *= scale;\n      this.textRect = null;\n    }\n\n    for (var _i = 0, _a = this.controlPoints; _i < _a.length; _i++) {\n      var pt = _a[_i];\n      pt.x = center.x - (center.x - pt.x) * scale;\n      pt.y = center.y - (center.y - pt.y) * scale;\n    }\n\n    le5le_store_1.Store.set('pts-' + this.id, null);\n  };\n\n  return Line;\n}(pen_1.Pen);\n\nexports.Line = Line;","map":null,"metadata":{},"sourceType":"script"}