{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar point_1 = require(\"./models/point\");\n\nvar line_1 = require(\"./models/line\");\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar HoverLayer =\n/** @class */\nfunction () {\n  function HoverLayer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = options;\n    this.data = le5le_store_1.Store.get('topology-data');\n    this.anchorRadius = 4;\n    this.hoverAnchorIndex = -1;\n    this.dockLineX = 0;\n    this.dockLineY = 0;\n    le5le_store_1.Store.set('LT:HoverLayer', this);\n\n    if (!this.options.hoverColor) {\n      this.options.hoverColor = '#d4380d';\n    } // The backgournd color of selecting nodes by draging.\n\n\n    if (!this.options.dragColor) {\n      this.options.dragColor = '#d4380d';\n    }\n  }\n\n  HoverLayer.prototype.setLine = function (from, fromArrow, lineName) {\n    if (fromArrow === void 0) {\n      fromArrow = '';\n    }\n\n    if (lineName === void 0) {\n      lineName = 'curve';\n    }\n\n    this.line = new line_1.Line();\n    this.line.strokeStyle = this.options.color;\n    this.line.name = lineName;\n    this.line.setFrom(from, fromArrow);\n    this.data.lines.push(this.line);\n  };\n\n  HoverLayer.prototype.lineTo = function (to, toArrow) {\n    if (toArrow === void 0) {\n      toArrow = 'triangleSolid';\n    }\n\n    if (!this.line || this.line.locked) {\n      return;\n    }\n\n    this.line.setTo(to, toArrow);\n\n    if (this.line.from.id || this.line.to.id) {\n      this.line.calcControlPoints();\n    }\n  };\n\n  HoverLayer.prototype.lineFrom = function (from) {\n    if (this.line.locked) {\n      return;\n    }\n\n    this.line.setFrom(from, this.line.fromArrow);\n\n    if (this.line.from.id || this.line.to.id) {\n      this.line.calcControlPoints();\n    }\n  };\n\n  HoverLayer.prototype.lineMove = function (pt, initPos) {\n    if (this.line.locked) {\n      return;\n    }\n\n    var x = pt.x - initPos.x;\n    var y = pt.y - initPos.y;\n    this.line.setTo(new point_1.Point(this.initLine.to.x + x, this.initLine.to.y + y), this.line.toArrow);\n    this.line.setFrom(new point_1.Point(this.initLine.from.x + x, this.initLine.from.y + y), this.line.fromArrow);\n\n    if (this.line.from.id || this.line.to.id) {\n      this.line.calcControlPoints();\n    } else {\n      for (var i = 0; i < this.initLine.controlPoints.length; ++i) {\n        this.line.controlPoints[i].x = this.initLine.controlPoints[i].x + x;\n        this.line.controlPoints[i].y = this.initLine.controlPoints[i].y + y;\n      }\n\n      le5le_store_1.Store.set('pts-' + this.line.id, null);\n    }\n  };\n\n  HoverLayer.prototype.render = function (ctx) {\n    if (this.data.locked) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = this.options.hoverColor;\n    ctx.fillStyle = '#fff'; // anchors\n\n    if (this.node && !this.data.locked) {\n      this.root = this.getRoot(this.node) || this.node;\n\n      if (this.root) {\n        ctx.save();\n        ctx.globalAlpha = 0.2;\n\n        if (this.root.rotate) {\n          ctx.translate(this.root.rect.center.x, this.root.rect.center.y);\n          ctx.rotate((this.root.rotate + this.root.offsetRotate) * Math.PI / 180);\n          ctx.translate(-this.root.rect.center.x, -this.root.rect.center.y);\n        }\n\n        ctx.beginPath();\n        ctx.strokeRect(this.root.rect.x, this.root.rect.y, this.root.rect.width, this.root.rect.height);\n        ctx.restore();\n      }\n\n      for (var i = 0; i < this.node.rotatedAnchors.length; ++i) {\n        if (this.node.locked || this.node.rotatedAnchors[i].hidden && this.hoverAnchorIndex !== i) {\n          continue;\n        }\n\n        ctx.beginPath();\n        ctx.arc(this.node.rotatedAnchors[i].x, this.node.rotatedAnchors[i].y, this.anchorRadius, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n      }\n    }\n\n    ctx.fillStyle = this.options.hoverColor;\n\n    if (this.dockAnchor) {\n      ctx.beginPath();\n      ctx.arc(this.dockAnchor.x, this.dockAnchor.y, 4, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    if (this.hoverLineCP) {\n      ctx.beginPath();\n      ctx.arc(this.hoverLineCP.x, this.hoverLineCP.y, 5, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.strokeStyle = this.options.dragColor + '50';\n    ctx.fillStyle = this.options.dragColor + '30';\n    ctx.lineWidth = 1;\n\n    if (this.dockLineX > 0) {\n      var size = le5le_store_1.Store.get('LT:size');\n      ctx.beginPath();\n      ctx.moveTo(this.dockLineX, 0);\n      ctx.lineTo(this.dockLineX, size.height);\n      ctx.stroke();\n    }\n\n    if (this.dockLineY > 0) {\n      var size = le5le_store_1.Store.get('LT:size');\n      ctx.beginPath();\n      ctx.moveTo(0, this.dockLineY);\n      ctx.lineTo(size.width, this.dockLineY);\n      ctx.stroke();\n    } // Select nodes by drag.\n\n\n    if (this.dragRect) {\n      ctx.strokeStyle = this.options.dragColor;\n      ctx.beginPath();\n      ctx.strokeRect(this.dragRect.x, this.dragRect.y, this.dragRect.width, this.dragRect.height);\n      ctx.fillRect(this.dragRect.x, this.dragRect.y, this.dragRect.width, this.dragRect.height);\n    }\n\n    ctx.restore();\n  };\n\n  HoverLayer.prototype.getRoot = function (node) {\n    if (!node.parentId) {\n      return null;\n    }\n\n    for (var _i = 0, _a = this.data.nodes; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      if (item.id === node.parentId) {\n        var n = this.getRoot(item);\n        return n ? n : item;\n      }\n    }\n\n    return null;\n  };\n\n  HoverLayer.prototype.clear = function () {\n    this.node = null;\n    this.line = null;\n  };\n\n  return HoverLayer;\n}();\n\nexports.HoverLayer = HoverLayer;","map":null,"metadata":{},"sourceType":"script"}