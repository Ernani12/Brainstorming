{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = KeyboardBehavior;\n\nvar _slate = require(\"slate\");\n\nvar _isModKey = require(\"../lib/isModKey\");\n\nvar _isModKey2 = _interopRequireDefault(_isModKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction KeyboardBehavior() {\n  function onKeyDown(ev, editor, next) {\n    if ((0, _isModKey2.default)(ev)) return next();\n\n    switch (ev.key) {\n      case \"Enter\":\n        return onEnter(ev, editor, next);\n\n      case \"Tab\":\n        return onTab(ev, editor, next);\n\n      case \"Backspace\":\n        return onBackspace(ev, editor, next);\n\n      default:\n        return next();\n    }\n  }\n\n  function onEnter(ev, editor, next) {\n    var value = editor.value;\n    var startBlock = value.startBlock,\n        selection = value.selection;\n    if (selection.isExpanded) return next();\n    if (!startBlock) return next();\n    var endOffset = selection.end.offset; // Hitting enter while an image is selected should jump caret below and\n    // insert a new paragraph\n\n    if (startBlock.type === \"image\") {\n      ev.preventDefault();\n      return editor.splitBlock(10).setBlocks({\n        type: \"paragraph\",\n        text: \"\",\n        isVoid: false\n      });\n    }\n\n    if (startBlock.type.match(/(heading|block-quote)/)) {\n      ev.preventDefault(); // if the heading is collapsed then show everything now so the user\n      // isn't editing in a weird state with some content hidden\n\n      editor.showContentBelow(startBlock); // Hitting enter in a heading or blockquote will split the node at that\n      // point and make the new node a paragraph\n\n      if (endOffset > 0) {\n        return editor.splitBlock().setBlocks(\"paragraph\");\n      } else {\n        return editor.splitBlock().moveToStartOfPreviousBlock().setBlocks(\"paragraph\");\n      }\n    }\n\n    return next();\n  }\n\n  function onTab(ev, editor, next) {\n    var value = editor.value;\n    var startBlock = value.startBlock;\n    if (!startBlock) return next(); // On tab, if at the end of the heading jump to the main body content\n    // as if it is another input field (act the same as enter).\n\n    if (startBlock.type === \"heading1\") {\n      ev.preventDefault();\n      return editor.splitBlock().setBlocks(\"paragraph\");\n    }\n\n    return next();\n  }\n\n  function onBackspace(ev, editor, next) {\n    var value = editor.value;\n    var startBlock = value.startBlock,\n        selection = value.selection;\n    if (!startBlock) return next(); // If image or embed is selected go ahead and delete the whole block\n\n    if (startBlock.type === \"image\" || startBlock.type === \"link\") {\n      ev.preventDefault();\n      return editor.removeNodeByKey(startBlock.key).moveToStartOfNextBlock();\n    }\n\n    if (selection.isExpanded) {\n      // If we're about to remove a heading then ensure that its not collapsed\n      if (selection.start.offset === 0 && selection.end.offset === startBlock.text.length && startBlock.type.match(/heading/)) {\n        editor.showContentBelow(startBlock);\n      }\n\n      return next();\n    } // If at the start of a non-paragraph, convert it back into a paragraph\n\n\n    if (selection.start.offset === 0) {\n      if (startBlock.type === \"paragraph\" || startBlock.type === \"code-line\") return next();\n      ev.preventDefault(); // If we're about to remove a heading then ensure that its not collapsed\n\n      if (startBlock.type.match(/heading/)) {\n        editor.showContentBelow(startBlock);\n      }\n\n      editor.setBlocks(\"paragraph\");\n\n      if (startBlock.type === \"list-item\") {\n        editor.unwrapBlock(\"bulleted-list\");\n      }\n\n      return;\n    }\n\n    if (selection.isCollapsed) {\n      var marksAtCursor = startBlock.getMarksAtRange(selection);\n      var codeMarksAtCursor = marksAtCursor.filter(function (mark) {\n        return mark.type === \"code\";\n      }); // If at the end of a code mark hitting backspace should remove the mark\n\n      if (codeMarksAtCursor.size > 0) {\n        ev.preventDefault();\n        var iterationOffset = 0;\n        var startOffset = selection.start.offset;\n        var textNode = startBlock.getTextAtOffset(startOffset);\n        var leavesUntilCode = textNode.leaves.takeUntil(function (v) {\n          iterationOffset += v.text.length;\n          return iterationOffset > startOffset;\n        });\n        var textUntilCode = leavesUntilCode.map(function (l) {\n          return l.text;\n        }).join(\"\");\n        var codeLeaf = leavesUntilCode.reverse().first();\n        if (!codeLeaf) return next();\n        if (startOffset !== textUntilCode.length) return next();\n        return editor.removeMarkByKey(textNode.key, startOffset - codeLeaf.text.length, startOffset, \"code\");\n      }\n    }\n\n    return next();\n  }\n\n  return {\n    onKeyDown: onKeyDown\n  };\n}","map":null,"metadata":{},"sourceType":"script"}