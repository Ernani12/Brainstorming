{"ast":null,"code":"import { BlockType, OpType, FocusMode } from '@blink-mind/core';\nimport { createElement, PureComponent } from 'react';\nimport plainSerializer from 'slate-plain-serializer';\nimport debug from 'debug';\nimport { Editor } from 'slate-react';\nimport styled from 'styled-components';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar log = debug('node:text-editor');\nvar Content = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  padding: 6px;\\n  background-color: \", \";\\n  cursor: \", \";\\n  min-width: 50px;\\n\"], [\"\\n  padding: 6px;\\n  background-color: \", \";\\n  cursor: \", \";\\n  min-width: 50px;\\n\"])), function (props) {\n  return props.readOnly ? null : 'white';\n}, function (props) {\n  return props.readOnly ? 'pointer' : 'text';\n});\n\nvar SimpleTextEditor =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTextEditor, _super);\n\n  function SimpleTextEditor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      content: null\n    };\n\n    _this.onMouseDown = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onMouseMove = function (e) {// log('onMouseMove');\n      // e.stopPropagation();\n    };\n\n    _this.onKeyDown = function (e) {};\n\n    _this._handleClick = function (event) {\n      var wasOutside = !_this.root.contains(event.target);\n      wasOutside && _this.onClickOutSide(event);\n    };\n\n    _this.rootRef = function (saveRef) {\n      return function (ref) {\n        saveRef(ref);\n        _this.root = ref;\n      };\n    };\n\n    _this.initState();\n\n    return _this;\n  }\n\n  SimpleTextEditor.prototype.onChange = function (_a) {\n    var value = _a.value;\n    log('onChange', value);\n    this.setState({\n      content: value\n    });\n  };\n\n  SimpleTextEditor.prototype.componentDidMount = function () {\n    var readOnly = this.props.readOnly;\n    if (readOnly) return;\n    document.addEventListener('click', this._handleClick);\n  };\n\n  SimpleTextEditor.prototype.componentWillUnmount = function () {\n    var readOnly = this.props.readOnly;\n    if (readOnly) return;\n    document.removeEventListener('click', this._handleClick);\n  };\n\n  SimpleTextEditor.prototype.onClickOutSide = function (e) {};\n\n  SimpleTextEditor.prototype.getCustomizeProps = function () {\n    return null;\n  };\n\n  SimpleTextEditor.prototype.getContent = function () {\n    var block = this.getCustomizeProps().block;\n    var content = block.data;\n    if (content == null) return null;\n\n    if (typeof content === 'string') {\n      content = plainSerializer.deserialize(content);\n    }\n\n    return content;\n  };\n\n  SimpleTextEditor.prototype.initState = function () {\n    var content = this.getContent();\n    this.state = {\n      content: content\n    };\n  };\n\n  SimpleTextEditor.prototype.render = function () {\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n\n    var _b = this.getCustomizeProps(),\n        readOnly = _b.readOnly,\n        getRefKeyFunc = _b.getRefKeyFunc,\n        placeholder = _b.placeholder,\n        style = _b.style;\n\n    log(readOnly);\n    var key = getRefKeyFunc(topicKey);\n    var content = readOnly ? this.getContent() : this.state.content;\n\n    var _c = this,\n        onMouseDown = _c.onMouseDown,\n        onMouseMove = _c.onMouseMove,\n        onKeyDown = _c.onKeyDown;\n\n    var editorProps = {\n      value: content,\n      readOnly: readOnly,\n      onChange: this.onChange.bind(this),\n      placeholder: placeholder,\n      style: style\n    };\n    var contentProps = {\n      key: key,\n      readOnly: readOnly,\n      ref: this.rootRef(saveRef(key)),\n      onMouseDown: onMouseDown,\n      onMouseMove: onMouseMove,\n      onKeyDown: onKeyDown\n    };\n    return createElement(Content, __assign({}, contentProps), createElement(Editor, __assign({}, editorProps, {\n      autoFocus: true\n    })));\n  };\n\n  return SimpleTextEditor;\n}(PureComponent);\n\nvar templateObject_1;\nvar log$1 = debug('node:topic-content-editor');\n\nfunction contentEditorRefKey(key) {\n  return \"content-editor-\" + key;\n}\n\nvar TopicContentEditor =\n/** @class */\nfunction (_super) {\n  __extends(TopicContentEditor, _super);\n\n  function TopicContentEditor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onKeyDown = function (e) {\n      if (e.nativeEvent.ctrlKey && e.nativeEvent.code === 'Enter') {\n        _this.save();\n      }\n    };\n\n    return _this;\n  }\n\n  TopicContentEditor.prototype.getCustomizeProps = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey,\n        readOnly = _a.readOnly;\n    var block = model.getTopic(topicKey).getBlock(BlockType.CONTENT).block;\n    var getRefKeyFunc = contentEditorRefKey;\n    var style = {\n      whiteSpace: 'pre'\n    };\n    return {\n      block: block,\n      readOnly: readOnly,\n      getRefKeyFunc: getRefKeyFunc,\n      placeholder: 'new',\n      style: style\n    };\n  };\n\n  TopicContentEditor.prototype.onClickOutSide = function (e) {\n    log$1('onClickOutSide');\n    this.save();\n  };\n\n  TopicContentEditor.prototype.save = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey;\n    var readOnly = model.editingContentKey !== topicKey;\n    if (readOnly) return;\n    var controller = this.props.controller;\n    controller.run('operation', __assign(__assign({}, this.props), {\n      opType: OpType.SET_TOPIC_BLOCK,\n      blockType: BlockType.CONTENT,\n      data: this.state.content,\n      focusMode: FocusMode.NORMAL\n    }));\n  };\n\n  return TopicContentEditor;\n}(SimpleTextEditor);\n\nvar log$2 = debug('node:topic-desc-editor');\n\nfunction descEditorRefKey(key) {\n  return \"desc-editor-\" + key;\n}\n\nvar TopicDescEditor =\n/** @class */\nfunction (_super) {\n  __extends(TopicDescEditor, _super);\n\n  function TopicDescEditor(props) {\n    var _this = _super.call(this, props) || this;\n\n    log$2('constructor');\n    return _this;\n  }\n\n  TopicDescEditor.prototype.initState = function () {\n    _super.prototype.initState.call(this);\n\n    var _a = this.props,\n        controller = _a.controller,\n        topicKey = _a.topicKey;\n    var key = \"topic-desc-data-\" + topicKey;\n    var value = this.state.content;\n    controller.run('setTempValue', {\n      key: key,\n      value: value\n    });\n  };\n\n  TopicDescEditor.prototype.getCustomizeProps = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey;\n    var block = model.getTopic(topicKey).getBlock(BlockType.DESC).block;\n    var readOnly = model.editingDescKey !== topicKey;\n    var getRefKeyFunc = descEditorRefKey;\n    return {\n      block: block,\n      readOnly: readOnly,\n      getRefKeyFunc: getRefKeyFunc,\n      placeholder: 'write topic notes here'\n    };\n  };\n\n  TopicDescEditor.prototype.onChange = function (_a) {\n    var value = _a.value;\n    log$2('onChange');\n    var _b = this.props,\n        controller = _b.controller,\n        topicKey = _b.topicKey,\n        model = _b.model;\n    var readOnly = model.editingDescKey !== topicKey;\n    if (readOnly) return;\n    var key = \"topic-desc-data-\" + topicKey;\n    controller.run('setTempValue', {\n      key: key,\n      value: value\n    });\n    this.setState({\n      content: value\n    });\n  };\n\n  return TopicDescEditor;\n}(SimpleTextEditor);\n\nfunction SimpleTextEditorPlugin() {\n  return {\n    getTopicTitle: function (props) {\n      var model = props.model,\n          controller = props.controller,\n          topicKey = props.topicKey,\n          maxLength = props.maxLength;\n      var topic = model.getTopic(topicKey);\n      var block = topic.getBlock(BlockType.CONTENT).block;\n      var text = controller.run('serializeBlockData', __assign(__assign({}, props), {\n        block: block\n      }));\n\n      if (maxLength != null) {\n        text = text.length > maxLength ? text.substr(0, maxLength) + '...' : text;\n      }\n\n      return text;\n    },\n    renderTopicContentEditor: function (props) {\n      return createElement(TopicContentEditor, __assign({}, props));\n    },\n    renderTopicDescEditor: function (props) {\n      return createElement(TopicDescEditor, __assign({}, props));\n    },\n    isBlockEmpty: function (props, next) {\n      var block = props.block,\n          controller = props.controller;\n\n      if (block.type === BlockType.CONTENT || block.type === BlockType.DESC) {\n        return block.data == null || controller.run('serializeBlockData', props) === '';\n      }\n\n      return next();\n    },\n    serializeBlockData: function (props, next) {\n      var block = props.block;\n\n      if (block.type === BlockType.CONTENT || block.type === BlockType.DESC) {\n        return typeof block.data === 'string' ? block.data : plainSerializer.serialize(block.data);\n      }\n\n      return next();\n    }\n  };\n}\n\nexport default SimpleTextEditorPlugin;","map":null,"metadata":{},"sourceType":"module"}