{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rectangle_1 = require(\"./nodes/rectangle\");\n\nvar circle_1 = require(\"./nodes/circle\");\n\nvar triangle_1 = require(\"./nodes/triangle\");\n\nvar diamond_1 = require(\"./nodes/diamond\");\n\nvar arrow_1 = require(\"./nodes/arrow\");\n\nvar text_1 = require(\"./nodes/text\");\n\nvar line_1 = require(\"./nodes/line\");\n\nvar triangle_anchor_1 = require(\"./nodes/triangle.anchor\");\n\nvar arrow_anchor_1 = require(\"./nodes/arrow.anchor\");\n\nvar line_anchor_1 = require(\"./nodes/line.anchor\");\n\nvar circle_rect_1 = require(\"./nodes/circle.rect\");\n\nvar triangle_rect_1 = require(\"./nodes/triangle.rect\");\n\nvar diamond_rect_1 = require(\"./nodes/diamond.rect\");\n\nvar arrow_rect_1 = require(\"./nodes/arrow.rect\");\n\nvar line_rect_1 = require(\"./nodes/line.rect\");\n\nvar line_2 = require(\"./lines/line\");\n\nvar polyline_1 = require(\"./lines/polyline\");\n\nvar curve_1 = require(\"./lines/curve\");\n\nvar triangle_2 = require(\"./arrows/triangle\");\n\nvar diamond_2 = require(\"./arrows/diamond\");\n\nvar circle_2 = require(\"./arrows/circle\");\n\nvar circle_anchor_1 = require(\"./nodes/circle.anchor\");\n\nvar line_3 = require(\"./arrows/line\");\n\nvar pentagon_1 = require(\"./nodes/pentagon\");\n\nvar pentagon_rect_1 = require(\"./nodes/pentagon.rect\");\n\nvar pentagon_anchor_1 = require(\"./nodes/pentagon.anchor\");\n\nvar hexagon_1 = require(\"./nodes/hexagon\");\n\nvar hexagon_anchor_1 = require(\"./nodes/hexagon.anchor\");\n\nvar hexagon_rect_1 = require(\"./nodes/hexagon.rect\");\n\nvar pentagram_1 = require(\"./nodes/pentagram\");\n\nvar pentagram_anchor_1 = require(\"./nodes/pentagram.anchor\");\n\nvar pentagram_rect_1 = require(\"./nodes/pentagram.rect\");\n\nvar cloud_1 = require(\"./nodes/cloud\");\n\nvar cloud_anchor_1 = require(\"./nodes/cloud.anchor\");\n\nvar cloud_rect_1 = require(\"./nodes/cloud.rect\");\n\nvar message_1 = require(\"./nodes/message\");\n\nvar message_rect_1 = require(\"./nodes/message.rect\");\n\nvar message_anchor_1 = require(\"./nodes/message.anchor\");\n\nvar file_1 = require(\"./nodes/file\");\n\nvar image_rect_1 = require(\"./nodes/image.rect\");\n\nvar cube_1 = require(\"./nodes/cube\");\n\nvar cube_anchor_1 = require(\"./nodes/cube.anchor\");\n\nvar cube_rect_1 = require(\"./nodes/cube.rect\");\n\nvar people_1 = require(\"./nodes/people\");\n\nvar people_rect_1 = require(\"./nodes/people.rect\"); // Functions of drawing a node.\n\n\nexports.drawNodeFns = {}; // Calc the occupy rect of icon.\n\nexports.iconRectFns = {}; // Calc the occupy rect of text.\n\nexports.textRectFns = {}; // Calc the anchors of node.\n\nexports.anchorsFns = {}; // Functions of drawing a line.\n\nexports.drawLineFns = {}; // Functions of drawing a arrow.\n\nexports.drawArrowFns = {};\n\nfunction init() {\n  console.log('Init middles.'); // ********Default nodes.*******\n  // Combine\n\n  exports.drawNodeFns.combine = rectangle_1.rectangle; // Div\n\n  exports.drawNodeFns.div = rectangle_1.rectangle; // Rectangle\n\n  exports.drawNodeFns.rectangle = rectangle_1.rectangle; // Ciricle\n\n  exports.drawNodeFns.circle = circle_1.circle;\n  exports.iconRectFns.circle = circle_rect_1.circleIconRect;\n  exports.textRectFns.circle = circle_rect_1.circleTextRect;\n  exports.anchorsFns.circle = circle_anchor_1.circleAnchors; // Triangle\n\n  exports.drawNodeFns.triangle = triangle_1.triangle;\n  exports.anchorsFns.triangle = triangle_anchor_1.triangleAnchors;\n  exports.iconRectFns.triangle = triangle_rect_1.triangleIconRect;\n  exports.textRectFns.triangle = triangle_rect_1.triangleTextRect; // Diamond\n\n  exports.drawNodeFns.diamond = diamond_1.diamond;\n  exports.iconRectFns.diamond = diamond_rect_1.diamondIconRect;\n  exports.textRectFns.diamond = diamond_rect_1.diamondTextRect; // Hexagon\n\n  exports.drawNodeFns.hexagon = hexagon_1.hexagon;\n  exports.iconRectFns.hexagon = hexagon_rect_1.hexagonIconRect;\n  exports.textRectFns.hexagon = hexagon_rect_1.hexagonTextRect;\n  exports.anchorsFns.hexagon = hexagon_anchor_1.hexagonAnchors; // Pentagon\n\n  exports.drawNodeFns.pentagon = pentagon_1.pentagon;\n  exports.iconRectFns.pentagon = pentagon_rect_1.pentagonIconRect;\n  exports.textRectFns.pentagon = pentagon_rect_1.pentagonTextRect;\n  exports.anchorsFns.pentagon = pentagon_anchor_1.pentagonAnchors; // Pentagram\n\n  exports.drawNodeFns.pentagram = pentagram_1.pentagram;\n  exports.iconRectFns.pentagram = pentagram_rect_1.pentagramIconRect;\n  exports.textRectFns.pentagram = pentagram_rect_1.pentagramTextRect;\n  exports.anchorsFns.pentagram = pentagram_anchor_1.pentagramAnchors; // Left arrow\n\n  exports.drawNodeFns.leftArrow = arrow_1.leftArrow;\n  exports.anchorsFns.leftArrow = arrow_anchor_1.arrowAnchors;\n  exports.iconRectFns.leftArrow = arrow_rect_1.leftArrowIconRect;\n  exports.textRectFns.leftArrow = arrow_rect_1.leftArrowTextRect; // Right arrow\n\n  exports.drawNodeFns.rightArrow = arrow_1.rightArrow;\n  exports.anchorsFns.rightArrow = arrow_anchor_1.arrowAnchors;\n  exports.iconRectFns.rightArrow = arrow_rect_1.rightArrowIconRect;\n  exports.textRectFns.rightArrow = arrow_rect_1.rightArrowTextRect; // Two-way arrow\n\n  exports.drawNodeFns.twowayArrow = arrow_1.twowayArrow;\n  exports.anchorsFns.twowayArrow = arrow_anchor_1.arrowAnchors;\n  exports.iconRectFns.twowayArrow = arrow_rect_1.twowayArrowIconRect;\n  exports.textRectFns.twowayArrow = arrow_rect_1.twowayArrowTextRect; // Cloud\n\n  exports.drawNodeFns.cloud = cloud_1.cloud;\n  exports.anchorsFns.cloud = cloud_anchor_1.cloudAnchors;\n  exports.iconRectFns.cloud = cloud_rect_1.cloudIconRect;\n  exports.textRectFns.cloud = cloud_rect_1.cloudTextRect; // Message\n\n  exports.drawNodeFns.message = message_1.message;\n  exports.anchorsFns.message = message_anchor_1.messageAnchors;\n  exports.iconRectFns.message = message_rect_1.messageIconRect;\n  exports.textRectFns.message = message_rect_1.messageTextRect; // File\n\n  exports.drawNodeFns.file = file_1.file; // Text\n\n  exports.drawNodeFns.text = text_1.text;\n  exports.iconRectFns.text = line_rect_1.lineIconRect;\n\n  exports.anchorsFns.text = function (node) {}; // Line\n\n\n  exports.drawNodeFns.line = line_1.line;\n  exports.anchorsFns.line = line_anchor_1.lineAnchors;\n  exports.iconRectFns.line = line_rect_1.lineIconRect;\n  exports.textRectFns.line = line_rect_1.lineTextRect; // Image\n\n  exports.drawNodeFns.image = function (ctx, node) {};\n\n  exports.iconRectFns.image = image_rect_1.imageIconRect;\n  exports.textRectFns.image = image_rect_1.imageTextRect; // Cube\n\n  exports.drawNodeFns.cube = cube_1.cube;\n  exports.anchorsFns.cube = cube_anchor_1.cubeAnchors;\n  exports.iconRectFns.cube = cube_rect_1.cubeIconRect;\n  exports.textRectFns.cube = cube_rect_1.cubeTextRect; // Cube\n\n  exports.drawNodeFns.people = people_1.people;\n  exports.iconRectFns.people = people_rect_1.peopleIconRect;\n  exports.textRectFns.people = people_rect_1.peopleTextRect; // ********end********\n  // ********Default lines.*******\n\n  exports.drawLineFns.line = {\n    drawFn: line_2.line,\n    drawControlPointsFn: line_2.lineControlPoints,\n    controlPointsFn: line_2.calcLineControlPoints,\n    pointIn: polyline_1.pointInPolyline\n  };\n  exports.drawLineFns.polyline = {\n    drawFn: polyline_1.polyline,\n    drawControlPointsFn: polyline_1.polylineControlPoints,\n    controlPointsFn: polyline_1.calcPolylineControlPoints,\n    dockControlPointFn: polyline_1.dockPolylineControlPoint,\n    pointIn: polyline_1.pointInPolyline\n  };\n  exports.drawLineFns.curve = {\n    drawFn: curve_1.curve,\n    drawControlPointsFn: curve_1.curveControlPoints,\n    controlPointsFn: curve_1.calcCurveControlPoints,\n    pointIn: curve_1.pointInCurve\n  };\n  exports.drawLineFns.mind = {\n    drawFn: curve_1.curve,\n    drawControlPointsFn: curve_1.curveControlPoints,\n    controlPointsFn: curve_1.calcMindControlPoints,\n    pointIn: curve_1.pointInCurve\n  }; // ********end********\n  // ********Default nodes.*******\n\n  exports.drawArrowFns.triangleSolid = triangle_2.triangleSolid;\n  exports.drawArrowFns.triangle = triangle_2.triangle;\n  exports.drawArrowFns.diamondSolid = diamond_2.diamondSolid;\n  exports.drawArrowFns.diamond = diamond_2.diamond;\n  exports.drawArrowFns.circleSolid = circle_2.circleSolid;\n  exports.drawArrowFns.circle = circle_2.circle;\n  exports.drawArrowFns.line = line_3.line;\n  exports.drawArrowFns.lineUp = line_3.lineUp;\n  exports.drawArrowFns.lineDown = line_3.lineDown; // ********end********\n}\n\ninit(); // registerNode: Register a custom node.\n// name - The name of node.\n// drawFn - How to draw.\n// anchorsFn - How to get the anchors.\n// iconRectFn - How to get the icon rect.\n// textRectFn - How to get the text rect.\n// force - Overwirte the node if exists.\n\nfunction registerNode(name, drawFn, anchorsFn, iconRectFn, textRectFn, force) {\n  // Exist\n  if (exports.drawNodeFns[name] && !force) {\n    return false;\n  }\n\n  exports.drawNodeFns[name] = drawFn;\n  exports.anchorsFns[name] = anchorsFn;\n  exports.iconRectFns[name] = iconRectFn;\n  exports.textRectFns[name] = textRectFn;\n  return true;\n}\n\nexports.registerNode = registerNode; // registerLine: Register a custom line.\n// name - The name of line.\n// drawFn - How to draw.\n// drawControlPointsFn - Draw the control points.\n// controlPointsFn - How to get the controlPoints.\n// dockControlPointFn - Dock a point to horizontal/vertial or related position.\n// force - Overwirte the node if exists.\n\nfunction registerLine(name, drawFn, drawControlPointsFn, controlPointsFn, dockControlPointFn, pointInFn, force) {\n  // Exist\n  if (exports.drawLineFns[name] && !force) {\n    return false;\n  }\n\n  exports.drawLineFns[name] = {\n    drawFn: drawFn,\n    drawControlPointsFn: drawControlPointsFn,\n    controlPointsFn: controlPointsFn,\n    dockControlPointFn: dockControlPointFn,\n    pointIn: pointInFn\n  };\n  return true;\n}\n\nexports.registerLine = registerLine; // registerArrow: Register a custom arrow.\n// name - the name of arrow.\n// drawFn - how to draw.\n// force - Overwirte the node if exists.\n\nfunction registerArrow(name, drawFn, force) {\n  // Exist\n  if (exports.drawArrowFns[name] && !force) {\n    return false;\n  }\n\n  exports.drawArrowFns[name] = drawFn;\n  return true;\n}\n\nexports.registerArrow = registerArrow;","map":null,"metadata":{},"sourceType":"script"}