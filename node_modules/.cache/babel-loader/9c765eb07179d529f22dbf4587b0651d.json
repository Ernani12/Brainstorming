{"ast":null,"code":"import { Model, FocusMode, Config, Topic, Block } from '@blink-mind/core';\nimport debug from 'debug';\nimport { Map, isImmutable, List } from 'immutable';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar log = debug('plugin:json-serializer');\n\nfunction JsonSerializerPlugin() {\n  return {\n    serializeModel: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var model = props.model,\n          controller = props.controller;\n      var obj = {\n        rootTopicKey: model.rootTopicKey,\n        editorRootTopicKey: model.editorRootTopicKey,\n        focusKey: model.focusKey,\n        extData: controller.run('serializeExtData', __assign(__assign({}, props), {\n          extData: model.extData\n        })),\n        topics: model.topics.valueSeq().toArray().map(function (topic) {\n          return controller.run('serializeTopic', __assign(__assign({}, props), {\n            topic: topic\n          }));\n        }),\n        config: controller.run('serializeConfig', __assign(__assign({}, props), {\n          config: model.config\n        })),\n        formatVersion: model.formatVersion\n      };\n      return obj;\n    },\n    deserializeModel: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var obj = props.obj,\n          controller = props.controller;\n\n      if (obj.formatVersion == null) {\n        obj.formatVersion = '0.0';\n      }\n\n      var rootTopicKey = obj.rootTopicKey,\n          editorRootTopicKey = obj.editorRootTopicKey,\n          focusKey = obj.focusKey,\n          topics = obj.topics,\n          config = obj.config,\n          extData = obj.extData,\n          formatVersion = obj.formatVersion;\n      var res = new Model();\n      res = res.merge({\n        rootTopicKey: rootTopicKey,\n        editorRootTopicKey: editorRootTopicKey == null ? rootTopicKey : editorRootTopicKey,\n        focusKey: focusKey,\n        extData: controller.run('deserializeExtData', __assign(__assign({}, props), {\n          extData: extData,\n          formatVersion: formatVersion\n        })),\n        config: controller.run('deserializeConfig', __assign(__assign({}, props), {\n          config: config,\n          formatVersion: formatVersion\n        })),\n        topics: controller.run('deserializeTopics', __assign(__assign({}, props), {\n          topics: topics,\n          formatVersion: formatVersion\n        })),\n        formatVersion: obj.formatVersion\n      });\n\n      if (res.focusKey == null) {\n        res = res.set('focusKey', res.rootTopicKey);\n      }\n\n      if (res.focusMode == null) {\n        res = res.set('focusMode', FocusMode.NORMAL);\n      }\n\n      log('deserializeModel', res);\n      return res;\n    },\n    serializeExtData: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var extData = props.extData,\n          controller = props.controller;\n      var res = {};\n      extData.forEach(function (v, k) {\n        res[k] = controller.run('serializeExtDataItem', {\n          props: props,\n          extDataKey: k,\n          extDataItem: v\n        });\n      });\n      return res;\n    },\n    deserializeExtData: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var extData = props.extData,\n          controller = props.controller;\n      var res = Map();\n\n      for (var extDataKey in extData) {\n        res = res.set(extDataKey, controller.run('deserializeExtDataItem', __assign(__assign({}, props), {\n          extDataKey: extDataKey,\n          extDataItem: extData[extDataKey]\n        })));\n      }\n\n      return res;\n    },\n    serializeExtDataItem: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var extDataItem = props.extDataItem;\n\n      if (isImmutable(extDataItem)) {\n        return extDataItem.toJS();\n      }\n\n      return extDataItem;\n    },\n    deserializeExtDataItem: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var extDataItem = props.extDataItem;\n      return extDataItem;\n    },\n    serializeConfig: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var config = props.config;\n      return config.toJS();\n    },\n    deserializeConfig: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var config = props.config;\n      return new Config(config);\n    },\n    serializeTopic: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var topic = props.topic,\n          controller = props.controller;\n      return {\n        key: topic.key,\n        parentKey: topic.parentKey,\n        subKeys: topic.subKeys.toArray(),\n        collapse: topic.collapse,\n        style: topic.style,\n        blocks: topic.blocks.map(function (block) {\n          return controller.run('serializeBlock', __assign(__assign({}, props), {\n            block: block\n          }));\n        })\n      };\n    },\n    deserializeTopic: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var topic = props.topic,\n          controller = props.controller;\n      var key = topic.key,\n          parentKey = topic.parentKey,\n          subKeys = topic.subKeys,\n          blocks = topic.blocks,\n          style = topic.style,\n          collapse = topic.collapse;\n      var res = new Topic();\n      res = res.merge({\n        key: key,\n        parentKey: parentKey,\n        subKeys: List(subKeys),\n        style: style,\n        collapse: collapse,\n        blocks: controller.run('deserializeBlocks', __assign(__assign({}, props), {\n          blocks: blocks\n        }))\n      });\n      return res;\n    },\n    deserializeTopics: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var topics = props.topics,\n          controller = props.controller;\n      var res = Map();\n      res = res.withMutations(function (r) {\n        topics.forEach(function (topic) {\n          return r.set(topic.key, controller.run('deserializeTopic', __assign(__assign({}, props), {\n            topic: topic\n          })));\n        });\n      });\n      return res;\n    },\n    serializeBlock: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var block = props.block,\n          controller = props.controller;\n      var res = {\n        type: block.type,\n        data: controller.run('serializeBlockData', __assign({}, props))\n      };\n      return res;\n    },\n    serializeBlockData: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var block = props.block;\n      return block.data;\n    },\n    deserializeBlock: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var block = props.block,\n          controller = props.controller;\n      var type = block.type;\n      return new Block({\n        type: type,\n        data: controller.run('deserializeBlockData', __assign(__assign({}, props), {\n          block: block\n        }))\n      });\n    },\n    deserializeBlockData: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var block = props.block;\n      return block.data;\n    },\n    deserializeBlocks: function (props, next) {\n      var nextRes = next();\n      if (nextRes != null) return nextRes;\n      var blocks = props.blocks,\n          controller = props.controller;\n      var res = List();\n      res = res.withMutations(function (res) {\n        blocks.forEach(function (block) {\n          return res.push(controller.run('deserializeBlock', __assign(__assign({}, props), {\n            block: block\n          })));\n        });\n      });\n      return res;\n    }\n  };\n}\n\nexport { JsonSerializerPlugin };","map":null,"metadata":{},"sourceType":"module"}