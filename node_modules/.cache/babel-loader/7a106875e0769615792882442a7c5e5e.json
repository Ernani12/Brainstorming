{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar canvas_1 = require(\"./canvas\");\n\nvar Offscreen =\n/** @class */\nfunction (_super) {\n  __extends(Offscreen, _super);\n\n  function Offscreen(parentElem, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, parentElem, options) || this;\n\n    _this.parentElem = parentElem;\n    _this.options = options;\n    _this.activeLayer = le5le_store_1.Store.get('LT:ActiveLayer');\n    _this.hoverLayer = le5le_store_1.Store.get('LT:HoverLayer');\n    _this.animateLayer = le5le_store_1.Store.get('LT:AnimateLayer');\n    le5le_store_1.Store.set('LT:offscreen', _this.canvas);\n    return _this;\n  }\n\n  Offscreen.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    var ctx = this.canvas.getContext('2d');\n    ctx.strokeStyle = this.options.color;\n    this.renderNodes();\n    this.renderLines();\n    this.activeLayer.render(ctx);\n    this.animateLayer.render(ctx);\n    this.hoverLayer.render(ctx);\n  };\n\n  Offscreen.prototype.renderNodes = function () {\n    if (!this.data.nodes.length) {\n      return;\n    }\n\n    var ctx = this.canvas.getContext('2d');\n\n    for (var _i = 0, _a = this.data.nodes; _i < _a.length; _i++) {\n      var item = _a[_i];\n      item.render(ctx);\n    }\n  };\n\n  Offscreen.prototype.renderLines = function () {\n    if (!this.data.lines.length) {\n      return;\n    }\n\n    var ctx = this.canvas.getContext('2d');\n    var i = 0;\n\n    for (var _i = 0, _a = this.data.lines; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      if (!item.to) {\n        this.data.lines.splice(i++, 1);\n        continue;\n      }\n\n      item.render(ctx);\n      ++i;\n    }\n  };\n\n  return Offscreen;\n}(canvas_1.Canvas);\n\nexports.Offscreen = Offscreen;","map":null,"metadata":{},"sourceType":"script"}