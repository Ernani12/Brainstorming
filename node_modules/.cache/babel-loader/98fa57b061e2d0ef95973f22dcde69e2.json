{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('slate');\n\nvar _endsWith = require('ends-with');\n\nvar _endsWith2 = _interopRequireDefault(_endsWith);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * User pressed Delete in an editor:\n * Remove last idnentation before cursor\n */\n\n\nfunction onBackspace(opts, event, editor, next) {\n  var value = editor.value;\n\n  if (value.selection.isExpanded) {\n    return next();\n  }\n\n  var selection = value.selection,\n      startText = value.startText;\n  var currentLine = value.startBlock; // Detect and remove indentation at cursor\n\n  var indent = (0, _utils.getCurrentIndent)(opts, value);\n  var beforeSelection = currentLine.text.slice(0, selection.start.offset); // If the line before selection ending with the indentation?\n\n  if ((0, _endsWith2.default)(beforeSelection, indent)) {\n    // Remove indent\n    event.preventDefault();\n    return editor.deleteBackward(indent.length).focus();\n  } else if (opts.exitBlockType) {\n    // Otherwise check if we are in an empty code container...\n    var currentCode = (0, _utils.getCurrentCode)(opts, value);\n    var isStartOfCode = selection.start.offset === 0 && currentCode.getFirstText() === startText; // PERF: avoid checking for whole currentCode.text\n\n    var isEmpty = currentCode.nodes.size === 1 && currentLine.text.length === 0;\n\n    if (isStartOfCode && isEmpty) {\n      event.preventDefault(); // Convert it to default exit type\n\n      editor.withoutNormalizing(function () {\n        editor.setBlocks(opts.exitBlockType).unwrapNodeByKey(currentLine.key);\n      });\n      return editor;\n    }\n  }\n\n  return next();\n}\n\nexports.default = onBackspace;","map":null,"metadata":{},"sourceType":"script"}