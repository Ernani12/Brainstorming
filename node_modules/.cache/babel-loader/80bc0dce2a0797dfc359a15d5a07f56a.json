{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require(\"invariant\");\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _slate = require(\"slate\");\n\nvar _Placeholder = require(\"../components/Placeholder\");\n\nvar _Placeholder2 = _interopRequireDefault(_Placeholder);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction PlaceholderPlugin() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var placeholder = options.placeholder,\n      when = options.when;\n  (0, _invariant2.default)(placeholder, \"You must pass `PlaceholderPlugin` an `options.placeholder` string.\");\n  (0, _invariant2.default)(when, \"You must pass `PlaceholderPlugin` an `options.when` query.\");\n  /**\n   * Decorate a match node with a placeholder mark when it fits the query.\n   */\n\n  function decorateNode(node, editor, next) {\n    if (!editor.query(when, node)) {\n      return next();\n    }\n\n    var others = next() || [];\n    var first = node.getFirstText();\n    if (!first) return next();\n    var decoration = {\n      anchor: {\n        key: first.key,\n        offset: 0\n      },\n      focus: {\n        key: first.key,\n        offset: 0\n      },\n      mark: {\n        type: \"placeholder\",\n        data: {\n          placeholder: placeholder\n        }\n      }\n    };\n    return [].concat(_toConsumableArray(others), [decoration]);\n  }\n  /**\n   * Render an inline placeholder for the placeholder mark.\n   */\n\n\n  function renderMark(props, editor, next) {\n    var children = props.children,\n        mark = props.mark;\n\n    if (mark.type === \"placeholder\") {\n      var content = mark.data.get(\"placeholder\");\n      return _react2.default.createElement(\"span\", null, _react2.default.createElement(_Placeholder2.default, null, content), children);\n    }\n\n    return next();\n  }\n\n  return {\n    decorateNode: decorateNode,\n    renderMark: renderMark\n  };\n}\n\nexports.default = PlaceholderPlugin;","map":null,"metadata":{},"sourceType":"script"}