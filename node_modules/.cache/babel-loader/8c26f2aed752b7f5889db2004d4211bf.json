{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require('slate');\n\nvar _utils = require('../utils');\n/**\n * Decreases the depth of the current item. The following items will\n * be moved as sublist of the decreased item.\n *\n * No-op for root items.\n */\n\n\nfunction decreaseItemDepth(opts, change) {\n  var value = change.value;\n  var document = value.document; // Cannot decrease item depth of root items\n\n  var depth = (0, _utils.getItemDepth)(opts, value);\n\n  if (depth == 1) {\n    return change;\n  }\n\n  var currentItem = (0, _utils.getCurrentItem)(opts, value);\n\n  if (!currentItem) {\n    return change;\n  }\n\n  var currentList = document.getParent(currentItem.key);\n  var parentItem = document.getParent(currentList.key);\n  var parentList = document.getParent(parentItem.key); // The items following the item will be moved to a sublist of currentItem\n\n  var followingItems = currentList.nodes.skipUntil(function (i) {\n    return i === currentItem;\n  }).rest(); // True if the currentItem and the followingItems make the whole\n  // currentList, and hence the currentList will be emptied\n\n  var willEmptyCurrentList = currentList.nodes.size === followingItems.size + 1;\n\n  if (!followingItems.isEmpty()) {\n    change.withoutNormalizing(function () {\n      // Add them as sublist of currentItem\n      var sublist = _slate.Block.create({\n        object: 'block',\n        type: currentList.type,\n        data: currentList.data\n      }); // Add the sublist\n\n\n      change.insertNodeByKey(currentItem.key, currentItem.nodes.size, sublist);\n      change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1); // Move the followingItems to the sublist\n\n      followingItems.forEach(function (item, index) {\n        return change.moveNodeByKey(item.key, sublist.key, sublist.nodes.size + index);\n      });\n    });\n  } else {\n    change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1);\n  } // Remove the currentList completely if needed\n\n\n  if (willEmptyCurrentList) {\n    change.removeNodeByKey(currentList.key);\n  }\n\n  return change;\n}\n\nexports.default = decreaseItemDepth;","map":null,"metadata":{},"sourceType":"script"}