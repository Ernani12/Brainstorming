{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar line_1 = require(\"./models/line\");\n\nvar AnimateLayer =\n/** @class */\nfunction () {\n  function AnimateLayer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = options;\n    this.data = le5le_store_1.Store.get('topology-data');\n    this.nodes = [];\n    this.lines = [];\n    le5le_store_1.Store.set('LT:AnimateLayer', this);\n\n    if (!this.options.animateColor) {\n      this.options.animateColor = '#ff6600';\n    }\n  }\n\n  AnimateLayer.prototype.start = function (clear) {\n    if (clear === void 0) {\n      clear = true;\n    }\n\n    if (this.timer) {\n      cancelAnimationFrame(this.timer);\n    }\n\n    if (clear) {\n      this.nodes = [];\n      this.lines = [];\n    }\n\n    this.getNodes(this.data.nodes);\n    this.getLines();\n    this.animate();\n  };\n\n  AnimateLayer.prototype.getNodes = function (nodes, tag) {\n    if (tag === void 0) {\n      tag = '';\n    }\n\n    if (!nodes) {\n      return;\n    }\n\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var item = nodes_1[_i];\n      var found = false;\n\n      if (tag && item.tags.indexOf(tag) > -1) {\n        item.animateStart = Date.now();\n      }\n\n      for (var i = 0; i < this.nodes.length; ++i) {\n        if (this.nodes[i].id === item.id) {\n          item.animateCycleIndex = 1;\n          found = true;\n\n          if (!item.animateStart) {\n            this.nodes.splice(i, 1);\n          }\n        }\n      }\n\n      if (!found && item.animateStart) {\n        item.updateAnimateProps();\n        this.nodes.push(item);\n        this.getNodes(item.children);\n      }\n    }\n  };\n\n  AnimateLayer.prototype.getLines = function (tag) {\n    if (tag === void 0) {\n      tag = '';\n    }\n\n    for (var _i = 0, _a = this.data.lines; _i < _a.length; _i++) {\n      var item = _a[_i];\n      var found = false;\n\n      if (tag && item.tags.indexOf(tag) > -1) {\n        item.animateStart = Date.now();\n      }\n\n      for (var i = 0; i < this.lines.length; ++i) {\n        if (this.lines[i].id === item.id) {\n          this.lines[i].animateCycle = item.animateCycle;\n          this.lines[i].animateCycleIndex = 1;\n          this.lines[i].animateColor = item.animateColor || this.options.animateColor;\n          this.lines[i].strokeStyle = item.animateColor || this.options.animateColor;\n          this.lines[i].animateSpan = item.animateSpan;\n          found = true;\n\n          if (item.animateStart) {\n            this.lines[i].animateStart = item.animateStart;\n          } else {\n            this.lines.splice(i, 1);\n          }\n        }\n      }\n\n      if (!found && item.animateStart) {\n        var l = new line_1.Line(item);\n        l.isAnimate = true;\n\n        if (l.fromArrow && l.fromArrow.indexOf('line') < 0) {\n          l.animateFromSize = l.fromArrowSize + l.lineWidth * 5;\n        }\n\n        if (l.toArrow && l.toArrow.indexOf('line') < 0) {\n          l.animateToSize = l.toArrowSize + l.lineWidth * 5;\n        }\n\n        l.animateStart = item.animateStart;\n        l.lineCap = 'round';\n        l.fillStyle = '#fff';\n        l.strokeStyle = l.animateColor || this.options.animateColor;\n        l.length = l.getLen();\n\n        if (!l.fromArrowColor) {\n          l.fromArrowColor = l.strokeStyle || '#222';\n        }\n\n        if (!l.toArrowColor) {\n          l.toArrowColor = l.strokeStyle || '#222';\n        }\n\n        this.lines.push(l);\n      }\n    }\n  };\n\n  AnimateLayer.prototype.animate = function () {\n    var _this = this;\n\n    if (!this.lines.length && !this.nodes.length) {\n      this.timer = null;\n      return;\n    }\n\n    this.timer = requestAnimationFrame(function () {\n      var now = Date.now();\n\n      for (var i = 0; i < _this.lines.length; ++i) {\n        if (_this.lines[i].animateStart > now) {\n          continue;\n        }\n\n        var next = _this.lines[i].animate();\n\n        if (!_this.lines[i].animateStart) {\n          for (var _i = 0, _a = _this.data.lines; _i < _a.length; _i++) {\n            var item = _a[_i];\n\n            if (_this.lines[i].id === item.id) {\n              item.animateStart = 0;\n              break;\n            }\n          }\n        }\n\n        if (next) {\n          _this.lines.splice(i, 1);\n\n          _this.getNodes(_this.data.nodes, next);\n\n          _this.getLines(next);\n        }\n\n        if (_this.lines[i] && !_this.lines[i].animateStart) {\n          _this.lines.splice(i, 1);\n        }\n      }\n\n      for (var i = 0; i < _this.nodes.length; ++i) {\n        if (_this.nodes[i].animateStart > now) {\n          continue;\n        }\n\n        if (_this.nodes[i].animateDuration && _this.nodes[i].animateStart) {\n          var next = _this.nodes[i].animate(now);\n\n          if (next) {\n            _this.getNodes(_this.data.nodes, next);\n\n            _this.getLines(next);\n          }\n        } else {\n          _this.nodes.splice(i, 1);\n        }\n      }\n\n      le5le_store_1.Store.set('LT:render', true);\n\n      _this.animate();\n    });\n  };\n\n  AnimateLayer.prototype.updateLines = function (nodes) {\n    if (!nodes) {\n      nodes = this.nodes;\n    }\n\n    for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {\n      var line = _a[_i];\n      var found = false;\n\n      for (var _b = 0, nodes_2 = nodes; _b < nodes_2.length; _b++) {\n        var item = nodes_2[_b];\n\n        if (line.from.id === item.id) {\n          line.from.x = item.rotatedAnchors[line.from.anchorIndex].x;\n          line.from.y = item.rotatedAnchors[line.from.anchorIndex].y;\n          found = true;\n        }\n\n        if (line.to.id === item.id) {\n          line.to.x = item.rotatedAnchors[line.to.anchorIndex].x;\n          line.to.y = item.rotatedAnchors[line.to.anchorIndex].y;\n          found = true;\n        }\n\n        if (item.children) {\n          this.updateLines(item.children);\n        }\n      }\n\n      if (found) {\n        line.calcControlPoints();\n        line.length = line.getLen();\n      }\n    }\n  };\n\n  AnimateLayer.prototype.render = function (ctx) {\n    for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {\n      var item = _a[_i];\n      item.render(ctx);\n    }\n  };\n\n  AnimateLayer.prototype.destroy = function () {\n    if (this.timer) {\n      cancelAnimationFrame(this.timer);\n    }\n  };\n\n  return AnimateLayer;\n}();\n\nexports.AnimateLayer = AnimateLayer;","map":null,"metadata":{},"sourceType":"script"}