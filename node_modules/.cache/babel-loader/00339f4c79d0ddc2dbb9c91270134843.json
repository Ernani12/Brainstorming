{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar point_1 = require(\"../../models/point\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar Surface =\n/** @class */\nfunction () {\n  function Surface(pt1, pt2, pt3, pt4, fillStyle, strokeStyle) {\n    if (fillStyle === void 0) {\n      fillStyle = '';\n    }\n\n    if (strokeStyle === void 0) {\n      strokeStyle = '';\n    }\n\n    this.points = [];\n    this.fillStyle = '';\n    this.strokeStyle = '';\n    this.points.push(pt1);\n    this.points.push(pt2);\n    this.points.push(pt3);\n    this.points.push(pt4);\n    this.fillStyle = fillStyle;\n    this.strokeStyle = strokeStyle || fillStyle;\n  }\n\n  Surface.prototype.render = function (ctx) {\n    ctx.save();\n    ctx.fillStyle = this.fillStyle;\n    ctx.strokeStyle = this.strokeStyle;\n    ctx.beginPath();\n\n    for (var i = 0; i < this.points.length; ++i) {\n      if (i) {\n        ctx.lineTo(this.points[i].x, this.points[i].y);\n      } else {\n        ctx.moveTo(this.points[i].x, this.points[i].y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n  };\n\n  return Surface;\n}();\n\nexports.Surface = Surface;\n\nvar Cube =\n/** @class */\nfunction () {\n  function Cube(rect, z, zRotate, fillStyle, strokeStyle) {\n    if (fillStyle === void 0) {\n      fillStyle = '#ddd';\n    }\n\n    if (strokeStyle === void 0) {\n      strokeStyle = '#ccc';\n    }\n\n    this.surfaces = [];\n    var offset = z * Math.sin(45 * Math.PI / 180);\n    var p1 = new point_1.Point(rect.x, rect.y + offset);\n    var p2 = new point_1.Point(rect.ex - offset, rect.y + offset);\n    var p3 = new point_1.Point(rect.ex - offset, rect.ey);\n    var p4 = new point_1.Point(rect.x, rect.ey); // front\n\n    this.surfaces.push(new Surface(p1, p2, p3, p4, fillStyle, strokeStyle)); // up\n\n    this.surfaces.push(new Surface(p1, new point_1.Point(rect.x + offset, rect.y), new point_1.Point(rect.ex, rect.y), p2, utils_1.pSBC(0.5, fillStyle), strokeStyle)); // right\n\n    this.surfaces.push(new Surface(p2, new point_1.Point(rect.ex, rect.y), new point_1.Point(rect.ex, rect.ey - offset), p3, utils_1.pSBC(0.6, fillStyle), strokeStyle));\n  }\n\n  Cube.prototype.render = function (ctx) {\n    for (var _i = 0, _a = this.surfaces; _i < _a.length; _i++) {\n      var item = _a[_i];\n      item.render(ctx);\n    }\n  };\n\n  return Cube;\n}();\n\nexports.Cube = Cube;","map":null,"metadata":{},"sourceType":"script"}