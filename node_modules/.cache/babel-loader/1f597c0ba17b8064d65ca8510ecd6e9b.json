{"ast":null,"code":"/**\n Copied from https://github.com/bramstein/css-font-parser\n */\n\n/**\n * @enum {number}\n */\nvar states = {\n  VARIATION: 1,\n  LINE_HEIGHT: 2,\n  FONT_FAMILY: 3\n};\n/**\n * @param {string} input\n * @return {Object}\n */\n\nfunction parse(input) {\n  var state = states.VARIATION,\n      buffer = '',\n      result = {\n    'font-family': []\n  };\n\n  for (var c, i = 0; c = input.charAt(i); i += 1) {\n    if (state === states.FONT_FAMILY && (c === '\"' || c === \"'\")) {\n      var index = i + 1; // consume the entire string\n\n      do {\n        index = input.indexOf(c, index) + 1;\n\n        if (!index) {\n          // If a string is not closed by a ' or \" return null.\n          // TODO: Check to see if this is correct.\n          return null;\n        }\n      } while (input.charAt(index - 2) === '\\\\');\n\n      result['font-family'].push(input.slice(i + 1, index - 1).replace(/\\\\('|\")/g, \"$1\"));\n      i = index - 1;\n      buffer = '';\n    } else if (state === states.FONT_FAMILY && c === ',') {\n      if (!/^\\s*$/.test(buffer)) {\n        result['font-family'].push(buffer.replace(/^\\s+|\\s+$/, '').replace(/\\s+/g, ' '));\n        buffer = '';\n      }\n    } else if (state === states.VARIATION && (c === ' ' || c === '/')) {\n      if (/^((xx|x)-large|(xx|s)-small|small|large|medium)$/.test(buffer) || /^(larg|small)er$/.test(buffer) || /^(\\+|-)?([0-9]*\\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/.test(buffer)) {\n        state = c === '/' ? states.LINE_HEIGHT : states.FONT_FAMILY;\n        result['font-size'] = buffer;\n      } else if (/^(italic|oblique)$/.test(buffer)) {\n        result['font-style'] = buffer;\n      } else if (/^small-caps$/.test(buffer)) {\n        result['font-variant'] = buffer;\n      } else if (/^(bold(er)?|lighter|normal|[1-9]00)$/.test(buffer)) {\n        result['font-weight'] = buffer;\n      } else if (/^((ultra|extra|semi)-)?(condensed|expanded)$/.test(buffer)) {\n        result['font-stretch'] = buffer;\n      }\n\n      buffer = '';\n    } else if (state === states.LINE_HEIGHT && c === ' ') {\n      if (/^(\\+|-)?([0-9]*\\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)?$/.test(buffer)) {\n        result['line-height'] = buffer;\n      }\n\n      state = states.FONT_FAMILY;\n      buffer = '';\n    } else {\n      buffer += c;\n    }\n  }\n\n  if (state === states.FONT_FAMILY && !/^\\s*$/.test(buffer)) {\n    result['font-family'].push(buffer.replace(/^\\s+|\\s+$/, '').replace(/\\s+/g, ' '));\n  }\n\n  if (result['font-size'] && result['font-family'].length) {\n    return result;\n  } else {\n    return null;\n  }\n}\n\nmodule.exports = function (input) {\n  if (/^(inherit|initial)$/.test(input)) {\n    return {\n      'font-size': input,\n      'line-height': input,\n      'font-style': input,\n      'font-weight': input,\n      'font-variant': input,\n      'font-stretch': input,\n      'font-family': input\n    };\n  }\n\n  input = input.replace(/\\s*\\/\\s*/, '/');\n  var result = parse(input);\n\n  if (result) {\n    result['font-family'] = result['font-family'].map(function (family) {\n      return /^(serif|sans-serif|monospace|cursive|fantasy)$/.test(family) ? family : '\"' + family + '\"';\n    }).join(', ');\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}