{"ast":null,"code":"import isDataUri from 'is-data-uri';\nimport Promise from 'es6-promise';\nimport isImage from 'is-image';\nimport isUrl from 'is-url';\nimport logger from 'slate-dev-logger';\nimport { getEventTransfer, getEventRange } from 'slate-react';\n/**\n * Return a `Blob` for the given data `uri`.\n *\n * Copied from: https://github.com/component/data-uri-to-blob/blob/master/index.js\n *\n * @param {String} uri\n * @return {Blob}\n */\n\nfunction dataUriToBlob(uri) {\n  var data = uri.split(',')[1];\n  var bytes = atob(data);\n  var buffer = new window.ArrayBuffer(bytes.length);\n  var array = new window.Uint8Array(buffer);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  if (!hasArrayBufferView()) {\n    array = buffer;\n  }\n\n  var blob = new Blob([array], {\n    type: mime(uri)\n  }); // COMPAT: ???\n\n  blob.slice = blob.slice || blob.webkitSlice;\n  return blob;\n}\n/**\n * Return the mime type of a data `uri`.\n *\n * @param {String} uri\n * @return {String}\n */\n\n\nfunction mime(uri) {\n  return uri.split('')[0].slice(5);\n}\n/**\n * Check if the environment suppoers `ArrayBufferView`.\n *\n * @return {Boolean}\n */\n\n\nfunction hasArrayBufferView() {\n  return new Blob([new window.Uint8Array(100)]).size == 100;\n}\n/**\n * Convert an <img> source `url` to a data URI and `callback(err, uri)`.\n *\n * @param {String} url\n * @param {Function} callback\n */\n\n\nfunction srcToDataUri(url, callback) {\n  var canvas = window.document.createElement('canvas');\n  var img = window.document.createElement('img');\n\n  if (!canvas.getContext) {\n    return setTimeout(callback, 0, new Error('Canvas is not supported.'));\n  }\n\n  img.onload = function () {\n    var ctx = canvas.getContext('2d');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n    var dataUri = canvas.toDataURL('image/png');\n    callback(null, dataUri);\n  };\n\n  img.ononerror = function () {\n    callback(new Error('Failed to load image.'));\n  };\n\n  img.setAttribute('crossOrigin', 'anonymous');\n  img.src = url;\n}\n/**\n * Load an image file from a src `url`.\n *\n * @param {String} url\n * @param {Function} callback\n */\n\n\nfunction loadImageFile(url, callback) {\n  if (isDataUri(url)) {\n    var file = dataUriToBlob(url);\n    setTimeout(function () {\n      callback(null, file);\n    });\n  } else {\n    srcToDataUri(url, function (err, uri) {\n      var file = dataUriToBlob(uri);\n      callback(err, file);\n    });\n  }\n} // Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\nvar splitPath = function (filename) {\n  return splitPathRe.exec(filename).slice(1);\n}; // path.resolve([from ...], to)\n// posix version\n// path.normalize(path)\n// posix version\n// posix version\n// posix version\n// path.relative(from, to)\n// posix version\n\n\nfunction extname(path) {\n  return splitPath(path)[3];\n} // String.prototype.substr - negative index don't work in IE8\n\n\nvar substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {\n  return str.substr(start, len);\n} : function (str, start, len) {\n  if (start < 0) start = str.length + start;\n  return str.substr(start, len);\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/**\n * Insert images on drop or paste.\n *\n * @param {Object} options\n *   @property {Function} insertImage\n *   @property {Array} extensions (optional)\n * @return {Object} plugin\n */\n\n\nfunction DropOrPasteImages() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var insertImage = options.insertImage,\n      extensions = options.extensions;\n\n  if (options.applyTransform) {\n    logger.deprecate('0.6.0', 'The `applyTransform` argument to `slate-drop-or-paste-images` has been renamed to `insertImage` instead.');\n    insertImage = options.applyTransform;\n  }\n\n  if (!insertImage) {\n    throw new Error('You must supply an `insertImage` function.');\n  }\n  /**\n   * Check file extension against user-defined options.\n   *\n   * @param {Type} string\n   * @return {Boolean}\n   */\n\n\n  function matchExt(type) {\n    var accepted = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var ext = _step.value;\n        if (type.includes(ext)) accepted = true;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return accepted;\n  }\n  /**\n   * Apply the change for a given file and update the editor with the result.\n   *\n   * @param {Change} change\n   * @param {Blob} file\n   * @return {Promise}\n   */\n\n\n  function asyncApplyChange(change, file) {\n    var editor = change.editor;\n    return Promise.resolve(insertImage(change, file)).then(function () {\n      editor.onChange(change);\n    });\n  }\n  /**\n   * On drop or paste.\n   *\n   * @param {Event} event\n   * @param {Change} change\n   * @param {Function} next\n   * @return {State}\n   */\n\n\n  function onInsert(event, change, next) {\n    var editor = change.editor;\n    var transfer = getEventTransfer(event);\n    var range = getEventRange(event, editor);\n\n    switch (transfer.type) {\n      case 'files':\n        return onInsertFiles(event, change, next, transfer, range);\n\n      case 'html':\n        return onInsertHtml(event, change, next, transfer, range);\n\n      case 'text':\n        return onInsertText(event, change, next, transfer, range);\n\n      default:\n        return next();\n    }\n  }\n  /**\n   * On drop or paste files.\n   *\n   * @param {Event} event\n   * @param {Change} change\n   * @param {Function} next\n   * @param {Object} transfer\n   * @param {Range} range\n   * @return {Boolean}\n   */\n\n\n  function onInsertFiles(event, change, next, transfer, range) {\n    var files = transfer.files;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var file = _step2.value;\n\n        if (extensions) {\n          var type = file.type;\n\n          var _type$split = type.split('/'),\n              _type$split2 = _slicedToArray(_type$split, 2),\n              ext = _type$split2[1];\n\n          if (!matchExt(ext)) continue;\n        }\n\n        if (range) {\n          change.select(range);\n        }\n\n        asyncApplyChange(change, file);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n  /**\n   * On drop or paste html.\n   *\n   * @param {Event} event\n   * @param {Change} change\n   * @param {Function} next\n   * @param {Object} transfer\n   * @param {Range} range\n   * @return {Boolean}\n   */\n\n\n  function onInsertHtml(event, change, next, transfer, range) {\n    var editor = change.editor;\n    var html = transfer.html;\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(html, 'text/html');\n    var body = doc.body;\n    var firstChild = body.firstChild;\n    if (firstChild.nodeName.toLowerCase() != 'img') return next();\n    var src = firstChild.src;\n\n    if (extensions) {\n      var ext = extname(src).slice(1);\n      if (!matchExt(ext)) return next();\n    }\n\n    loadImageFile(src, function (err, file) {\n      if (err) return;\n      editor.change(function (c) {\n        if (range) {\n          c.select(range);\n        }\n\n        asyncApplyChange(c, file);\n      });\n    });\n  }\n  /**\n   * On drop or paste text.\n   *\n   * @param {Event} event\n   * @param {Change} change\n   * @param {Function} next\n   * @param {Object} transfer\n   * @param {Range} range\n   * @return {Boolean}\n   */\n\n\n  function onInsertText(event, change, next, transfer, range) {\n    var editor = change.editor;\n    var text = transfer.text;\n    if (!isUrl(text)) return next();\n    if (!isImage(text)) return next();\n    loadImageFile(text, function (err, file) {\n      if (err) return;\n      editor.change(function (c) {\n        if (range) {\n          c.select(range);\n        }\n\n        asyncApplyChange(c, editor, file);\n      });\n    });\n  }\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n\n  return {\n    onDrop: onInsert,\n    onPaste: onInsert\n  };\n}\n\nexport default DropOrPasteImages;","map":null,"metadata":{},"sourceType":"module"}