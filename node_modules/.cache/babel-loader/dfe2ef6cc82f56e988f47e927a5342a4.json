{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('slate');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Create a schema definition with rules to normalize lists\n */\n\n\nfunction schema(opts) {\n  var constructedSchema = {\n    blocks: _defineProperty({}, opts.typeItem, {\n      parent: opts.types.map(function (t) {\n        return {\n          type: t\n        };\n      }),\n      nodes: [{\n        match: {\n          object: 'block'\n        }\n      }],\n      normalize: normalize({\n        parent_type_invalid: function parent_type_invalid(change, context) {\n          return change.unwrapBlockByKey(context.node.key, {\n            normalize: false\n          });\n        },\n        child_object_invalid: function child_object_invalid(change, context) {\n          return wrapChildrenInDefaultBlock(opts, change, context.node);\n        }\n      })\n    })\n  }; // validate all list types, ensure they only have list item children\n\n  opts.types.forEach(function (type) {\n    constructedSchema.blocks[type] = {\n      nodes: [{\n        match: {\n          type: opts.typeItem\n        }\n      }],\n      normalize: normalize({\n        child_type_invalid: function child_type_invalid(change, context) {\n          return change.wrapBlockByKey(context.child.key, opts.typeItem, {\n            normalize: false\n          });\n        }\n      })\n    };\n  });\n  return constructedSchema;\n}\n/*\n * Allows to define a normalize function through a keyed collection of functions\n */\n\n\nfunction normalize(reasons) {\n  return function (change, error) {\n    var reasonFn = reasons[error.code];\n\n    if (reasonFn) {\n      reasonFn(change, error);\n    }\n  };\n}\n/**\n * Wraps all child of a node in the default block type.\n * Returns a change, for chaining purposes\n */\n\n\nfunction wrapChildrenInDefaultBlock(opts, change, node) {\n  change.wrapBlockByKey(node.nodes.first().key, opts.typeDefault, {\n    normalize: false\n  });\n  var wrapper = change.value.document.getDescendant(node.key).nodes.first(); // Add in the remaining items\n\n  node.nodes.rest().forEach(function (child, index) {\n    return change.moveNodeByKey(child.key, wrapper.key, index + 1, {\n      normalize: false\n    });\n  });\n  return change;\n}\n\nexports.default = schema;","map":null,"metadata":{},"sourceType":"script"}