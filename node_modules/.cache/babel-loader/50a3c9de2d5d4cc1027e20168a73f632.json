{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require('slate');\n\nvar _options = require('../options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _ = require('.');\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isListOrItem(options, node) {\n  return (0, _utils.isList)(options, node) || (0, _utils.isItem)(options, node);\n}\n\nfunction mapListDescendants(document) {\n  return function (node) {\n    return {\n      depth: document.getDepth(node.key),\n      node: node\n    };\n  };\n}\n\nfunction sortListDescendants(options, a, b) {\n  if (a.depth !== b.depth) {\n    return b.depth - a.depth;\n  }\n\n  if (a.node.type === b.node.type) {\n    return 0;\n  }\n\n  if (a.node.type === options.typeItem) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction unwrapMappedNodes(change, mappedNode) {\n  return change.withoutNormalizing(function () {\n    change.unwrapBlockByKey(mappedNode.node.key, mappedNode.node.type);\n  });\n}\n\nfunction findAncestorList(change, options, commonAncestor) {\n  var _change$value = change.value,\n      document = _change$value.document,\n      selection = _change$value.selection; // This flag should be true, when elements are in selection\n\n  var flag = false;\n  return commonAncestor.filterDescendants(function (node) {\n    return isListOrItem(options, node);\n  }).filter(function (node) {\n    var hasStart = node.hasNode(selection.start.key);\n    var hasEnd = node.hasNode(selection.end.key);\n    var isListItem = (0, _utils.isItem)(options, node);\n    if (hasStart && isListItem) flag = true;\n    if (hasEnd && isListItem) flag = false;\n    return flag || hasStart || hasEnd;\n  }).map(mapListDescendants(document)).sort(function () {\n    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    return sortListDescendants.apply(undefined, [options].concat(params));\n  });\n}\n\nfunction isSameLevel(sortedMappedNodes) {\n  if (!sortedMappedNodes.size) {\n    return true;\n  }\n\n  var max = sortedMappedNodes.first().depth;\n  var min = sortedMappedNodes.last().depth;\n  return max === min;\n}\n/**\n * Toggle list on the selected range.\n */\n\n\nfunction toggleList(options, change) {\n  var _change$value2 = change.value,\n      document = _change$value2.document,\n      selection = _change$value2.selection;\n  var startBlock = document.getClosestBlock(selection.start.key);\n  var endBlock = document.getClosestBlock(selection.end.key); // -------- SINGLE BLOCK ---------------------------------------------------\n  // The selection is in a single block.\n  // Let's unwrap just the block, not the whole list.\n\n  if (startBlock === endBlock) {\n    return (0, _utils.isSelectionInList)(options, change.value) ? (0, _.unwrapList)(options, change) : (0, _.wrapInList)(options, change);\n  } // -------- NOT A SINGLE BLOCK -------------------------------------------\n\n\n  var commonAncestor = document.getCommonAncestor(startBlock.key, endBlock.key);\n  var sortedMappedNodes = findAncestorList(change, options, commonAncestor); // There are no lists or items in selection => wrap them\n\n  if (!sortedMappedNodes.size) {\n    return (0, _.wrapInList)(options, change);\n  } // All items are the same level => unwrap them\n\n\n  if (isSameLevel(sortedMappedNodes)) {\n    return (0, _.unwrapList)(options, change);\n  } // Common Ancestor is not a list or item\n\n\n  if (!isListOrItem(options, commonAncestor)) {\n    var _newChange = sortedMappedNodes // @TODO last item is filtered, so it wouldn't break down flat whole list -> unwrapNodeByKey should be solution (problem with key)\n    .filter(function (item) {\n      return sortedMappedNodes.last().depth !== item.depth;\n    }).reduce(unwrapMappedNodes, change);\n\n    return _newChange;\n  } // Unwrap all nested nodes\n\n\n  var newChange = sortedMappedNodes.reduce(unwrapMappedNodes, change); // Unwrap common ancestor\n\n  return (0, _.unwrapList)(options, newChange);\n}\n\nexports.default = toggleList;","map":null,"metadata":{},"sourceType":"script"}