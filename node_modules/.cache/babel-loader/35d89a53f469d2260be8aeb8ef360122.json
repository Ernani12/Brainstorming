{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require(\"slate\");\n\nvar commands = {\n  wrapLink: function wrapLink(editor, href) {\n    if (!editor.isLinkActive()) {\n      editor.wrapInline({\n        type: \"link\",\n        data: {\n          href: href\n        }\n      });\n    }\n  },\n  unwrapLink: function unwrapLink(editor) {\n    editor.unwrapInline(\"link\");\n  },\n  insertImageFile: function insertImageFile(editor, file) {\n    var _editor$props = editor.props,\n        uploadImage = _editor$props.uploadImage,\n        onImageUploadStart = _editor$props.onImageUploadStart,\n        onShowToast = _editor$props.onShowToast,\n        onImageUploadStop = _editor$props.onImageUploadStop;\n\n    if (!uploadImage) {\n      console.warn(\"uploadImage callback must be defined to handle image uploads.\");\n    }\n\n    if (onImageUploadStart) onImageUploadStart();\n\n    var key = _slate.KeyUtils.create();\n\n    var alt = \"\"; // load the file as a data URL\n\n    var placeholderSrc = URL.createObjectURL(file);\n\n    var node = _slate.Block.create({\n      key: key,\n      type: \"image\",\n      isVoid: true,\n      data: {\n        src: placeholderSrc,\n        alt: alt,\n        loading: true\n      }\n    });\n\n    editor.insertBlock(node).insertBlock(\"paragraph\").onChange(editor); // withoutSaving prevents this op from being added to the history, so you can't\n    // undo back to showing the upload placeholder. 'onChange' addition is a hack\n    // to get around a bug in slate-drop-or-paste-images\n\n    editor.withoutSaving(function (editor) {\n      // now we have a placeholder, start the image upload. This could be very fast\n      // or take multiple seconds. The user may further edit the content during this time.\n      uploadImage(file).then(function (src) {\n        if (!src) {\n          throw new Error(\"No image url returned from uploadImage callback\");\n        } // replace the placeholder with the final image if we can. The user may have\n        // removed it during upload so we need to take that into account.\n\n\n        try {\n          editor.setNodeByKey(key, {\n            data: {\n              src: src,\n              alt: alt,\n              loading: false\n            }\n          });\n        } catch (err) {\n          console.warn(\"Image placeholder could not be found\", err);\n        }\n      }).catch(function (err) {\n        // if there was an error during upload, remove the placeholder image\n        editor.removeNodeByKey(key);\n\n        if (onShowToast) {\n          onShowToast(\"Sorry, an error occurred uploading the image\");\n        }\n\n        throw err;\n      }).finally(function () {\n        if (onImageUploadStop) onImageUploadStop();\n      });\n    });\n  }\n};\nexports.default = commands;","map":null,"metadata":{},"sourceType":"script"}