{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar canvas_1 = require(\"./canvas\");\n\nvar RenderLayer =\n/** @class */\nfunction (_super) {\n  __extends(RenderLayer, _super);\n\n  function RenderLayer(parentElem, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, parentElem, options) || this;\n\n    _this.parentElem = parentElem;\n    _this.options = options;\n    _this.offscreen = le5le_store_1.Store.get('LT:offscreen');\n\n    _this.parentElem.appendChild(_this.canvas);\n\n    if (_this.data.bkImage) {\n      _this.bkImg = new Image();\n      _this.bkImg.src = _this.data.bkImage;\n\n      _this.bkImg.onload = function () {\n        _this.bkImgRect = _this.coverRect(_this.canvas.width, _this.canvas.height, _this.bkImg.width, _this.bkImg.height);\n\n        _this.render();\n      };\n    }\n\n    return _this;\n  }\n\n  RenderLayer.prototype.render = function () {\n    var ctx = this.canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    if (this.bkImg) {\n      ctx.drawImage(this.bkImg, this.bkImgRect.x, this.bkImgRect.y, this.bkImgRect.width, this.bkImgRect.height, 0, 0, this.width, this.height);\n    }\n\n    if (this.data.bkColor) {\n      ctx.fillStyle = this.data.bkColor;\n      ctx.fillRect(0, 0, this.width, this.height);\n    }\n\n    ctx.drawImage(this.offscreen, 0, 0, this.width, this.height);\n  };\n\n  RenderLayer.prototype.coverRect = function (canvasWidth, canvasHeight, imgWidth, imgHeight) {\n    var x = 0;\n    var y = 0;\n    var width = imgWidth;\n    var height = imgHeight;\n\n    if (imgWidth > imgHeight || imgWidth === imgHeight && canvasWidth < canvasHeight) {\n      width = canvasWidth * height / canvasHeight;\n      x = (imgWidth - width) / 2;\n    } else if (imgWidth < imgHeight || imgWidth === imgHeight && canvasWidth > canvasHeight) {\n      height = canvasHeight * width / canvasWidth;\n      y = (imgHeight - height) / 2;\n    }\n\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  };\n\n  return RenderLayer;\n}(canvas_1.Canvas);\n\nexports.RenderLayer = RenderLayer;","map":null,"metadata":{},"sourceType":"script"}