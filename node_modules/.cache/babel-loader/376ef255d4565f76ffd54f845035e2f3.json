{"ast":null,"code":"import debug from 'debug';\nimport memoizeOne from 'memoize-one';\nimport warning from 'tiny-warning';\nimport { List, Record, Map as Map$1 } from 'immutable';\nimport isPlainObject from 'is-plain-object';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\nfunction CorePlugin(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.plugins,\n      plugins = _a === void 0 ? [] : _a;\n  return __spread(plugins);\n}\n\nvar log = debug('core:controller');\n\nfunction registerPlugin(controller, plugin) {\n  if (Array.isArray(plugin)) {\n    plugin.forEach(function (p) {\n      return registerPlugin(controller, p);\n    });\n    return;\n  }\n\n  if (plugin == null) {\n    return;\n  }\n\n  for (var key in plugin) {\n    var fn = plugin[key];\n    controller.middleware[key] = controller.middleware[key] || [];\n    controller.middleware[key].push(fn);\n  }\n} // modified from koa-compose\n\n\nfunction compose(middleware) {\n  var e_1, _a;\n\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!');\n\n  try {\n    for (var middleware_1 = __values(middleware), middleware_1_1 = middleware_1.next(); !middleware_1_1.done; middleware_1_1 = middleware_1.next()) {\n      var fn = middleware_1_1.value;\n      if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!');\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (middleware_1_1 && !middleware_1_1.done && (_a = middleware_1.return)) _a.call(middleware_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return function (context, next) {\n    // last called middleware #\n    var index = -1;\n    return dispatch(0);\n\n    function dispatch(i) {\n      if (i <= index) throw new Error('next() called multiple times');\n      index = i;\n      var fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return null;\n\n      try {\n        return fn(context, dispatch.bind(null, i + 1));\n      } catch (err) {\n        throw err;\n      }\n    }\n  };\n}\n\nvar Controller =\n/** @class */\nfunction () {\n  function Controller(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = options.plugins,\n        plugins = _a === void 0 ? [] : _a,\n        onChange = options.onChange,\n        readOnly = options.readOnly;\n    this.readOnly = readOnly;\n    this.onChange = onChange;\n    this.middleware = new Map();\n    var corePlugin = CorePlugin({\n      plugins: plugins\n    });\n    registerPlugin(this, corePlugin);\n  }\n\n  Controller.prototype.run = function (key) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var middleware = this.middleware;\n    var fns = middleware[key] || [];\n    warning(fns.length !== 0, \"the middleware function \" + key + \" is not found!\");\n    var composedFn = memoizeOne(compose)(fns); // @ts-ignore\n\n    return composedFn.apply(void 0, __spread(args));\n  };\n\n  Controller.prototype.getValue = function (propKey, arg) {\n    return this.run('getValue', __assign(__assign({}, arg), {\n      propKey: propKey\n    }));\n  };\n\n  Controller.prototype.change = function (model, callback) {\n    this.onChange(model, callback);\n    this.currentModel = model;\n  };\n\n  return Controller;\n}();\n\nvar TopicDirection = {\n  LEFT: 'L',\n  RIGHT: 'R',\n  BOTTOM: 'B',\n  MAIN: 'M' // root\n\n};\nvar DiagramLayoutType;\n\n(function (DiagramLayoutType) {\n  DiagramLayoutType[DiagramLayoutType[\"LEFT_TO_RIGHT\"] = 0] = \"LEFT_TO_RIGHT\";\n  DiagramLayoutType[DiagramLayoutType[\"RIGHT_TO_LEFT\"] = 1] = \"RIGHT_TO_LEFT\";\n  DiagramLayoutType[DiagramLayoutType[\"LEFT_AND_RIGHT\"] = 2] = \"LEFT_AND_RIGHT\";\n  DiagramLayoutType[DiagramLayoutType[\"TOP_TO_BOTTOM\"] = 3] = \"TOP_TO_BOTTOM\";\n})(DiagramLayoutType || (DiagramLayoutType = {}));\n\nvar TopicVisualLevel = {\n  ROOT: 0,\n  PRIMARY: 1,\n  NORMAL: 2\n};\nvar BlockType = {\n  CONTENT: 'CONTENT',\n  DESC: 'DESC'\n};\nvar FocusMode = {\n  NORMAL: 'NORMAL',\n  EDITING_CONTENT: 'EDITING_CONTENT',\n  EDITING_DESC: 'EDITING_DESC',\n  SHOW_POPUP: 'SHOW_POPUP',\n  DRAGGING: 'DRAGGING'\n};\nvar TopicRelationship = {\n  ANCESTOR: 'ANCESTOR',\n  DESCENDANT: 'DESCENDANT',\n  SIBLING: 'SIBLING',\n  NONE: 'NONE'\n};\nvar OpType = {\n  TOGGLE_COLLAPSE: 'TOGGLE_COLLAPSE',\n  COLLAPSE_ALL: 'COLLAPSE_ALL',\n  EXPAND_ALL: 'EXPAND_ALL',\n  EXPAND_TO: 'EXPAND_TO',\n  ADD_CHILD: 'ADD_CHILD',\n  ADD_SIBLING: 'ADD_SIBLING',\n  DELETE_TOPIC: 'DELETE_TOPIC',\n  FOCUS_TOPIC: 'FOCUS_TOPIC',\n  SET_FOCUS_MODE: 'SET_FOCUS_MODE',\n  SET_STYLE: 'SET_STYLE',\n  SET_THEME: 'SET_THEME',\n  SET_TOPIC_BLOCK: 'SET_TOPIC_BLOCK',\n  DELETE_TOPIC_BLOCK: 'DELETE_TOPIC_BLOCK',\n  // SET_TOPIC_CONTENT: 'SET_TOPIC_CONTENT',\n  // SET_TOPIC_DESC: 'SET_TOPIC_DESC',\n  START_EDITING_CONTENT: 'START_EDITING_CONTENT',\n  START_EDITING_DESC: 'START_EDITING_DESC',\n  DRAG_AND_DROP: 'DRAG_AND_DROP',\n  SET_EDITOR_ROOT: 'SET_EDITOR_ROOT'\n};\n\nfunction createKey() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nvar defaultBlockRecord = {\n  type: null,\n  key: null,\n  data: null\n};\n\nvar Block =\n/** @class */\nfunction (_super) {\n  __extends(Block, _super);\n\n  function Block() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Block.prototype, \"data\", {\n    get: function () {\n      return this.get('data');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Block.prototype, \"type\", {\n    get: function () {\n      return this.get('type');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Block.create = function (obj) {\n    return new Block(obj);\n  };\n\n  Block.createList = function (obj) {\n    if (List.isList(obj) || Array.isArray(obj)) {\n      // @ts-ignore\n      return List(obj.map(Block.create));\n    }\n\n    throw new Error(\"Block.createList only accepts Array or List, but you passed it: \" + obj);\n  };\n\n  return Block;\n}(Record(defaultBlockRecord));\n\nvar defaultTopicRecord = {\n  key: null,\n  parentKey: null,\n  collapse: false,\n  subKeys: null,\n  blocks: null,\n  relations: null,\n  style: null\n};\n\nvar Topic =\n/** @class */\nfunction (_super) {\n  __extends(Topic, _super);\n\n  function Topic() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Topic.prototype, \"key\", {\n    get: function () {\n      return this.get('key');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"parentKey\", {\n    get: function () {\n      return this.get('parentKey');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"collapse\", {\n    get: function () {\n      return this.get('collapse');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"subKeys\", {\n    get: function () {\n      return this.get('subKeys');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"blocks\", {\n    get: function () {\n      return this.get('blocks');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"relations\", {\n    get: function () {\n      return this.get('relations');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Topic.prototype, \"style\", {\n    get: function () {\n      return this.get('style');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Topic.prototype.getBlock = function (type) {\n    var index = this.blocks.findIndex(function (b) {\n      return b.type === type;\n    });\n    if (index === -1) return {\n      index: index,\n      block: null\n    };\n    return {\n      index: index,\n      block: this.blocks.get(index)\n    };\n  };\n\n  Topic.fromJSON = function (obj) {\n    var key = obj.key,\n        _a = obj.parentKey,\n        parentKey = _a === void 0 ? null : _a,\n        blocks = obj.blocks,\n        _b = obj.subKeys,\n        subKeys = _b === void 0 ? [] : _b,\n        _c = obj.collapse,\n        collapse = _c === void 0 ? false : _c;\n    return new Topic({\n      key: key,\n      parentKey: parentKey,\n      collapse: collapse,\n      subKeys: List(subKeys),\n      blocks: Block.createList(blocks)\n    });\n  };\n\n  Topic.create = function (_a) {\n    var key = _a.key,\n        _b = _a.parentKey,\n        parentKey = _b === void 0 ? null : _b,\n        _c = _a.content,\n        content = _c === void 0 ? '' : _c,\n        _d = _a.subKeys,\n        subKeys = _d === void 0 ? [] : _d,\n        _e = _a.collapse,\n        collapse = _e === void 0 ? false : _e;\n    var block = Block.create({\n      type: BlockType.CONTENT,\n      data: content,\n      key: null\n    });\n    var blocks = List([block]);\n    return new Topic({\n      key: key,\n      parentKey: parentKey,\n      blocks: blocks,\n      subKeys: List(subKeys),\n      collapse: collapse\n    });\n  };\n\n  return Topic;\n}(Record(defaultTopicRecord));\n\nfunction getAllSubTopicKeys(model, topicKey) {\n  var item = model.getTopic(topicKey);\n  var res = [];\n\n  if (item.subKeys.size > 0) {\n    var subKeys = item.subKeys.toArray();\n    res.push.apply(res, __spread(subKeys));\n    res = subKeys.reduce(function (acc, key) {\n      acc.push.apply(acc, __spread(getAllSubTopicKeys(model, key)));\n      return acc;\n    }, res);\n  }\n\n  return res;\n}\n\nfunction getKeyPath(model, topicKey, reverse) {\n  if (reverse === void 0) {\n    reverse = false;\n  }\n\n  var res = [topicKey];\n  var item = model.getTopic(topicKey);\n\n  while (item.parentKey) {\n    reverse ? res.push(item.parentKey) : res.unshift(item.parentKey);\n    item = model.getParentTopic(item.key);\n  }\n\n  return res;\n}\n\nfunction getRelationship(model, srcKey, dstKey) {\n  var srcTopic = model.getTopic(srcKey);\n  var dstTopic = model.getTopic(dstKey);\n\n  if (srcTopic && dstTopic) {\n    if (srcTopic.parentKey == dstTopic.parentKey) return TopicRelationship.SIBLING;\n    var pTopic = srcTopic;\n\n    while (pTopic.parentKey) {\n      if (pTopic.parentKey === dstTopic.key) return TopicRelationship.DESCENDANT;\n      pTopic = model.getParentTopic(pTopic.key);\n    }\n\n    pTopic = dstTopic;\n\n    while (pTopic.parentKey) {\n      if (pTopic.parentKey === srcTopic.key) return TopicRelationship.ANCESTOR;\n      pTopic = model.getParentTopic(pTopic.key);\n    }\n  }\n\n  return TopicRelationship.NONE;\n}\n\nvar log$1 = debug('modifier');\n\nfunction toggleCollapse(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  var topic = model.getTopic(topicKey);\n\n  if (topic && topic.subKeys.size !== 0) {\n    topic = topic.merge({\n      collapse: !topic.collapse\n    });\n    model = model.updateIn(['topics', topic.key, 'collapse'], function (collapse) {\n      return !collapse;\n    });\n  }\n\n  model = focusTopic({\n    model: model,\n    topicKey: topicKey,\n    focusMode: FocusMode.NORMAL\n  });\n  return model;\n}\n\nfunction collapseAll(_a) {\n  var model = _a.model;\n  log$1('collapseAll');\n  var topicKeys = getAllSubTopicKeys(model, model.editorRootTopicKey);\n  log$1(model);\n  model = model.withMutations(function (m) {\n    topicKeys.forEach(function (topicKey) {\n      m.setIn(['topics', topicKey, 'collapse'], true);\n    });\n  });\n  log$1(model);\n  return model;\n}\n\nfunction expandAll(_a) {\n  var model = _a.model;\n  var topicKeys = getAllSubTopicKeys(model, model.editorRootTopicKey);\n  log$1(model);\n  model = model.withMutations(function (m) {\n    topicKeys.forEach(function (topicKey) {\n      m.setIn(['topics', topicKey, 'collapse'], false);\n    });\n  });\n  log$1(model);\n  return model;\n}\n\nfunction expandTo(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  var keys = getKeyPath(model, topicKey).filter(function (t) {\n    return t !== topicKey;\n  });\n  model = model.withMutations(function (m) {\n    keys.forEach(function (topicKey) {\n      m.setIn(['topics', topicKey, 'collapse'], false);\n    });\n  }); // 要让这个节点在视口中可见\n\n  if (getRelationship(model, topicKey, model.editorRootTopicKey) !== TopicRelationship.DESCENDANT) {\n    model = model.set('editorRootTopicKey', model.rootTopicKey);\n  }\n\n  return model;\n}\n\nfunction focusTopic(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey,\n      focusMode = _a.focusMode;\n  log$1('focus topic');\n  if (topicKey !== model.focusKey) model = model.set('focusKey', topicKey);\n  if (focusMode !== model.focusMode) model = model.set('focusMode', focusMode);\n  return model;\n}\n\nfunction setFocusMode(_a) {\n  var model = _a.model,\n      focusMode = _a.focusMode;\n  log$1('setFocusMode');\n  if (focusMode !== model.focusMode) model = model.set('focusMode', focusMode);\n  return model;\n}\n\nfunction addChild(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  log$1('addChild:', topicKey);\n  var topic = model.getTopic(topicKey);\n\n  if (topic) {\n    var child_1 = Topic.create({\n      key: createKey(),\n      parentKey: topic.key\n    });\n    topic = topic.set('collapse', false).update('subKeys', function (subKeys) {\n      return subKeys.push(child_1.key);\n    });\n    model = model.update('topics', function (topics) {\n      return topics.set(topicKey, topic).set(child_1.key, child_1);\n    });\n    return focusTopic({\n      model: model,\n      topicKey: child_1.key,\n      focusMode: FocusMode.EDITING_CONTENT\n    });\n  }\n\n  return model;\n}\n\nfunction addSibling(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  if (topicKey === model.rootTopicKey) return model;\n  var topic = model.getTopic(topicKey);\n\n  if (topic) {\n    var pItem = model.getTopic(topic.parentKey);\n    var idx_1 = pItem.subKeys.indexOf(topicKey);\n    var sibling_1 = Topic.create({\n      key: createKey(),\n      parentKey: pItem.key\n    });\n    model = model.update('topics', function (topics) {\n      return topics.set(sibling_1.key, sibling_1);\n    }).updateIn(['topics', pItem.key, 'subKeys'], function (subKeys) {\n      return subKeys.insert(idx_1 + 1, sibling_1.key);\n    });\n    return focusTopic({\n      model: model,\n      topicKey: sibling_1.key,\n      focusMode: FocusMode.EDITING_CONTENT\n    });\n  }\n\n  return model;\n}\n\nfunction deleteTopic(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  if (topicKey === model.editorRootTopicKey) return model;\n  var item = model.getTopic(topicKey);\n\n  if (item) {\n    model = model.withMutations(function (m) {\n      m.update('topics', function (topics) {\n        topics = topics.delete(topicKey);\n        var deleteKeys = getAllSubTopicKeys(model, topicKey);\n        topics = topics.withMutations(function (t) {\n          deleteKeys.forEach(function (dKey) {\n            t.delete(dKey);\n          });\n        });\n        return topics;\n      });\n      m.updateIn(['topics', item.parentKey, 'subKeys'], function (subKeys) {\n        return subKeys.delete(subKeys.indexOf(topicKey));\n      });\n      if (m.focusKey === topicKey) m.set('focusKey', null).set('focusMode', null);\n    });\n  }\n\n  return model;\n}\n/**\r\n * setBlockData of one topic\r\n * @param model\r\n * @param topicKey\r\n * @param blockType\r\n * @param focusMode\r\n * @param data\r\n */\n\n\nfunction setBlockData(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey,\n      blockType = _a.blockType,\n      focusMode = _a.focusMode,\n      data = _a.data;\n  var topic = model.getTopic(topicKey);\n\n  if (topic) {\n    var _b = topic.getBlock(blockType),\n        index = _b.index,\n        block = _b.block;\n\n    if (index === -1) {\n      model = model.updateIn(['topics', topicKey, 'blocks'], function (blocks) {\n        return blocks.push(Block.create({\n          type: blockType,\n          data: data\n        }));\n      });\n    } else {\n      if (block.data !== data) {\n        model = model.updateIn(['topics', topicKey, 'blocks', index, 'data'], function (dt) {\n          return data;\n        });\n      }\n    }\n\n    if (focusMode) {\n      model = focusTopic({\n        model: model,\n        topicKey: topicKey,\n        focusMode: focusMode\n      });\n    }\n  }\n\n  return model;\n}\n\nfunction deleteBlock(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey,\n      blockType = _a.blockType;\n  var topic = model.getTopic(topicKey);\n\n  if (topic) {\n    var index_1 = topic.getBlock(blockType).index;\n\n    if (index_1 !== -1) {\n      model = model.updateIn(['topics', topicKey, 'blocks'], function (blocks) {\n        return blocks.delete(index_1);\n      });\n    }\n\n    model = focusTopic({\n      model: model,\n      topicKey: null,\n      focusMode: null\n    });\n  }\n\n  return model;\n}\n\nfunction setStyle(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey,\n      style = _a.style;\n  var topic = model.getTopic(topicKey);\n\n  if (topic) {\n    if (style !== topic.style) {\n      model = model.updateIn(['topics', topicKey, 'style'], function (s) {\n        return style;\n      });\n    }\n  }\n\n  return model;\n}\n\nfunction setTheme(_a) {\n  var model = _a.model,\n      theme = _a.theme;\n  model = model.setIn(['config', 'theme'], theme);\n  return model;\n}\n\nfunction setLayoutDir(_a) {\n  var model = _a.model,\n      layoutDir = _a.layoutDir;\n  if (model.config.layoutDir === layoutDir) return model;\n  model = model.setIn(['config', 'layoutDir'], layoutDir);\n  return model;\n}\n\nfunction setEditorRootTopicKey(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  if (model.editorRootTopicKey !== topicKey) model = model.set('editorRootTopicKey', topicKey);\n  if (model.getTopic(topicKey).collapse) model = model.setIn(['topics', topicKey, 'collapse'], false);\n  return model;\n}\n\nfunction setZoomFactor(_a) {\n  var model = _a.model,\n      zoomFactor = _a.zoomFactor;\n  if (model.zoomFactor !== zoomFactor) model = model.set('zoomFactor', zoomFactor);\n  return model;\n}\n\nvar modifiers = {\n  addChild: addChild,\n  addSibling: addSibling,\n  toggleCollapse: toggleCollapse,\n  collapseAll: collapseAll,\n  expandAll: expandAll,\n  expandTo: expandTo,\n  focusTopic: focusTopic,\n  setFocusMode: setFocusMode,\n  deleteTopic: deleteTopic,\n  setBlockData: setBlockData,\n  deleteBlock: deleteBlock,\n  setStyle: setStyle,\n  setTheme: setTheme,\n  setLayoutDir: setLayoutDir,\n  setEditorRootTopicKey: setEditorRootTopicKey,\n  setZoomFactor: setZoomFactor\n};\n\nfunction isThemeType(obj) {\n  return obj.name != null && obj.background != null && obj.highlightColor != null;\n}\n\nvar defaultTheme = {\n  name: 'default',\n  randomColor: true,\n  background: 'rgb(57,60,65)',\n  highlightColor: '#50C9CE',\n  marginH: 60,\n  marginV: 20,\n  contentStyle: {\n    lineHeight: '1.5'\n  },\n  linkStyle: {\n    lineRadius: 5,\n    lineType: 'curve',\n    lineWidth: '3px'\n  },\n  rootTopic: {\n    contentStyle: {\n      fontSize: '34px',\n      borderRadius: '35px',\n      padding: '16px 18px 16px 18px'\n    },\n    subLinkStyle: {\n      lineType: 'curve',\n      lineWidth: '3px',\n      lineColor: 'rgb(113, 203, 45)'\n    }\n  },\n  primaryTopic: {\n    contentStyle: {\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderRadius: '20px',\n      fontSize: '17px',\n      padding: '10px 15px 10px 15px'\n    },\n    subLinkStyle: {\n      lineType: 'curve',\n      lineWidth: '3px',\n      lineColor: 'rgb(113, 203, 45)'\n    }\n  },\n  normalTopic: {\n    contentStyle: {\n      border: '1px solid #e8eaec',\n      borderRadius: '20px',\n      fontSize: '17px',\n      padding: '4px 10px'\n    },\n    subLinkStyle: {\n      lineType: 'curve',\n      lineWidth: '3px',\n      lineColor: 'white'\n    }\n  }\n};\nvar defaultConfigRecord = {\n  readOnly: false,\n  allowUndo: true,\n  layoutDir: DiagramLayoutType.LEFT_AND_RIGHT,\n  theme: defaultTheme\n};\n\nvar Config =\n/** @class */\nfunction (_super) {\n  __extends(Config, _super);\n\n  function Config() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Config.prototype, \"layoutDir\", {\n    get: function () {\n      return this.get('layoutDir');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Config.prototype, \"readOnly\", {\n    get: function () {\n      return this.get('readOnly');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Config.prototype, \"allowUndo\", {\n    get: function () {\n      return this.get('allowUndo');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Config.prototype, \"theme\", {\n    get: function () {\n      return this.get('theme');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Config.fromJSON = function (obj) {\n    return new Config(obj);\n  };\n\n  return Config;\n}(Record(defaultConfigRecord));\n\nvar defaultModelRecord = {\n  topics: Map$1(),\n  extData: Map$1(),\n  config: null,\n  rootTopicKey: null,\n  editorRootTopicKey: null,\n  focusKey: null,\n  focusMode: null,\n  formatVersion: null,\n  zoomFactor: 1\n};\n\nvar Model =\n/** @class */\nfunction (_super) {\n  __extends(Model, _super);\n\n  function Model() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Model.isModel = function (obj) {\n    return obj instanceof Model;\n  };\n\n  Model.create = function (attrs) {\n    if (attrs === void 0) {\n      attrs = null;\n    }\n\n    if (attrs == null) return Model.createEmpty();\n    var res;\n\n    if (Model.isModel(attrs)) {\n      res = attrs;\n    }\n\n    if (isPlainObject(attrs)) {\n      res = Model.fromJSON(attrs);\n    }\n\n    if (res) {\n      if (res.focusKey == null) {\n        res = res.set('focusKey', res.rootTopicKey);\n      }\n\n      if (res.focusMode == null) {\n        res = res.set('focusMode', FocusMode.NORMAL);\n      }\n\n      return res;\n    }\n\n    throw new Error(\"`Value.create` only accepts objects or values, but you passed it: \" + attrs);\n  };\n\n  Model.createEmpty = function () {\n    var model = new Model();\n    var rootTopic = Topic.create({\n      key: createKey()\n    });\n    return model.update('topics', function (topics) {\n      return topics.set(rootTopic.key, rootTopic);\n    }).set('rootTopicKey', rootTopic.key).set('focusKey', rootTopic.key).set('focusMode', FocusMode.NORMAL);\n  };\n\n  Model.fromJSON = function (object) {\n    var model = new Model();\n    var _a = object.topics,\n        topics = _a === void 0 ? [] : _a,\n        _b = object.config,\n        config = _b === void 0 ? {} : _b,\n        rootTopicKey = object.rootTopicKey;\n    var editorRootTopicKey = object.editorRootTopicKey;\n    if (editorRootTopicKey === undefined) editorRootTopicKey = rootTopicKey;\n    model = model.merge({\n      rootTopicKey: rootTopicKey,\n      editorRootTopicKey: editorRootTopicKey\n    });\n    model = model.withMutations(function (model) {\n      topics.forEach(function (topic) {\n        model.update('topics', function (topics) {\n          return topics.set(topic.key, Topic.fromJSON(topic));\n        });\n      });\n      model.set('config', Config.fromJSON(config));\n    });\n    return model;\n  };\n\n  Model.prototype.toJS = function () {\n    var obj = {\n      rootTopicKey: this.rootTopicKey,\n      topics: Object.values(this.topics.toJS()),\n      config: this.config,\n      extData: this.extData,\n      zoomFactor: this.zoomFactor\n    };\n    return obj;\n  };\n\n  Object.defineProperty(Model.prototype, \"extData\", {\n    get: function () {\n      return this.get('extData');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"topics\", {\n    get: function () {\n      return this.get('topics');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"config\", {\n    get: function () {\n      return this.get('config');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"formatVersion\", {\n    get: function () {\n      return this.get('formatVersion');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"rootTopicKey\", {\n    get: function () {\n      return this.get('rootTopicKey');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"editorRootTopicKey\", {\n    get: function () {\n      return this.get('editorRootTopicKey');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"focusKey\", {\n    get: function () {\n      return this.get('focusKey');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"focusMode\", {\n    get: function () {\n      return this.get('focusMode');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"editingContentKey\", {\n    get: function () {\n      return this.focusMode === FocusMode.EDITING_CONTENT ? this.focusKey : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"editingDescKey\", {\n    get: function () {\n      return this.focusMode === FocusMode.EDITING_DESC ? this.focusKey : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Model.prototype.getTopic = function (key) {\n    return this.topics.get(key);\n  };\n\n  Model.prototype.getExtDataItem = function (key, c) {\n    return this.extData.get(key) || new c();\n  };\n\n  Model.prototype.getParentTopic = function (key) {\n    var topic = this.getTopic(key);\n    return topic.parentKey ? this.getTopic(topic.parentKey) : null;\n  };\n\n  Model.prototype.getTopicVisualLevel = function (key) {\n    var topic = this.getTopic(key);\n    var level = 0;\n\n    while (topic && topic.key !== this.editorRootTopicKey) {\n      level++;\n      topic = this.getParentTopic(topic.key);\n    }\n\n    return level;\n  };\n\n  Object.defineProperty(Model.prototype, \"rootTopic\", {\n    get: function () {\n      return this.getTopic(this.rootTopicKey);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"zoomFactor\", {\n    get: function () {\n      return this.get('zoomFactor');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Model;\n}(Record(defaultModelRecord));\n\nexport { Block, BlockType, Config, Controller, DiagramLayoutType, FocusMode, Model, modifiers as ModelModifier, modifiers as Modifiers, OpType, Topic, TopicDirection, TopicRelationship, TopicVisualLevel, createKey, defaultTheme, getAllSubTopicKeys, getKeyPath, getRelationship, isThemeType };","map":null,"metadata":{},"sourceType":"module"}