{"ast":null,"code":"import { OpType, FocusMode, getAllSubTopicKeys, ModelModifier } from '@blink-mind/core';\nimport { ZIndex, Flex, PropKey, cancelEvent, iconClassName, TopicBlockIcon, StyledCheckbox, Icon } from '@blink-mind/renderer-react';\nimport { Button, Alert, PopoverInteractionKind, Popover, MenuDivider, MenuItem } from '@blueprintjs/core';\nimport { createElement, useState, Fragment } from 'react';\nimport styled from 'styled-components';\nimport { List, Map, Record } from 'immutable';\nimport { Omnibar } from '@blueprintjs/select';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar FOCUS_MODE_SET_REFERENCE_TOPICS = 'FOCUS_MODE_SET_REFERENCE_TOPICS'; // 添加引用的Topic\n\nvar OP_TYPE_START_SET_REFERENCE_TOPICS = 'OP_TYPE_START_SET_REFERENCE_TOPICS';\nvar OP_TYPE_SET_REFERENCE_TOPICS = 'OP_TYPE_SET_REFERENCE_TOPICS';\nvar EXT_DATA_KEY_TOPIC_REFERENCE = 'TOPIC_REFERENCE';\nvar EXT_KEY_TOPIC_REFERENCE = 'EXT_KEY_TOPIC_REFERENCE';\nvar Root = styled(ZIndex)(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  position: absolute;\\n  left: calc(50% - 150px);\\n  top: 30px;\\n  width: 300px;\\n  background: white;\\n  padding: 10px;\\n  user-select: none;\\n\"], [\"\\n  position: absolute;\\n  left: calc(50% - 150px);\\n  top: 30px;\\n  width: 300px;\\n  background: white;\\n  padding: 10px;\\n  user-select: none;\\n\"])));\nvar Title = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  margin-bottom: 10px;\\n\"], [\"\\n  margin-bottom: 10px;\\n\"])));\n\nfunction AddReferenceTopicPanel(props) {\n  var zIndex = props.zIndex,\n      controller = props.controller,\n      topicKey = props.topicKey;\n\n  var onClickCancel = function (e) {\n    controller.run('clearSelectedReferenceKeys', props);\n    controller.run('enableOperation', props);\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.SET_FOCUS_MODE,\n      focusMode: FocusMode.NORMAL\n    }));\n  };\n\n  var onClickConfirm = function (e) {\n    var referenceKeys = controller.run('getSelectedReferenceKeys', props);\n    controller.run('enableOperation', props);\n    controller.run('operation', __assign(__assign({}, props), {\n      opArray: [{\n        opType: OP_TYPE_SET_REFERENCE_TOPICS,\n        topicKey: topicKey,\n        referenceKeys: referenceKeys\n      }, {\n        opType: OpType.FOCUS_TOPIC,\n        topicKey: topicKey,\n        focusMode: FocusMode.NORMAL\n      }]\n    }));\n    controller.run('clearSelectedReferenceKeys', props);\n  };\n\n  return createElement(Root, {\n    zIndex: zIndex\n  }, createElement(Title, null, \"Please select the topics you want to reference. After selection, click the confirm button.\"), createElement(Flex, {\n    justifyContent: 'space-around'\n  }, createElement(Button, {\n    onClick: onClickConfirm\n  }, \"Confirm\"), createElement(Button, {\n    onClick: onClickCancel\n  }, \"Cancel\")));\n}\n\nvar templateObject_1, templateObject_2;\nvar defaultReferenceRecord = {\n  keyList: List(),\n  dataMap: Map()\n};\n\nvar ReferenceRecord =\n/** @class */\nfunction (_super) {\n  __extends(ReferenceRecord, _super);\n\n  function ReferenceRecord() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(ReferenceRecord.prototype, \"keyList\", {\n    get: function () {\n      return this.get('keyList');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceRecord.prototype, \"dataMap\", {\n    get: function () {\n      return this.get('dataMap');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ReferenceRecord;\n}(Record(defaultReferenceRecord));\n\nvar defaultExtDataReferenceRecord = {\n  reference: Map()\n};\n\nvar ExtDataReference =\n/** @class */\nfunction (_super) {\n  __extends(ExtDataReference, _super);\n\n  function ExtDataReference() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(ExtDataReference.prototype, \"reference\", {\n    get: function () {\n      return this.get('reference');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ExtDataReference.prototype.getReferenceKeys = function (topicKey) {\n    if (this.reference.has(topicKey)) {\n      return this.reference.get(topicKey).keyList.toArray();\n    }\n\n    return [];\n  };\n\n  ExtDataReference.prototype.getReferencedKeys = function (topicKey) {\n    var res = [];\n    this.reference.forEach(function (v, k) {\n      if (v.keyList.includes(topicKey)) {\n        res.push(k);\n      }\n    });\n    return res;\n  };\n\n  return ExtDataReference;\n}(Record(defaultExtDataReferenceRecord)); // TODO 能否优化这个函数的写法\n\n\nfunction setReferenceTopicKeys(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey,\n      referenceKeys = _a.referenceKeys;\n  var extData = model.getExtDataItem(EXT_DATA_KEY_TOPIC_REFERENCE, ExtDataReference);\n  var referenceRecord = extData.reference.get(topicKey) || new ReferenceRecord();\n  referenceRecord = referenceRecord.set('keyList', List(referenceKeys));\n  extData = extData.setIn(['reference', topicKey], referenceRecord);\n  model = model.setIn(['extData', EXT_DATA_KEY_TOPIC_REFERENCE], extData);\n  return model;\n}\n\nvar Root$1 = styled.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\"\\n  display: flex;\\n  width: 380px;\\n  margin: 10px;\\n  justify-content: center;\\n  align-items: center;\\n\"], [\"\\n  display: flex;\\n  width: 380px;\\n  margin: 10px;\\n  justify-content: center;\\n  align-items: center;\\n\"])));\nvar Content = styled.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([\"\\n  width: 300px;\\n  text-decoration: underline;\\n  cursor: pointer;\\n\"], [\"\\n  width: 300px;\\n  text-decoration: underline;\\n  cursor: pointer;\\n\"])));\nvar ButtonPlace = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  width: 80px;\\n\"], [\"\\n  width: 80px;\\n\"])));\n\nfunction ReferenceTopicThumbnail(props) {\n  var controller = props.controller,\n      refKey = props.refKey,\n      refType = props.refType,\n      removeHandler = props.removeHandler;\n\n  var _a = __read(useState(false), 2),\n      deleteConfirm = _a[0],\n      setDeleteConfirm = _a[1];\n\n  var onClick = function (e) {\n    e.stopPropagation();\n    controller.run('focusTopicAndMoveToCenter', __assign(__assign({}, props), {\n      topicKey: refKey\n    }));\n  };\n\n  var onClickRemove = function (e) {\n    setDeleteConfirm(true);\n  };\n\n  var content = controller.getValue(PropKey.TOPIC_TITLE, __assign(__assign({}, props), {\n    topicKey: refKey,\n    maxLength: 100\n  }));\n  var deleteAlertProps = {\n    isOpen: deleteConfirm,\n    cancelButtonText: 'cancel',\n    onConfirm: function (e) {\n      removeHandler(e);\n    },\n    onCancel: function (e) {\n      setDeleteConfirm(false);\n    },\n    onClose: function (e) {\n      setDeleteConfirm(false);\n    }\n  };\n  return createElement(Root$1, null, createElement(Content, {\n    onClick: onClick\n  }, content), createElement(ButtonPlace, null, refType === 'reference' && createElement(Fragment, null, createElement(Button, {\n    onClick: onClickRemove\n  }, \"Remove\"), createElement(Alert, __assign({}, deleteAlertProps), createElement(\"p\", null, \"Are you confirm to remove this reference?\")))));\n}\n\nvar templateObject_1$1, templateObject_2$1, templateObject_3;\nvar Root$2 = styled.div(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\"\"], [\"\"])));\nvar Group = styled.div(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([\"\\n  padding: 10px;\\n\"], [\"\\n  padding: 10px;\\n\"])));\nvar GroupList = styled.div(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([\"\\n  max-height: 200px;\\n  overflow: auto;\\n\"], [\"\\n  max-height: 200px;\\n  overflow: auto;\\n\"])));\nvar GroupTitle = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n  font-size: 20px;\\n  color: #106ba3;\\n\"], [\"\\n  font-size: 20px;\\n  color: #106ba3;\\n\"])));\nvar GotoBtn = styled.div(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n  text-decoration: underline;\\n  color: #106ba3;\\n  cursor: pointer;\\n\"], [\"\\n  text-decoration: underline;\\n  color: #106ba3;\\n  cursor: pointer;\\n\"])));\n\nfunction ReferenceTopicList(props) {\n  var topicKey = props.topicKey,\n      controller = props.controller,\n      model = props.model;\n  var extData = model.extData.get(EXT_DATA_KEY_TOPIC_REFERENCE);\n\n  var removeReference = function (refKey) {\n    return function (e) {\n      e.stopPropagation();\n      var keyList = extData.reference.get(topicKey).keyList;\n      controller.run('operation', __assign(__assign({}, props), {\n        opArray: [{\n          opType: OP_TYPE_SET_REFERENCE_TOPICS,\n          topicKey: topicKey,\n          focusMode: FocusMode.NORMAL,\n          referenceKeys: keyList.delete(keyList.indexOf(refKey)).toArray()\n        }]\n      }));\n    };\n  };\n\n  var referenceKeys = extData.getReferenceKeys(topicKey);\n  var referenceGroup = referenceKeys.length === 0 ? null : createElement(Group, null, createElement(GroupTitle, null, \"Reference Topics:\"), createElement(GroupList, null, referenceKeys.map(function (key) {\n    var thumbProps = __assign(__assign({}, props), {\n      key: key,\n      refKey: key,\n      refType: 'reference',\n      removeHandler: removeReference(key)\n    }); //@ts-ignore\n\n\n    return createElement(ReferenceTopicThumbnail, __assign({}, thumbProps));\n  })));\n  var referencedKeys = extData.getReferencedKeys(topicKey);\n  var referencedGroup = referencedKeys.length === 0 ? null : createElement(Group, null, createElement(GroupTitle, null, \"Referenced Topics:\"), createElement(GroupList, null, referencedKeys.map(function (key) {\n    var thumbProps = __assign(__assign({}, props), {\n      key: key,\n      refKey: key,\n      refType: 'referenced'\n    }); //@ts-ignore\n\n\n    return createElement(ReferenceTopicThumbnail, __assign({}, thumbProps));\n  })));\n\n  var onClickGotoOriginTopic = function (e) {\n    e.stopPropagation();\n    controller.run('focusTopicAndMoveToCenter', props);\n  };\n\n  var currentTopic = model.focusKey !== topicKey && createElement(Group, null, createElement(GotoBtn, {\n    onClick: onClickGotoOriginTopic\n  }, \"Goto Origin Topic\"));\n  return createElement(Root$2, {\n    onMouseDown: cancelEvent\n  }, referenceGroup, referencedGroup, currentTopic);\n}\n\nvar templateObject_1$2, templateObject_2$2, templateObject_3$1, templateObject_4, templateObject_5;\n\nfunction TopicExtReference(props) {\n  var model = props.model,\n      topicKey = props.topicKey;\n  var extData = model.extData.get(EXT_DATA_KEY_TOPIC_REFERENCE) || new ExtDataReference();\n  var refRecord = extData.reference.get(topicKey);\n  var referencedKeys = [];\n  extData.reference.forEach(function (v, k) {\n    if (v.keyList.includes(topicKey)) referencedKeys.push(k);\n  });\n  if ((refRecord == null || refRecord.keyList.size === 0) && referencedKeys.length === 0) return null;\n  var iconProps = {\n    className: iconClassName('reference'),\n    tabIndex: -1\n  };\n  var icon = createElement(TopicBlockIcon, __assign({}, iconProps));\n  var tooltipContent = createElement(ReferenceTopicList, __assign({}, props));\n  var tooltipProps = {\n    autoFocus: false,\n    content: tooltipContent,\n    target: icon,\n    interactionKind: PopoverInteractionKind.CLICK,\n    hoverOpenDelay: 500\n  };\n  return createElement(Popover, __assign({}, tooltipProps));\n}\n\nfunction TopicReferenceCheckbox(props) {\n  var topicKey = props.topicKey,\n      selectedTopicKeys = props.selectedTopicKeys;\n  var a = selectedTopicKeys.has(topicKey);\n\n  var _a = __read(useState(a), 2),\n      checked = _a[0],\n      setChecked = _a[1];\n\n  var checkboxProps = {\n    checked: checked,\n    onChange: function () {\n      if (selectedTopicKeys.has(topicKey)) {\n        selectedTopicKeys.delete(topicKey);\n      } else {\n        selectedTopicKeys.add(topicKey);\n      }\n\n      setChecked(!checked);\n    }\n  };\n  return createElement(StyledCheckbox, __assign({}, checkboxProps));\n}\n\nfunction TopicReferencePlugin() {\n  var selectedTopicKeys = new Set();\n\n  function startSetReferenceTopics(_a) {\n    var model = _a.model,\n        topicKey = _a.topicKey;\n    var extData = model.getExtDataItem(EXT_DATA_KEY_TOPIC_REFERENCE, ExtDataReference);\n    selectedTopicKeys = new Set(extData.getReferenceKeys(topicKey));\n    model = ModelModifier.focusTopic({\n      model: model,\n      topicKey: topicKey,\n      focusMode: FOCUS_MODE_SET_REFERENCE_TOPICS\n    });\n    return model;\n  }\n\n  return {\n    customizeTopicContextMenu: function (props, next) {\n      var controller = props.controller;\n\n      function onClickSetReferenceTopics(e) {\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OP_TYPE_START_SET_REFERENCE_TOPICS\n        }));\n        controller.run('disableOperation', __assign(__assign({}, props), {\n          whiteList: [OpType.TOGGLE_COLLAPSE]\n        }));\n      }\n\n      return createElement(Fragment, null, next(), createElement(MenuDivider, null), createElement(MenuItem, {\n        key: EXT_KEY_TOPIC_REFERENCE,\n        icon: Icon('reference'),\n        text: \"Set Reference Topics\",\n        onClick: onClickSetReferenceTopics\n      }));\n    },\n    getOpMap: function (props, next) {\n      var opMap = next();\n      opMap.set(OP_TYPE_START_SET_REFERENCE_TOPICS, startSetReferenceTopics);\n      opMap.set(OP_TYPE_SET_REFERENCE_TOPICS, setReferenceTopicKeys);\n      return opMap;\n    },\n    beforeOpFunction: function (props, next) {\n      var model = next();\n      var opType = props.opType,\n          topicKey = props.topicKey; // 注意是在beforeOpFunction里面操作\n\n      if (opType === OpType.DELETE_TOPIC && topicKey !== model.editorRootTopicKey) {\n        var allDeleteKeys = getAllSubTopicKeys(model, topicKey);\n        allDeleteKeys.push(topicKey);\n        var extData_1 = model.getExtDataItem(EXT_DATA_KEY_TOPIC_REFERENCE, ExtDataReference);\n        var reference_1 = extData_1.reference; // 注意这里要处理所有被删除的Key\n\n        allDeleteKeys.forEach(function (deleteKey) {\n          var referencedKeys = extData_1.getReferencedKeys(deleteKey); // 处理被引用的部分\n\n          reference_1 = reference_1.withMutations(function (reference) {\n            referencedKeys.forEach(function (v) {\n              reference.updateIn([v, 'keyList'], function (keyList) {\n                return keyList.delete(keyList.indexOf(deleteKey));\n              });\n            });\n          }); // 处理引用的部分\n\n          if (reference_1.has(deleteKey)) {\n            reference_1 = reference_1.delete(deleteKey);\n          }\n        });\n        extData_1 = extData_1.set('reference', reference_1);\n        model = model.setIn(['extData', EXT_DATA_KEY_TOPIC_REFERENCE], extData_1);\n      }\n\n      return model;\n    },\n    renderDiagramCustomize: function (props, next) {\n      var model = props.model,\n          controller = props.controller;\n      var zIndex = controller.getValue(PropKey.DIAGRAM_CUSTOMIZE_BASE_Z_INDEX) + 2;\n      var res = next();\n\n      if (model.focusMode === FOCUS_MODE_SET_REFERENCE_TOPICS) {\n        var panelProps = __assign(__assign({}, props), {\n          zIndex: zIndex,\n          topicKey: model.focusKey,\n          key: 'AddReferenceTopicPanel'\n        });\n\n        res.push(createElement(AddReferenceTopicPanel, __assign({}, panelProps)));\n      }\n\n      return res;\n    },\n    renderTopicContentOthers: function (props, next) {\n      var model = props.model,\n          topicKey = props.topicKey,\n          controller = props.controller;\n      var res = next();\n      res.push(controller.run('renderTopicExtReference', __assign(__assign({}, props), {\n        key: EXT_KEY_TOPIC_REFERENCE + '-icon'\n      })));\n\n      if (model.focusMode === FOCUS_MODE_SET_REFERENCE_TOPICS && model.focusKey !== topicKey) {\n        var checkBoxProps = __assign(__assign({}, props), {\n          key: 'checkbox',\n          selectedTopicKeys: selectedTopicKeys\n        });\n\n        var checkbox = createElement(TopicReferenceCheckbox, __assign({}, checkBoxProps));\n        res.push(checkbox);\n      }\n\n      return res;\n    },\n    renderTopicExtReference: function (props, next) {\n      return createElement(TopicExtReference, __assign({}, props));\n    },\n    clearSelectedReferenceKeys: function () {\n      selectedTopicKeys.clear();\n    },\n    getSelectedReferenceKeys: function () {\n      return Array.from(selectedTopicKeys);\n    },\n    //TODO\n    deserializeExtDataItem: function (props, next) {\n      var extDataKey = props.extDataKey,\n          extDataItem = props.extDataItem;\n\n      if (extDataKey === EXT_DATA_KEY_TOPIC_REFERENCE) {\n        var extDataReference = new ExtDataReference();\n\n        var _loop_1 = function (key) {\n          var item = extDataItem.reference[key];\n          var referenceRecord = new ReferenceRecord({\n            keyList: List(item.keyList),\n            dataMap: Map(item.dataMap)\n          });\n          extDataReference = extDataReference.update('reference', function (reference) {\n            return reference.set(key, referenceRecord);\n          });\n        };\n\n        for (var key in extDataItem.reference) {\n          _loop_1(key);\n        }\n\n        return extDataReference;\n      }\n\n      return next();\n    }\n  };\n}\n\nvar NavOmniBar = Omnibar.ofType();\nvar StyledNavOmniBar = styled(NavOmniBar)(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([\"\\n  top: 20%;\\n  left: 25% !important;\\n  width: 50% !important;\\n\"], [\"\\n  top: 20%;\\n  left: 25% !important;\\n  width: 50% !important;\\n\"])));\nvar TopicTitle = styled.div(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([\"\\n  margin: 0 5px;\\n  padding: 10px 5px;\\n  width: 100%;\\n  font-size: 16px;\\n  cursor: pointer;\\n  &:hover {\\n    background: #e3e8ec;\\n  }\\n\"], [\"\\n  margin: 0 5px;\\n  padding: 10px 5px;\\n  width: 100%;\\n  font-size: 16px;\\n  cursor: pointer;\\n  &:hover {\\n    background: #e3e8ec;\\n  }\\n\"])));\nvar StyledPopover = styled(Popover)(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([\"\\n  display: block;\\n\"], [\"\\n  display: block;\\n\"])));\nvar Tip = styled.div(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([\"\\n  padding: 10px;\\n  font-size: 16px;\\n  //max-width: 800px;\\n  //max-height: 600px;\\n  overflow: auto;\\n\"], [\"\\n  padding: 10px;\\n  font-size: 16px;\\n  //max-width: 800px;\\n  //max-height: 600px;\\n  overflow: auto;\\n\"])));\nvar TipContent = styled.div(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject([\"\\n  white-space: break-spaces;\\n\"], [\"\\n  white-space: break-spaces;\\n\"])));\nvar INPUT_PROPS = {\n  placeholder: 'Search'\n};\n\nfunction SearchPanel(props) {\n  var model = props.model,\n      setSearchWord = props.setSearchWord,\n      controller = props.controller;\n\n  var onClose = function () {\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.SET_FOCUS_MODE,\n      focusMode: FocusMode.NORMAL\n    }));\n  };\n\n  var getAllSections = function () {\n    var res = [];\n    model.topics.forEach(function (topic, topicKey) {\n      res.push({\n        key: topicKey,\n        title: controller.run('getTopicTitle', __assign(__assign({}, props), {\n          topicKey: topicKey\n        }))\n      });\n    });\n    return res;\n  };\n\n  var navigateToTopic = function (topicKey) {\n    return function (e) {\n      controller.run('focusTopicAndMoveToCenter', __assign(__assign({}, props), {\n        topicKey: topicKey\n      }));\n    };\n  };\n\n  var renderItem = function (section, props) {\n    // const pathElements = section.path.reduce<React.ReactChild[]>(\n    //   (elems, el) => {\n    //     elems.push(el, <Icon key={el} icon=\"caret-right\" />);\n    //     return elems;\n    //   },\n    //   []\n    // );\n    var key = section.key,\n        sectionTitle = section.title;\n    var maxLength = 100;\n    var needTip = sectionTitle.length > maxLength;\n    var title = needTip ? sectionTitle.substr(0, maxLength) + '...' : sectionTitle;\n    var titleProps = {\n      key: key,\n      onClick: navigateToTopic(key)\n    };\n    var titleEl = createElement(TopicTitle, __assign({}, titleProps), title);\n    var tip = createElement(Tip, null, createElement(TipContent, null, sectionTitle));\n    var popoverProps = {\n      key: key,\n      target: titleEl,\n      content: tip,\n      fill: true,\n      interactionKind: PopoverInteractionKind.HOVER_TARGET_ONLY,\n      hoverOpenDelay: 1000\n    };\n    return needTip ? createElement(StyledPopover, __assign({}, popoverProps)) : titleEl;\n  };\n\n  var filterMatches = function (query, items) {\n    return items.filter(function (item) {\n      return item.title.toLowerCase().includes(query.toLowerCase());\n    });\n  };\n\n  var sections = getAllSections();\n  return createElement(StyledNavOmniBar, {\n    inputProps: INPUT_PROPS,\n    itemListPredicate: filterMatches,\n    isOpen: true,\n    items: sections,\n    itemRenderer: renderItem,\n    // onItemSelect={handleItemSelect}\n    onClose: onClose,\n    resetOnSelect: true\n  });\n}\n\nvar templateObject_1$3, templateObject_2$3, templateObject_3$2, templateObject_4$1, templateObject_5$1;\nvar HOT_KEY_NAME_SEARCH = 'DEFAULT_SEARCH';\nvar FOCUS_MODE_SEARCH = 'FOCUS_MODE_SEARCH';\n\nfunction SearchPlugin() {\n  var setSearchWorld = function (s) {};\n\n  return {\n    customizeHotKeys: function (props, next) {\n      var controller = props.controller,\n          model = props.model;\n      var hotKeys = next();\n      hotKeys.globalHotKeys.set(HOT_KEY_NAME_SEARCH, {\n        label: 'search',\n        combo: 'ctrl + f',\n        onKeyDown: function () {\n          controller.run('operation', __assign(__assign({}, props), {\n            opType: OpType.FOCUS_TOPIC,\n            topicKey: model.focusKey,\n            focusMode: FOCUS_MODE_SEARCH\n          }));\n        }\n      });\n      return hotKeys;\n    },\n    renderDiagramCustomize: function (props, next) {\n      var res = next();\n      var model = props.model;\n\n      if (model.focusMode === FOCUS_MODE_SEARCH) {\n        var searchPanelProps = __assign(__assign({\n          key: 'search-panel'\n        }, props), {\n          setSearchWorld: setSearchWorld\n        });\n\n        res.push(createElement(SearchPanel, __assign({}, searchPanelProps)));\n      }\n\n      return res;\n    }\n  };\n}\n\nexport { FOCUS_MODE_SEARCH, HOT_KEY_NAME_SEARCH, SearchPlugin, TopicReferencePlugin };","map":null,"metadata":{},"sourceType":"module"}