{"ast":null,"code":"import { PureComponent, createElement, Component, Fragment, useState } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport styled, { css, ThemeProvider } from 'styled-components';\nimport debug from 'debug';\nimport { Checkbox, Menu, MenuItem, Breadcrumbs, PopoverPosition, Breadcrumb, Tooltip, Hotkey, Hotkeys, HotkeysTarget, Dialog, Classes, ContextMenuTarget, PopoverInteractionKind, Popover, Position, Drawer, Tabs, Divider, Button, NumericInput, InputGroup, Tab, Alert } from '@blueprintjs/core';\nimport { FocusMode, OpType, DiagramLayoutType, ModelModifier, getRelationship, TopicRelationship, getAllSubTopicKeys, BlockType, TopicDirection, isThemeType, TopicVisualLevel, Controller } from '@blink-mind/core';\nimport '@blink-mind/icons';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport memoizeOne from 'memoize-one';\nimport SimpleTextEditorPlugin from '@blink-mind/plugin-simple-text-editor';\nimport { Stack, List } from 'immutable';\nimport cx from 'classnames';\nimport { Select } from '@blueprintjs/select';\nimport { SketchPicker } from 'react-color';\nimport { merge, clone, isEqual } from 'lodash';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar BaseWidget =\n/** @class */\nfunction (_super) {\n  __extends(BaseWidget, _super);\n\n  function BaseWidget(props) {\n    return _super.call(this, props) || this;\n  }\n\n  BaseWidget.prototype.operation = function (opType, arg) {\n    this.props.controller.run('operation', __assign({\n      opType: opType\n    }, arg));\n  };\n\n  BaseWidget.prototype.run = function (name, arg) {\n    this.props.controller.run(name, arg);\n  };\n\n  Object.defineProperty(BaseWidget.prototype, \"topic\", {\n    get: function () {\n      return this.props.model.getTopic(this.props.topicKey);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseWidget;\n}(PureComponent);\n\nvar log = debug('node:drag-scroll-widget');\nvar DragScrollView = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  overflow: scroll;\\n\"], [\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  overflow: scroll;\\n\"])));\nvar DragScrollContent = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  position: relative;\\n  width: max-content;\\n\"], [\"\\n  position: relative;\\n  width: max-content;\\n\"])));\n\nvar DragScrollWidget =\n/** @class */\nfunction (_super) {\n  __extends(DragScrollWidget, _super);\n\n  function DragScrollWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentResizeCallback = function (entries, observer) {\n      if (_this.oldContentRect) {\n        var widgetStyle = {\n          width: _this.content.clientWidth + _this.viewBox.clientWidth * 2,\n          height: _this.content.clientHeight + _this.viewBox.clientHeight * 2\n        };\n        _this.bigView.style.width = widgetStyle.width + 'px';\n        _this.bigView.style.height = widgetStyle.height + 'px';\n      }\n\n      _this.oldContentRect = entries[0].contentRect;\n    };\n\n    _this.contentResizeObserver = new ResizeObserver(_this.contentResizeCallback);\n\n    _this.contentRef = function (ref) {\n      if (ref) {\n        _this.content = ref;\n\n        _this.contentResizeObserver.observe(_this.content);\n      }\n    };\n\n    _this.viewBoxRef = function (ref) {\n      if (ref) {\n        _this.viewBox = ref;\n\n        if (!_this.props.enableMouseWheel) {\n          log('addEventListener onwheel');\n\n          _this.viewBox.addEventListener('wheel', function (e) {\n            log('onwheel');\n            (e.ctrlKey || e.altKey) && e.preventDefault();\n          }, {\n            passive: false\n          });\n        }\n\n        _this.setViewBoxScroll(_this.viewBox.clientWidth, _this.viewBox.clientHeight);\n      }\n    };\n\n    _this.bigViewRef = function (ref) {\n      if (ref) {\n        _this.bigView = ref;\n      }\n    };\n\n    _this.setWidgetStyle = function () {\n      if (_this.content && _this.viewBox && _this.bigView) {\n        _this.bigView.style.width = (_this.content.clientWidth + _this.viewBox.clientWidth) * 2 + 'px';\n        _this.bigView.style.height = (_this.content.clientHeight + _this.viewBox.clientHeight) * 2 + 'px';\n        _this.content.style.left = _this.viewBox.clientWidth + 'px';\n        _this.content.style.top = _this.viewBox.clientHeight + 'px';\n      }\n    };\n\n    _this.setViewBoxScroll = function (left, top) {\n      log(\"setViewBoxScroll \" + left + \" \" + top);\n\n      if (_this.viewBox) {\n        _this.viewBox.scrollLeft = left;\n        _this.viewBox.scrollTop = top;\n      }\n    };\n\n    _this.setViewBoxScrollDelta = function (deltaLeft, deltaTop) {\n      log(\"setViewBoxScrollDelta \" + deltaLeft + \" \" + deltaTop);\n\n      if (_this.viewBox) {\n        _this.viewBox.scrollLeft += deltaLeft;\n        _this.viewBox.scrollTop += deltaTop;\n      }\n    };\n\n    _this.onMouseDown = function (e) {\n      // log('Drag Scroll onMouseDown');\n      // log(e.nativeEvent.target);\n      // mouseKey 表示鼠标按下那个键才可以进行拖动，左键或者右键\n      // needKeyPressed 为了支持是否需要按下ctrl键，才可以进行拖动\n      // canDragFunc是一个函数，它是为了支持使用者以传入函数的方式，这个函数的返回值表示当前的内容是否可以被拖拽而移动\n      var _a = _this.props,\n          mouseKey = _a.mouseKey,\n          needKeyPressed = _a.needKeyPressed,\n          canDragFunc = _a.canDragFunc;\n      if (canDragFunc && !canDragFunc()) return;\n\n      if (e.button === 0 && mouseKey === 'left' || e.button === 2 && mouseKey === 'right') {\n        if (needKeyPressed) {\n          if (!e.ctrlKey) return;\n        }\n\n        _this._lastCoordX = _this.viewBox.scrollLeft + e.nativeEvent.clientX;\n        _this._lastCoordY = _this.viewBox.scrollTop + e.nativeEvent.clientY;\n        var ele = _this.viewBox;\n        ele.addEventListener('mousemove', _this.onMouseMove);\n        ele.addEventListener('mouseup', _this.onMouseUp);\n      }\n    };\n\n    _this.onMouseUp = function (e) {\n      var ele = _this.viewBox;\n      ele.removeEventListener('mousemove', _this.onMouseMove);\n      ele.removeEventListener('mouseup', _this.onMouseUp);\n    };\n\n    _this.onMouseMove = function (e) {\n      _this.viewBox.scrollLeft = _this._lastCoordX - e.clientX;\n      _this.viewBox.scrollTop = _this._lastCoordY - e.clientY; // log(`onMouseMove ${this.viewBox.scrollLeft} ${this.viewBox.scrollTop}`);\n    };\n\n    _this.handleContextMenu = function (e) {\n      e.preventDefault();\n    };\n\n    _this.state = {\n      widgetStyle: {\n        width: '10000px',\n        height: '10000px'\n      }\n    };\n    return _this;\n  }\n\n  DragScrollWidget.prototype.componentDidMount = function () {\n    this.setWidgetStyle();\n    document.addEventListener('contextmenu', this.handleContextMenu);\n  };\n\n  DragScrollWidget.prototype.componentWillUnmount = function () {\n    document.removeEventListener('contextmenu', this.handleContextMenu);\n  };\n\n  DragScrollWidget.prototype.setZoomFactor = function (zoomFactor) {\n    this.bigView.style.transform = \"scale(\" + zoomFactor + \")\";\n    this.bigView.style.transformOrigin = '50% 50%';\n  };\n\n  DragScrollWidget.prototype.render = function () {\n    var style = __assign({}, this.state.widgetStyle // zoom:this.props.zoomFactor,\n    // transform: `scale(${this.props.zoomFactor})`,\n    // transformOrigin: '50% 50%'\n    );\n\n    return createElement(DragScrollView, {\n      ref: this.viewBoxRef,\n      onMouseDown: this.onMouseDown\n    }, createElement(\"div\", {\n      style: style,\n      ref: this.bigViewRef\n    }, createElement(DragScrollContent, {\n      ref: this.contentRef,\n      style: this.state.contentStyle\n    }, this.props.children(this.setViewBoxScroll, this.setViewBoxScrollDelta))));\n  };\n\n  DragScrollWidget.defaultProps = {\n    mouseKey: 'left',\n    needKeyPressed: false\n  };\n  return DragScrollWidget;\n}(Component);\n\nvar templateObject_1, templateObject_2;\nvar log$1 = debug('node:save-ref'); //TODO 可能会引起内存泄露,在删除一个topic时\n\nvar SaveRef =\n/** @class */\nfunction (_super) {\n  __extends(SaveRef, _super);\n\n  function SaveRef() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getRef = function (name) {\n      log$1(_this);\n      return _this[name];\n    };\n\n    _this.saveRef = function (name) {\n      return function (node) {\n        if (node) {\n          _this[name] = node;\n\n          _this.fireListener(name, node);\n        }\n      };\n    };\n\n    _this.deleteRef = function (name) {\n      log$1('deleteRef:', name);\n      delete _this[name];\n    };\n\n    _this.observers = new Map();\n\n    _this.fireListener = function (name, ref) {\n      var e_1, _a;\n\n      if (_this.observers.has(name)) {\n        var listeners = _this.observers.get(name);\n\n        try {\n          for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n            var listener = listeners_1_1.value;\n            listener(name, ref);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    };\n\n    _this.registerRefListener = function (name, listener) {\n      if (!_this.observers.has(name)) {\n        _this.observers.set(name, [listener]);\n      } else {\n        _this.observers.get(name).push(listener);\n      }\n    };\n\n    return _this;\n  }\n\n  SaveRef.prototype.render = function () {\n    return this.props.children(this.saveRef, this.getRef, this.deleteRef, this.registerRefListener.bind(this));\n  };\n\n  return SaveRef;\n}(Component);\n\nvar Flex = styled.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\"\\n  display: flex;\\n  flex-direction: \", \";\\n  align-items: \", \";\\n  justify-content: \", \";\\n\"], [\"\\n  display: flex;\\n  flex-direction: \", \";\\n  align-items: \", \";\\n  justify-content: \", \";\\n\"])), function (props) {\n  return props.flexDirection ? props.flexDirection : 'row';\n}, function (props) {\n  return props.alignItems;\n}, function (props) {\n  return props.justifyContent;\n});\nvar Margin = styled.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([\"\\n  margin: \", \";\\n\"], [\"\\n  margin: \", \";\\n\"])), function (props) {\n  return props.margin;\n});\nvar ShowMenuIcon = styled.a(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  font-size: 20px !important;\\n\"], [\"\\n  font-size: 20px !important;\\n\"])));\nvar IconBg = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n  padding: 5px;\\n  cursor: pointer;\\n\"], [\"\\n  padding: 5px;\\n  cursor: pointer;\\n\"])));\nvar Btn = styled.div(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n  cursor: pointer;\\n  &:hover {\\n    color: #1ea7fd;\\n  }\\n\"], [\"\\n  cursor: pointer;\\n  &:hover {\\n    color: #1ea7fd;\\n  }\\n\"])));\nvar StyledCheckbox = styled(Checkbox)(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"\\n  margin-bottom: 0px !important;\\n\"], [\"\\n  margin-bottom: 0px !important;\\n\"])));\nvar CloseIcon = styled(Btn)(templateObject_7 || (templateObject_7 = __makeTemplateObject([\"\\n  position: absolute;\\n  right: 5px;\\n  top: 5px;\\n  //padding: 5px;\\n\"], [\"\\n  position: absolute;\\n  right: 5px;\\n  top: 5px;\\n  //padding: 5px;\\n\"])));\nvar Title = styled.div(templateObject_8 || (templateObject_8 = __makeTemplateObject([\"\\n  height: 16px;\\n\"], [\"\\n  height: 16px;\\n\"])));\nvar TopicBlockIcon = styled.span(templateObject_9 || (templateObject_9 = __makeTemplateObject([\"\\n  margin: 0px 10px;\\n  &:hover {\\n    color: palevioletred;\\n  }\\n\"], [\"\\n  margin: 0px 10px;\\n  &:hover {\\n    color: palevioletred;\\n  }\\n\"])));\nvar ZIndex = styled.div(templateObject_10 || (templateObject_10 = __makeTemplateObject([\"\\n  z-index: \", \";\\n\"], [\"\\n  z-index: \", \";\\n\"])), function (props) {\n  return props.zIndex;\n});\nvar PanelTabRoot = styled.div(templateObject_11 || (templateObject_11 = __makeTemplateObject([\"\\n  min-width: 360px;\\n  max-height: 470px;\\n  overflow: auto;\\n\"], [\"\\n  min-width: 360px;\\n  max-height: 470px;\\n  overflow: auto;\\n\"])));\nvar templateObject_1$1, templateObject_2$1, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11;\nvar log$2 = debug('plugin:event');\n\nfunction EventPlugin() {\n  var eventListeners = {};\n  return {\n    handleTopicClick: function (props) {\n      log$2('handleTopicClick');\n      var controller = props.controller,\n          model = props.model,\n          topicKey = props.topicKey;\n      log$2(model.zoomFactor); //TODO\n\n      if (model.editingDescKey !== null) return;\n      if (model.editingContentKey === topicKey) return;\n      if (model.focusKey === topicKey && model.focusMode === FocusMode.EDITING_CONTENT) return;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.NORMAL\n      }));\n    },\n    handleTopicDoubleClick: function (props) {\n      var controller = props.controller,\n          model = props.model;\n      if (model.editingDescKey !== null) return;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.EDITING_CONTENT\n      }));\n    },\n    handleTopicContextMenu: function (props) {\n      var controller = props.controller;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.SHOW_POPUP\n      }));\n    },\n    handleActiveModalClose: function (props) {\n      var controller = props.controller;\n      var activeModalProps = controller.run('getActiveModalProps', props);\n      if (activeModalProps == null) return null;\n\n      if (activeModalProps.name === 'edit-desc') {\n        return function () {\n          controller.run('operation', __assign(__assign({}, props), {\n            focusMode: FocusMode.NORMAL,\n            opType: OpType.FOCUS_TOPIC\n          }));\n        };\n      }\n    },\n    addEventListener: function (props) {\n      var key = props.key,\n          listener = props.listener,\n          once = props.once,\n          controller = props.controller;\n      if (!eventListeners[key]) eventListeners[key] = [];\n\n      if (once) {\n        only.origin = listener;\n        eventListeners[key].push(only);\n      } else {\n        eventListeners[key].push(listener);\n      }\n\n      function only() {\n        listener();\n        controller.run('removeEventListener', {\n          key: key,\n          listener: listener\n        });\n      }\n    },\n    removeEventListener: function (props) {\n      var key = props.key,\n          listener = props.listener;\n\n      if (eventListeners[key]) {\n        eventListeners[key] = eventListeners[key].filter(function (fn) {\n          return fn !== listener && fn.origin !== listener;\n        });\n      }\n    },\n    fireEvent: function (props) {\n      var key = props.key;\n\n      if (eventListeners[key]) {\n        eventListeners[key].forEach(function (fn) {\n          return fn();\n        });\n      }\n    }\n  };\n}\n\nvar IconName = {\n  SHOW_MENU: 'show-menu',\n  CLOSE: 'close',\n  COLOR_PICKER: 'color-picker',\n  NOTES: 'notes',\n  PLUS: 'plus',\n  MINUS: 'minus',\n  COLLAPSE_ALL: 'collapse',\n  EXPAND_ALL: 'expand',\n  CENTER: 'center',\n  TRASH: 'trash',\n  SEARCH: 'search',\n  THEME: 'theme',\n  EXPORT: 'export',\n  OPEN_FILE: 'openfile'\n};\n\nfunction iconClassName(name) {\n  return \"icon iconfont bm-\" + name;\n}\n\nfunction Icon(iconName) {\n  return createElement(\"span\", {\n    className: iconClassName(iconName)\n  });\n}\n\nfunction contentRefKey(key) {\n  return \"content-\" + key;\n}\n\nfunction contentEditorRefKey(key) {\n  return \"content-editor-\" + key;\n}\n\nfunction descEditorRefKey(key) {\n  return \"desc-editor-\" + key;\n}\n\nfunction topicWidgetRefKey(key) {\n  return \"topic-widget-\" + key;\n}\n\nfunction topicRefKey(key) {\n  return \"topic-\" + key;\n}\n\nfunction linksRefKey(key) {\n  return \"links-\" + key;\n}\n\nfunction linksSvgRefKey(key) {\n  return \"links-svg-\" + key;\n}\n\nfunction collapseRefKey(key) {\n  return \"collapse-\" + key;\n}\n\nfunction dropAreaRefKey(key, dir) {\n  return \"dropArea-\" + dir + \"-\" + key;\n}\n\nvar RefKey = {\n  DIAGRAM_ROOT_KEY: 'DIAGRAM-ROOT',\n  DRAG_SCROLL_WIDGET_KEY: 'DragScrollWidget',\n  SVG_HIGHLIGHT_KEY: 'svg-highlight',\n  FOCUS_HIGHLIGHT_KEY: 'focus-highlight',\n  DROP_EFFECT_KEY: 'drop-effect'\n};\nvar EventKey = {\n  CENTER_ROOT_TOPIC: 'CENTER_ROOT_TOPIC'\n};\nvar PropKey = {\n  DIAGRAM_CUSTOMIZE_BASE_Z_INDEX: 'DIAGRAM_CUSTOMIZE_BASE_Z_INDEX',\n  TOPIC_CONTEXT_MENU_ENABLED: 'TOPIC_CONTEXT_MENU_ENABLED',\n  TOPIC_TITLE: 'TOPIC_TITLE'\n};\n\nvar cancelEvent = function (e) {\n  e.stopPropagation();\n};\n\nfunction browserDownloadFile(url, filename) {\n  var link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.click();\n}\n\nfunction browserDownloadText(text, filename) {\n  var url = \"data:text/plain,\" + encodeURIComponent(text);\n  browserDownloadFile(url, filename);\n}\n\nfunction browserOpenFile(accept) {\n  var input = document.createElement('input');\n  input.type = 'file';\n  input.accept = accept;\n  return new Promise(function (resolve, reject) {\n    input.addEventListener('change', function (evt) {\n      //@ts-ignore\n      var file = evt.target.files[0];\n      var fr = new FileReader();\n\n      fr.onload = function (evt) {\n        var txt = evt.target.result; //@ts-ignore\n\n        resolve(txt);\n      };\n\n      fr.onerror = function (evt) {\n        reject(evt.target.error);\n      };\n\n      fr.readAsText(file);\n    });\n    input.click();\n  });\n}\n\nfunction paddingCss(arg) {\n  var _a = arg.top,\n      top = _a === void 0 ? 0 : _a,\n      _b = arg.right,\n      right = _b === void 0 ? 0 : _b,\n      _c = arg.bottom,\n      bottom = _c === void 0 ? 0 : _c,\n      _d = arg.left,\n      left = _d === void 0 ? 0 : _d;\n  return top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\";\n}\n\nfunction getLinkKey(fromKey, toKey) {\n  return \"link-\" + fromKey + \"-\" + toKey;\n}\n\nfunction centerY(rect) {\n  return (rect.top + rect.bottom) / 2;\n}\n\nfunction centerX(rect) {\n  return (rect.left + rect.right) / 2;\n}\n\nfunction centerPointX(p1, p2) {\n  return (p1.x + p2.x) / 2;\n}\n\nfunction centerPointY(p1, p2) {\n  return (p1.y + p2.y) / 2;\n}\n\nfunction center(rect) {\n  return [(rect.left + rect.right) / 2, (rect.top + rect.bottom) / 2];\n}\n\nfunction getRelativeRect(el, rel, scale) {\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  var rect = el.getBoundingClientRect();\n  var relRect = rel.getBoundingClientRect();\n  var relCenter = center(relRect);\n  var elCenter = center(rect);\n  elCenter[0] = (elCenter[0] - relCenter[0]) / scale;\n  elCenter[1] = (elCenter[1] - relCenter[1]) / scale;\n  var width = rect.width / scale;\n  var height = rect.height / scale;\n  return {\n    left: elCenter[0] - width / 2,\n    right: elCenter[0] + width / 2,\n    top: elCenter[1] - height / 2,\n    bottom: elCenter[1] + height / 2,\n    width: width,\n    height: height\n  };\n}\n\nfunction getRelativeVector(el, rel) {\n  var rect = el.getBoundingClientRect();\n  var relRect = rel.getBoundingClientRect();\n  var relCenter = center(relRect);\n  var elCenter = center(rect);\n  return [elCenter[0] - relCenter[0], elCenter[1] - relCenter[1]];\n}\n\nfunction GetValuePlugin() {\n  return {\n    getValue: function (props, next) {\n      var propKey = props.propKey,\n          controller = props.controller;\n\n      switch (propKey) {\n        case PropKey.DIAGRAM_CUSTOMIZE_BASE_Z_INDEX:\n          return 3;\n\n        case PropKey.TOPIC_CONTEXT_MENU_ENABLED:\n          return controller.run('isOperationEnabled', props);\n\n        case PropKey.TOPIC_TITLE:\n          return controller.run('getTopicTitle', props);\n      }\n\n      return next();\n    }\n  };\n}\n\nvar HotKeyName = {\n  ADD_CHILD: 'ADD_CHILD',\n  ADD_SIBLING: 'ADD_SIBLING',\n  DELETE_TOPIC: 'DELETE_TOPIC',\n  EDIT_CONTENT: 'EDIT_CONTENT',\n  EDIT_NOTES: 'EDIT_NOTES',\n  SET_EDITOR_ROOT: 'SET_EDITOR_ROOT'\n};\n\nfunction op(opType, props) {\n  var topicKey = props.topicKey,\n      model = props.model,\n      controller = props.controller;\n\n  if (topicKey === undefined) {\n    props = __assign(__assign({}, props), {\n      topicKey: model.focusKey\n    });\n  }\n\n  controller.run('operation', __assign(__assign({}, props), {\n    opType: opType\n  }));\n}\n\nfunction HotKeyPlugin() {\n  return {\n    customizeHotKeys: function (props) {\n      var handleKeyDown = function (opType) {\n        return function (e) {\n          // log('HotKeyPlugin', opType);\n          op(opType, props);\n        };\n      };\n\n      var topicHotKeys = new Map([[HotKeyName.ADD_CHILD, {\n        label: 'add child',\n        combo: 'tab',\n        onKeyDown: handleKeyDown(OpType.ADD_CHILD)\n      }], [HotKeyName.ADD_SIBLING, {\n        label: 'add sibling',\n        combo: 'enter',\n        onKeyDown: handleKeyDown(OpType.ADD_SIBLING)\n      }], [HotKeyName.DELETE_TOPIC, {\n        label: 'delete topic',\n        combo: 'del',\n        onKeyDown: handleKeyDown(OpType.DELETE_TOPIC)\n      }], [HotKeyName.EDIT_CONTENT, {\n        label: 'edit content',\n        combo: 'space',\n        onKeyDown: handleKeyDown(OpType.START_EDITING_CONTENT)\n      }], [HotKeyName.EDIT_NOTES, {\n        label: 'edit notes',\n        combo: 'alt + d',\n        onKeyDown: handleKeyDown(OpType.START_EDITING_DESC)\n      }], [HotKeyName.SET_EDITOR_ROOT, {\n        label: 'set editor root',\n        combo: 'alt + shift + f',\n        onKeyDown: handleKeyDown(OpType.SET_EDITOR_ROOT)\n      }]]);\n      var globalHotKeys = new Map();\n      return {\n        topicHotKeys: topicHotKeys,\n        globalHotKeys: globalHotKeys\n      };\n    }\n  };\n}\n\nfunction LayoutPlugin() {\n  var _zoomFactor = 1;\n  return {\n    getPartTopics: function (_a) {\n      var layout = _a.layout,\n          model = _a.model,\n          topicKey = _a.topicKey;\n      var topic = model.getTopic(topicKey);\n      var subTopicCount = topic.subKeys.size;\n      var topics = topic.subKeys.toArray();\n\n      switch (layout) {\n        case DiagramLayoutType.LEFT_TO_RIGHT:\n          return {\n            R: topics\n          };\n\n        case DiagramLayoutType.RIGHT_TO_LEFT:\n          return {\n            L: topics\n          };\n\n        case DiagramLayoutType.LEFT_AND_RIGHT:\n          return {\n            L: topics.slice(Math.ceil(subTopicCount / 2), subTopicCount),\n            R: topics.slice(0, Math.ceil(subTopicCount / 2))\n          };\n\n        case DiagramLayoutType.TOP_TO_BOTTOM:\n          return {\n            B: topics\n          };\n      }\n    },\n    createSubTopics: function (props) {\n      var model = props.model,\n          topicKey = props.topicKey,\n          controller = props.controller,\n          topics = props.topics,\n          saveRef = props.saveRef;\n      var topic = model.getTopic(topicKey);\n      if (topics.size === 0 || topic.collapse) return null;\n      var subTopics = [];\n      topics.forEach(function (tKey) {\n        var topicProps = __assign(__assign({}, props), {\n          topicKey: tKey,\n          key: tKey,\n          ref: saveRef(topicWidgetRefKey(tKey))\n        });\n\n        subTopics.push(controller.run('renderTopicWidget', topicProps));\n      });\n      return {\n        subTopics: subTopics\n      };\n    },\n    layout: function (props) {\n      var getRef = props.getRef,\n          model = props.model;\n      var links = getRef(linksRefKey(model.editorRootTopicKey));\n      var highlight = getRef(RefKey.FOCUS_HIGHLIGHT_KEY);\n      var dropEffect = getRef(RefKey.DROP_EFFECT_KEY);\n      links && links.layout();\n      highlight && highlight.layout();\n      dropEffect && dropEffect.layout();\n      var editorRootTopic = model.getTopic(model.editorRootTopicKey);\n      layoutTopic(editorRootTopic);\n\n      function layoutTopic(topic) {\n        var e_1, _a;\n\n        if (topic.key !== model.editorRootTopicKey) {\n          var topicWidget = getRef(topicWidgetRefKey(topic.key));\n          topicWidget && topicWidget.layoutLinks();\n        }\n\n        if (!topic.collapse) {\n          try {\n            for (var _b = __values(topic.subKeys), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var subKey = _c.value;\n              layoutTopic(model.getTopic(subKey));\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        }\n      }\n    },\n    setLayoutDir: function (props) {\n      var layoutDir = props.layoutDir,\n          model = props.model,\n          controller = props.controller;\n      controller.change(ModelModifier.setLayoutDir({\n        model: model,\n        layoutDir: layoutDir\n      }));\n    },\n    getRelativeRect: function (props) {\n      var element = props.element,\n          controller = props.controller,\n          getRef = props.getRef;\n      var zoomFactor = controller.run('getZoomFactor', props);\n      var bigView = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).bigView;\n      return getRelativeRect(element, bigView, zoomFactor);\n    },\n    getRelativeRectFromViewPort: function (props) {\n      var element = props.element,\n          controller = props.controller,\n          getRef = props.getRef;\n      var zoomFactor = controller.run('getZoomFactor', props);\n      var viewBox = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).viewBox;\n      return getRelativeRect(element, viewBox, zoomFactor);\n    },\n    getRelativeVectorFromViewPort: function (props) {\n      var element = props.element,\n          getRef = props.getRef;\n      var viewBox = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).viewBox;\n      return getRelativeVector(element, viewBox);\n    },\n    addZoomFactorChangeEventListener: function (props) {\n      var controller = props.controller;\n      controller.run('addTempValueChangeListener', __assign({\n        key: 'ZoomFactor'\n      }, props));\n    },\n    removeZoomFactorChangeEventListener: function (props) {\n      var controller = props.controller;\n      controller.run('removeTempValueChangeListener', __assign({\n        key: 'ZoomFactor'\n      }, props));\n    },\n    setZoomFactor: function (props) {\n      var controller = props.controller,\n          zoomFactor = props.zoomFactor;\n      return controller.run('setTempValue', {\n        key: 'ZoomFactor',\n        value: zoomFactor\n      });\n    },\n    getZoomFactor: function (props) {\n      var controller = props.controller;\n      return controller.run('getTempValue', {\n        key: 'ZoomFactor'\n      }) || _zoomFactor;\n    },\n    moveTopicToCenter: function (props) {\n      var getRef = props.getRef,\n          topicKey = props.topicKey,\n          model = props.model;\n\n      if (model.editorRootTopicKey !== topicKey && getRelationship(model, topicKey, model.editorRootTopicKey) !== TopicRelationship.DESCENDANT) {\n        throw new Error(\"moveTopicToCenter error: topicKey \" + topicKey + \" is not the DESCENDANT of editor root topic\");\n      }\n\n      var topic = getRef(topicRefKey(topicKey));\n      var dragScroll = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY);\n      var viewBox = dragScroll.viewBox;\n\n      if (!topic || !viewBox) {\n        throw new Error(\"moveTopicToCenter error: topic or viewBox is null\");\n      }\n\n      var vector = getRelativeVector(topic, viewBox); //TODO\n\n      dragScroll.setViewBoxScrollDelta(vector[0], vector[1]);\n    },\n    focusTopicAndMoveToCenter: function (props) {\n      var controller = props.controller,\n          topicKey = props.topicKey;\n      controller.run('operation', __assign(__assign({}, props), {\n        opArray: [{\n          opType: OpType.FOCUS_TOPIC,\n          topicKey: topicKey,\n          focusMode: FocusMode.NORMAL\n        }, {\n          opType: OpType.EXPAND_TO,\n          topicKey: topicKey\n        }],\n        callback: function () {\n          controller.run('moveTopicToCenter', __assign(__assign({}, props), {\n            topicKey: topicKey\n          }));\n        }\n      }));\n    }\n  };\n}\n\nvar log$3 = debug('plugin:operation');\n\nfunction OperationPlugin() {\n  var startEditingContent = function (_a) {\n    var model = _a.model,\n        topicKey = _a.topicKey;\n    return ModelModifier.focusTopic({\n      model: model,\n      topicKey: topicKey,\n      focusMode: FocusMode.EDITING_CONTENT\n    });\n  };\n\n  var startEditingDesc = function (_a) {\n    var model = _a.model,\n        topicKey = _a.topicKey;\n    var topic = model.getTopic(topicKey);\n    var desc = topic.getBlock(BlockType.DESC);\n\n    if (desc.block == null || desc.block.data == null) {\n      model = ModelModifier.setBlockData({\n        model: model,\n        topicKey: topicKey,\n        blockType: BlockType.DESC,\n        data: ''\n      });\n    }\n\n    model = ModelModifier.focusTopic({\n      model: model,\n      topicKey: topicKey,\n      focusMode: FocusMode.EDITING_DESC\n    });\n    return model;\n  };\n\n  function dragAndDrop(props) {\n    var srcKey = props.srcKey,\n        dstKey = props.dstKey,\n        dropDir = props.dropDir;\n    var model = props.model;\n    var srcTopic = model.getTopic(srcKey);\n    var dstTopic = model.getTopic(dstKey);\n    var srcParentKey = srcTopic.parentKey;\n    var srcParentTopic = model.getTopic(srcParentKey);\n    var srcParentSubKeys = srcParentTopic.subKeys;\n    var srcIndex = srcParentSubKeys.indexOf(srcKey);\n    srcParentSubKeys = srcParentSubKeys.delete(srcIndex);\n\n    if (dropDir === 'in') {\n      var dstSubKeys_1 = dstTopic.subKeys;\n      dstSubKeys_1 = dstSubKeys_1.push(srcKey);\n      model = model.withMutations(function (m) {\n        m.setIn(['topics', srcParentKey, 'subKeys'], srcParentSubKeys).setIn(['topics', srcKey, 'parentKey'], dstKey).setIn(['topics', dstKey, 'subKeys'], dstSubKeys_1).setIn(['topics', dstKey, 'collapse'], false);\n      });\n    } else {\n      var dstParentKey_1 = dstTopic.parentKey;\n      var dstParentItem = model.getTopic(dstParentKey_1);\n      var dstParentSubKeys_1 = dstParentItem.subKeys;\n      var dstIndex = dstParentSubKeys_1.indexOf(dstKey); //src 和 dst 的父亲相同，这种情况要做特殊处理\n\n      if (srcParentKey === dstParentKey_1) {\n        var newDstParentSubKeys_1 = List();\n        dstParentSubKeys_1.forEach(function (key) {\n          if (key !== srcKey) {\n            if (key === dstKey) {\n              if (dropDir === 'prev') {\n                newDstParentSubKeys_1 = newDstParentSubKeys_1.push(srcKey).push(key);\n              } else {\n                newDstParentSubKeys_1 = newDstParentSubKeys_1.push(key).push(srcKey);\n              }\n            } else {\n              newDstParentSubKeys_1 = newDstParentSubKeys_1.push(key);\n            }\n          }\n        });\n        model = model.withMutations(function (m) {\n          m.setIn(['topics', dstParentKey_1, 'subKeys'], newDstParentSubKeys_1);\n        });\n      } else {\n        if (dropDir === 'prev') {\n          dstParentSubKeys_1 = dstParentSubKeys_1.insert(dstIndex, srcKey);\n        } else if (dropDir === 'next') {\n          dstParentSubKeys_1 = dstParentSubKeys_1.insert(dstIndex + 1, srcKey);\n        }\n\n        model = model.withMutations(function (m) {\n          m.setIn(['topics', srcParentKey, 'subKeys'], srcParentSubKeys).setIn(['topics', srcKey, 'parentKey'], dstParentKey_1).setIn(['topics', dstParentKey_1, 'subKeys'], dstParentSubKeys_1).setIn(['topics', dstParentKey_1, 'collapse'], false);\n        });\n      }\n    }\n\n    return model;\n  }\n\n  var OpMap = new Map([[OpType.TOGGLE_COLLAPSE, ModelModifier.toggleCollapse], [OpType.COLLAPSE_ALL, ModelModifier.collapseAll], [OpType.EXPAND_ALL, ModelModifier.expandAll], [OpType.EXPAND_TO, ModelModifier.expandTo], [OpType.ADD_CHILD, ModelModifier.addChild], [OpType.ADD_SIBLING, ModelModifier.addSibling], [OpType.DELETE_TOPIC, ModelModifier.deleteTopic], [OpType.FOCUS_TOPIC, ModelModifier.focusTopic], [OpType.SET_FOCUS_MODE, ModelModifier.setFocusMode], [OpType.SET_STYLE, ModelModifier.setStyle], [OpType.SET_THEME, ModelModifier.setTheme], [OpType.SET_TOPIC_BLOCK, ModelModifier.setBlockData], [OpType.DELETE_TOPIC_BLOCK, ModelModifier.deleteBlock], [OpType.START_EDITING_CONTENT, startEditingContent], [OpType.START_EDITING_DESC, startEditingDesc], [OpType.DRAG_AND_DROP, dragAndDrop], [OpType.SET_EDITOR_ROOT, ModelModifier.setEditorRootTopicKey]]);\n  var undoStack = Stack();\n  var redoStack = Stack();\n  var enabled = true;\n  var whiteListOperation = new Set();\n  return {\n    isOperationEnabled: function (props) {\n      return enabled;\n    },\n    enableOperation: function () {\n      enabled = true;\n    },\n    disableOperation: function (_a) {\n      var whiteList = _a.whiteList;\n      enabled = false;\n      if (whiteList) whiteListOperation = new Set(whiteList);else whiteListOperation.clear();\n    },\n\n    /** plugin can extend Operation Map\r\n     * for example: A plugin can write a function\r\n     * getOpMap(props,next) {\r\n     *   let opMap = next();\r\n     *   opMap.set(\"OpTypeName\",opFunc);\r\n     *   return opMap;\r\n     * }\r\n     * @param props\r\n     */\n    getOpMap: function (props) {\n      return OpMap;\n    },\n    getAllowUndo: function (props) {\n      var model = props.model,\n          opType = props.opType;\n\n      if (opType) {\n        switch (opType) {\n          case OpType.FOCUS_TOPIC:\n          case OpType.START_EDITING_CONTENT:\n          case OpType.START_EDITING_DESC:\n            return false;\n        }\n      }\n\n      switch (model.focusMode) {\n        case 'EDITING_DESC':\n        case 'EDITING_CONTENT':\n          return false;\n      }\n\n      return model.config.allowUndo;\n    },\n    getUndoRedoStack: function () {\n      return {\n        undoStack: undoStack,\n        redoStack: redoStack\n      };\n    },\n    setUndoStack: function (props) {\n      log$3('setUndoStack', props.undoStack);\n      undoStack = props.undoStack;\n    },\n    setRedoStack: function (props) {\n      log$3('setRedoStack', props.redoStack);\n      redoStack = props.redoStack;\n    },\n    canUndo: function (props) {\n      var controller = props.controller;\n      var undoStack = controller.run('getUndoRedoStack', props).undoStack;\n      var allowUndo = controller.run('getAllowUndo', props);\n      return undoStack.size > 0 && allowUndo;\n    },\n    canRedo: function (props) {\n      var controller = props.controller;\n      var redoStack = controller.run('getUndoRedoStack', props).redoStack;\n      var allowUndo = controller.run('getAllowUndo', props);\n      return redoStack.size > 0 && allowUndo;\n    },\n    undo: function (props) {\n      var controller = props.controller,\n          model = props.model;\n\n      if (!controller.run('getAllowUndo', props)) {\n        return;\n      }\n\n      var _a = controller.run('getUndoRedoStack', props),\n          undoStack = _a.undoStack,\n          redoStack = _a.redoStack;\n\n      var newModel = undoStack.peek();\n      if (!newModel) return;\n      controller.run('setUndoStack', __assign(__assign({}, props), {\n        undoStack: undoStack.shift()\n      }));\n      controller.run('setRedoStack', __assign(__assign({}, props), {\n        redoStack: redoStack.push(model)\n      }));\n      log$3(newModel);\n      controller.change(newModel);\n    },\n    redo: function (props) {\n      var controller = props.controller,\n          model = props.model;\n\n      if (!controller.run('getAllowUndo', props)) {\n        return;\n      }\n\n      var _a = controller.run('getUndoRedoStack', props),\n          undoStack = _a.undoStack,\n          redoStack = _a.redoStack;\n\n      var newModel = redoStack.peek();\n      if (!newModel) return;\n      controller.run('setUndoStack', __assign(__assign({}, props), {\n        undoStack: undoStack.push(model)\n      }));\n      controller.run('setRedoStack', __assign(__assign({}, props), {\n        redoStack: redoStack.shift()\n      }));\n      controller.change(newModel);\n    },\n    //TODO 有空重构这个函数\n    operation: function (props) {\n      var controller = props.controller,\n          opType = props.opType,\n          model = props.model,\n          opArray = props.opArray,\n          callback = props.callback;\n\n      if (opArray != null && !Array.isArray(opArray)) {\n        throw new Error('operation: the type of opArray must be array!');\n      }\n\n      if (opType != null && opArray != null) {\n        throw new Error('operation: opType and opArray conflict!');\n      }\n\n      var isOperationEnabled = controller.run('isOperationEnabled', props);\n\n      if (!isOperationEnabled) {\n        // warning(\n        //   true,\n        //   `You have disabled operation,but you run operation ${props} now!`\n        // );\n        if (whiteListOperation.size === 0) return;\n\n        if (opArray != null) {\n          var opNotInWhiteList = opArray.filter(function (op) {\n            return !whiteListOperation.has(op.opType);\n          });\n\n          if (opNotInWhiteList && opNotInWhiteList.length > 0) {\n            return;\n          }\n        } else if (!whiteListOperation.has(opType)) {\n          return;\n        }\n      }\n\n      log$3('operation:', opType);\n      log$3('operation:', model);\n      log$3('operation:', props);\n      var opMap = controller.run('getOpMap', props);\n      controller.run('beforeOperation', props);\n\n      if (controller.run('getAllowUndo', props)) {\n        var undoStack_1 = controller.run('getUndoRedoStack', props).undoStack;\n        controller.run('setUndoStack', __assign(__assign({}, props), {\n          undoStack: undoStack_1.push(model)\n        }));\n      }\n\n      var newModel;\n\n      if (opArray != null) {\n        newModel = opArray.reduce(function (acc, cur) {\n          var opType = cur.opType;\n          if (!opMap.has(opType)) throw new Error(\"opType:\" + opType + \" not exist!\");\n          var opFunc = opMap.get(opType);\n\n          var opFuncProps = __assign(__assign({\n            controller: controller\n          }, cur), {\n            model: acc\n          });\n\n          var res = controller.run('beforeOpFunction', opFuncProps);\n          res = opFunc(__assign(__assign({}, opFuncProps), {\n            model: res\n          }));\n          res = controller.run('afterOpFunction', __assign(__assign({}, opFuncProps), {\n            model: res\n          }));\n          return res;\n        }, model);\n      } else {\n        if (!opMap.has(opType)) throw new Error(\"opType:\" + opType + \" not exist!\");\n        var opFunc = opMap.get(opType);\n        newModel = controller.run('beforeOpFunction', props);\n        newModel = opFunc(__assign(__assign({}, props), {\n          model: newModel\n        }));\n        newModel = controller.run('afterOpFunction', __assign(__assign({}, props), {\n          model: newModel\n        }));\n      }\n\n      log$3('newModel:', newModel);\n      controller.change(newModel, callback);\n      controller.run('afterOperation', props);\n    },\n    deleteRefKey: function (props) {\n      var e_1, _a;\n\n      var model = props.model,\n          topicKey = props.topicKey,\n          deleteRef = props.deleteRef;\n      var allSubKeys = getAllSubTopicKeys(model, topicKey);\n      allSubKeys.push(topicKey);\n\n      try {\n        for (var allSubKeys_1 = __values(allSubKeys), allSubKeys_1_1 = allSubKeys_1.next(); !allSubKeys_1_1.done; allSubKeys_1_1 = allSubKeys_1.next()) {\n          var key = allSubKeys_1_1.value;\n          deleteRef(linksRefKey(key));\n          deleteRef(linksSvgRefKey(key));\n          deleteRef(contentRefKey(key));\n          deleteRef(contentEditorRefKey(key));\n          deleteRef(descEditorRefKey(key));\n          deleteRef(topicWidgetRefKey(key));\n          deleteRef(topicRefKey(key));\n          deleteRef(collapseRefKey(key));\n          deleteRef(dropAreaRefKey(key, 'next'));\n          deleteRef(dropAreaRefKey(key, 'prev'));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (allSubKeys_1_1 && !allSubKeys_1_1.done && (_a = allSubKeys_1.return)) _a.call(allSubKeys_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    },\n    // 在整个Operation执行之前被调用\n    beforeOperation: function (props) {},\n    afterOperation: function (props) {},\n    // 在单个OpFunction执行之前被调用\n    beforeOpFunction: function (props) {\n      var controller = props.controller,\n          opType = props.opType,\n          model = props.model,\n          topicKey = props.topicKey;\n\n      if (opType === OpType.DELETE_TOPIC && topicKey !== model.editorRootTopicKey) {\n        controller.run('deleteRefKey', props);\n      }\n\n      return model;\n    },\n    afterOpFunction: function (props) {\n      return props.model;\n    }\n  };\n}\n\nvar TopicContextMenu =\n/** @class */\nfunction (_super) {\n  __extends(TopicContextMenu, _super);\n\n  function TopicContextMenu() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TopicContextMenu.prototype.render = function () {\n    var controller = this.props.controller;\n    return createElement(Menu, null, controller.run('customizeTopicContextMenu', this.props));\n  };\n\n  return TopicContextMenu;\n}(BaseWidget);\n\nvar items = [{\n  icon: 'edit',\n  label: 'edit',\n  shortcut: 'Space',\n  rootCanUse: true,\n  opType: OpType.START_EDITING_CONTENT\n}, {\n  icon: 'add-sibling',\n  label: 'add sibling',\n  shortcut: 'Enter',\n  opType: OpType.ADD_SIBLING\n}, {\n  icon: 'add-child',\n  label: 'add child',\n  shortcut: 'Tab',\n  rootCanUse: true,\n  opType: OpType.ADD_CHILD\n}, {\n  icon: 'notes',\n  label: 'edit notes',\n  shortcut: 'Alt + D',\n  rootCanUse: true,\n  opType: OpType.START_EDITING_DESC\n}, {\n  icon: 'delete-node',\n  label: 'delete node',\n  shortcut: 'Del',\n  opType: OpType.DELETE_TOPIC\n}, {\n  icon: 'root',\n  label: 'set as editor root',\n  shortcut: 'Alt + Shift + F',\n  opType: OpType.SET_EDITOR_ROOT\n}];\n\nfunction ContextMenuPlugin() {\n  return {\n    renderTopicContextMenu: function (props) {\n      return createElement(TopicContextMenu, __assign({}, props));\n    },\n    customizeTopicContextMenu: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      var isRoot = topicKey === model.editorRootTopicKey;\n\n      function onClickItem(item) {\n        return function (e) {\n          item.opType && controller.run('operation', __assign(__assign({}, props), {\n            opType: item.opType\n          }));\n        };\n      }\n\n      return items.map(function (item) {\n        return isRoot && !item.rootCanUse ? null : createElement(MenuItem, {\n          key: item.label,\n          icon: Icon(item.icon),\n          text: item.label,\n          labelElement: createElement(\"kbd\", null, item.shortcut),\n          onClick: onClickItem(item)\n        });\n      });\n    }\n  };\n}\n\nvar log$4 = debug('node:topic-drop-effect');\nvar DropEffectSvg = styled.svg(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"])));\n\nvar TopicDropEffect =\n/** @class */\nfunction (_super) {\n  __extends(TopicDropEffect, _super);\n\n  function TopicDropEffect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      content: null\n    };\n    return _this;\n  }\n\n  TopicDropEffect.prototype.layout = function () {\n    var props = this.props;\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model,\n        zoomFactor = _a.zoomFactor,\n        controller = _a.controller;\n    var targetProps = controller.run('getDragTargetProps', props);\n    var key = targetProps.key,\n        dropDir = targetProps.dropDir;\n    log$4('layout', dropDir);\n\n    if (key === null) {\n      this.setState({\n        content: null\n      });\n      return;\n    }\n\n    var refKey;\n\n    if (dropDir === 'in') {\n      refKey = contentRefKey(key);\n    } else {\n      refKey = dropAreaRefKey(key, dropDir);\n    }\n\n    var content = getRef(refKey);\n    var svg = getRef('svg-drop-effect');\n    var bigView = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).bigView;\n    var contentRect = getRelativeRect(content, bigView, zoomFactor);\n    var svgRect = getRelativeRect(svg, bigView, zoomFactor);\n    var padding = 3;\n    var x = contentRect.left - svgRect.left - padding;\n    var y = contentRect.top - svgRect.top - padding;\n    var width = contentRect.width + 2 * padding;\n    var height = contentRect.height + 2 * padding;\n    this.setState({\n      content: createElement(\"g\", null, createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: \"none\",\n        stroke: model.config.theme.highlightColor,\n        strokeDasharray: \"5,5\",\n        strokeWidth: 2\n      }))\n    });\n  };\n\n  TopicDropEffect.prototype.render = function () {\n    var saveRef = this.props.saveRef;\n    return createElement(DropEffectSvg, {\n      ref: saveRef('svg-drop-effect')\n    }, this.state.content);\n  };\n\n  return TopicDropEffect;\n}(BaseWidget);\n\nvar templateObject_1$2;\nvar log$5 = debug('plugin:drag-and-drop');\nvar DropArea = styled.div(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([\"\\n  height: \", \";\\n  width: 100%;\\n  margin: 5px 0px;\\n\"], [\"\\n  height: \", \";\\n  width: 100%;\\n  margin: 5px 0px;\\n\"])), function (props) {\n  return props.height + \"px\";\n});\n\nfunction DragAndDropPlugin() {\n  var dragTargetKey = null;\n  var dragTargetDir = null;\n  return {\n    renderTopicDropArea: function (props) {\n      var topicKey = props.topicKey,\n          dropDir = props.dropDir,\n          saveRef = props.saveRef,\n          controller = props.controller,\n          model = props.model;\n\n      var onDragEnter = function (ev) {\n        log$5('onDragEnter', topicKey, dropDir);\n        controller.run('handleTopicDragEnter', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var onDragLeave = function (ev) {\n        log$5('onDragLeave', topicKey, dropDir);\n        controller.run('handleTopicDragLeave', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var onDragOver = function (ev) {\n        ev.preventDefault();\n      };\n\n      var onDrop = function (ev) {\n        log$5('onDrop', topicKey, dropDir);\n        controller.run('handleTopicDrop', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var eventHandlers = {\n        onDragEnter: onDragEnter,\n        onDragLeave: onDragLeave,\n        onDragOver: onDragOver,\n        onDrop: onDrop\n      };\n      return createElement(DropArea, __assign({\n        height: model.config.theme.marginV / 2,\n        ref: saveRef(dropAreaRefKey(topicKey, dropDir))\n      }, eventHandlers));\n    },\n    renderDragAndDropEffect: function (props) {\n      log$5('renderDragAndDropEffect');\n      var saveRef = props.saveRef;\n      return createElement(TopicDropEffect, __assign({\n        ref: saveRef(RefKey.DROP_EFFECT_KEY)\n      }, props));\n    },\n    getDragTargetProps: function (props) {\n      return {\n        key: dragTargetKey,\n        dropDir: dragTargetDir\n      };\n    },\n    handleTopicDragStart: function (props) {\n      var controller = props.controller,\n          ev = props.ev;\n      ev.stopPropagation();\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.DRAGGING\n      }));\n    },\n    canDrop: function (props) {\n      var srcKey = props.srcKey,\n          dstKey = props.dstKey,\n          model = props.model,\n          dropDir = props.dropDir;\n      if (srcKey === model.editorRootTopicKey || srcKey === dstKey || getRelationship(model, srcKey, dstKey) === TopicRelationship.ANCESTOR) return false;\n      if (dstKey === model.editorRootTopicKey && dropDir !== 'in') return false;\n      var srcTopic = model.getTopic(srcKey);\n      if (srcTopic.parentKey === dstKey && dropDir === 'in') return false;\n      return true;\n    },\n    handleTopicDragEnter: function (props) {\n      var dropDir = props.dropDir,\n          topicKey = props.topicKey,\n          controller = props.controller,\n          model = props.model;\n      log$5('handleTopicDragEnter:', topicKey, dropDir);\n      var canDrop = controller.run('canDrop', __assign(__assign({}, props), {\n        srcKey: model.focusKey,\n        dstKey: topicKey\n      }));\n\n      if (canDrop) {\n        dragTargetKey = topicKey;\n        dragTargetDir = dropDir;\n        controller.change(model);\n      }\n    },\n    handleTopicDragLeave: function (props) {\n      var controller = props.controller,\n          model = props.model,\n          topicKey = props.topicKey,\n          dropDir = props.dropDir,\n          getRef = props.getRef,\n          ev = props.ev;\n      var relatedTarget = ev.nativeEvent.relatedTarget;\n      log$5('handleTopicDragLeave:', topicKey, dropDir);\n      var content = getRef(contentRefKey(topicKey));\n\n      if (content == relatedTarget || content.contains(relatedTarget)) {\n        return;\n      }\n\n      dragTargetKey = null;\n      dragTargetDir = null;\n      controller.change(model);\n    },\n    handleTopicDrop: function (props) {\n      log$5('handleTopicDrop');\n      var controller = props.controller,\n          topicKey = props.topicKey,\n          model = props.model;\n      props = __assign(__assign({}, props), {\n        srcKey: model.focusKey,\n        dstKey: topicKey\n      });\n      dragTargetKey = null;\n      dragTargetDir = null;\n\n      if (controller.run('canDrop', props)) {\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.DRAG_AND_DROP\n        }));\n      }\n    }\n  };\n}\n\nvar templateObject_1$3;\nvar EditorRootBreadcrumbsRoot = styled(ZIndex)(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject([\"\\n  position: absolute;\\n  width: 20%;\\n  padding: 0 5px;\\n  background: white;\\n  left: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n\"], [\"\\n  position: absolute;\\n  width: 20%;\\n  padding: 0 5px;\\n  background: white;\\n  left: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n\"])));\nvar TooltipContent = styled.div(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([\"\\n  max-width: 600px;\\n\"], [\"\\n  max-width: 600px;\\n\"])));\nvar BreadcrumbTitle = styled.span(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([\"\"], [\"\"])));\n\nvar EditorRootBreadcrumbs =\n/** @class */\nfunction (_super) {\n  __extends(EditorRootBreadcrumbs, _super);\n\n  function EditorRootBreadcrumbs(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setEditorRootTopicKey = function (topicKey) {\n      return function () {\n        var _a = _this.props,\n            model = _a.model,\n            controller = _a.controller;\n\n        if (model.editorRootTopicKey !== topicKey) {\n          controller.change(ModelModifier.setEditorRootTopicKey({\n            model: model,\n            topicKey: topicKey\n          }));\n        }\n      };\n    };\n\n    _this.breadcrumbRenderer = function (props) {\n      var text = props.text,\n          breadProps = __rest(props, [\"text\"]);\n\n      var needTooltip = text.length > 8;\n      var title = needTooltip ? text.substr(0, 8) + '...' : text; //TODO\n\n      var content = createElement(TooltipContent, null, text);\n      var tooltipProps = {\n        content: content,\n        position: PopoverPosition.BOTTOM_RIGHT\n      };\n      var breadcrumb = createElement(Breadcrumb, __assign({}, breadProps), createElement(BreadcrumbTitle, null, title));\n      return needTooltip ? createElement(Tooltip, __assign({}, tooltipProps), breadcrumb) : breadcrumb; // return (\n      //   <Breadcrumb {...breadProps}>\n      //     <BreadcrumbTitle>{title}</BreadcrumbTitle>\n      //   </Breadcrumb>\n      // );\n    };\n\n    _this.state = {\n      show: false\n    };\n    return _this;\n  }\n\n  EditorRootBreadcrumbs.prototype.render = function () {\n    var props = this.props;\n    var model = props.model,\n        controller = props.controller,\n        zIndex = props.zIndex;\n    var editingRootKey = model.editorRootTopicKey;\n    if (editingRootKey === model.rootTopicKey) return null;\n    var items = [];\n    var topic = model.getTopic(editingRootKey);\n\n    while (topic != null) {\n      var title = controller.getValue(PropKey.TOPIC_TITLE, __assign(__assign({}, props), {\n        topicKey: topic.key\n      }));\n      items.unshift({\n        text: title,\n        onClick: this.setEditorRootTopicKey(topic.key)\n      });\n      topic = model.getTopic(topic.parentKey);\n    }\n\n    var breadcrumbProps = {\n      items: items,\n      breadcrumbRenderer: this.breadcrumbRenderer\n    };\n    return createElement(EditorRootBreadcrumbsRoot, {\n      zIndex: zIndex\n    }, createElement(Breadcrumbs, __assign({}, breadcrumbProps)));\n  };\n\n  return EditorRootBreadcrumbs;\n}(BaseWidget);\n\nvar templateObject_1$4, templateObject_2$2, templateObject_3$1;\nvar NodeLayer = styled.div(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject([\"\\n  position: relative;\\n  display: flex;\\n  align-items: center;\\n  padding: 5px;\\n\"], [\"\\n  position: relative;\\n  display: flex;\\n  align-items: center;\\n  padding: 5px;\\n\"])));\nvar DIV = styled.div(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  background: \", \";\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  background: \", \";\\n\"])), function (props) {\n  return props.theme.background;\n});\n\nvar MindDragScrollWidget =\n/** @class */\nfunction (_super) {\n  __extends(MindDragScrollWidget, _super);\n\n  function MindDragScrollWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setZoomFactor = function (zoomFactor) {\n      _this.dragScrollWidget.setZoomFactor(zoomFactor);\n    };\n\n    _this.onWheel = function (e) {\n      if (e.altKey || e.ctrlKey) {\n        var controller = _this.props.controller;\n        var zoomFactor = controller.run('getZoomFactor', _this.props);\n        zoomFactor = zoomFactor - (e.nativeEvent.deltaY > 0 ? 0.1 : -0.1);\n        if (zoomFactor < 0.5) zoomFactor = 0.5;\n        if (zoomFactor > 4) zoomFactor = 4; // console.log('zoomFactor=>', zoomFactor);\n\n        controller.run('setZoomFactor', __assign(__assign({}, _this.props), {\n          zoomFactor: zoomFactor\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  MindDragScrollWidget.prototype.renderHotkeys = function () {\n    var props = this.props;\n    var controller = props.controller,\n        model = props.model;\n    var hotKeys = controller.run('customizeHotKeys', props);\n    if (hotKeys === null) return null;\n\n    if (!(hotKeys.topicHotKeys instanceof Map && hotKeys.globalHotKeys instanceof Map)) {\n      throw new TypeError('topicHotKeys and globalHotKeys must be a Map');\n    }\n\n    var children = [];\n\n    if (model.focusMode === FocusMode.NORMAL || model.focusMode === FocusMode.SHOW_POPUP) {\n      hotKeys.topicHotKeys.forEach(function (v, k) {\n        children.push(createElement(Hotkey, __assign({\n          key: k\n        }, v, {\n          global: true\n        })));\n      });\n    }\n\n    hotKeys.globalHotKeys.forEach(function (v, k) {\n      children.push(createElement(Hotkey, __assign({\n        key: k\n      }, v, {\n        global: true\n      })));\n    });\n    return createElement(Hotkeys, null, children);\n  };\n\n  MindDragScrollWidget.prototype.componentDidMount = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model,\n        controller = _a.controller;\n    controller.run('addZoomFactorChangeEventListener', __assign(__assign({}, this.props), {\n      listener: this.setZoomFactor\n    }));\n    var rootTopic = getRef(topicRefKey(model.editorRootTopicKey)); //TODO\n\n    var nodeLayer = getRef('node-layer');\n    var rootTopicRect = rootTopic.getBoundingClientRect();\n    var nodeLayerRect = nodeLayer.getBoundingClientRect();\n    this.dragScrollWidget.setViewBoxScrollDelta(0, rootTopicRect.top - nodeLayerRect.top - this.dragScrollWidget.viewBox.getBoundingClientRect().height / 2 + rootTopicRect.height);\n    this.layout();\n  };\n\n  MindDragScrollWidget.prototype.componentWillUnmount = function () {\n    var controller = this.props.controller;\n    controller.run('removeZoomFactorChangeEventListener', __assign(__assign({}, this.props), {\n      listener: this.setZoomFactor\n    }));\n  };\n\n  Object.defineProperty(MindDragScrollWidget.prototype, \"dragScrollWidget\", {\n    get: function () {\n      return this.props.getRef(RefKey.DRAG_SCROLL_WIDGET_KEY);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MindDragScrollWidget.prototype.componentDidUpdate = function () {\n    var controller = this.props.controller;\n    controller.run('fireEvent', __assign(__assign({}, this.props), {\n      key: EventKey.CENTER_ROOT_TOPIC\n    }));\n    this.layout();\n  };\n\n  MindDragScrollWidget.prototype.layout = function () {\n    var controller = this.props.controller;\n    controller.run('layout', this.props);\n  };\n\n  MindDragScrollWidget.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        saveRef = _a.saveRef,\n        model = _a.model,\n        controller = _a.controller;\n    var nodeKey = model.editorRootTopicKey;\n    return createElement(DIV, {\n      onWheel: this.onWheel\n    }, createElement(DragScrollWidget, __assign({}, this.state, {\n      enableMouseWheel: false,\n      zoomFactor: model.zoomFactor,\n      ref: saveRef(RefKey.DRAG_SCROLL_WIDGET_KEY)\n    }), function (setViewBoxScroll, setViewBoxScrollDelta) {\n      var rootWidgetProps = __assign(__assign({}, _this.props), {\n        topicKey: nodeKey,\n        setViewBoxScroll: setViewBoxScroll,\n        setViewBoxScrollDelta: setViewBoxScrollDelta\n      });\n\n      return createElement(NodeLayer, {\n        ref: saveRef('node-layer')\n      }, controller.run('renderRootWidget', rootWidgetProps));\n    }));\n  };\n\n  MindDragScrollWidget = __decorate([HotkeysTarget], MindDragScrollWidget);\n  return MindDragScrollWidget;\n}(Component);\n\nvar templateObject_1$5, templateObject_2$3;\n\nvar Modals =\n/** @class */\nfunction (_super) {\n  __extends(Modals, _super);\n\n  function Modals() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleClose = function () {\n      var controller = _this.props.controller;\n      var handleActiveModalClose = controller.run('handleActiveModalClose', _this.props);\n      handleActiveModalClose && handleActiveModalClose();\n    };\n\n    return _this;\n  }\n\n  Modals.prototype.render = function () {\n    var controller = this.props.controller;\n    var activeModal = controller.run('renderModal', this.props);\n    var activeModalProps = controller.run('getActiveModalProps', this.props);\n    return createElement(Dialog, {\n      onClose: this.handleClose,\n      isOpen: activeModal !== null,\n      autoFocus: true,\n      enforceFocus: true,\n      usePortal: true,\n      title: activeModalProps && activeModalProps.title,\n      style: activeModalProps && activeModalProps.style\n    }, createElement(\"div\", {\n      className: Classes.DIALOG_BODY,\n      style: {\n        minHeight: 0\n      }\n    }, activeModal));\n  };\n\n  return Modals;\n}(BaseWidget);\n\nvar RootLinksSvg = styled.svg(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"])));\nvar log$6 = debug('node:root-sub-links');\n\nvar RootSubLinks =\n/** @class */\nfunction (_super) {\n  __extends(RootSubLinks, _super);\n\n  function RootSubLinks() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      curves: []\n    };\n    return _this;\n  }\n\n  RootSubLinks.prototype.layout = function () {\n    var props = this.props;\n    var model = props.model,\n        getRef = props.getRef,\n        topicKey = props.topicKey,\n        zoomFactor = props.zoomFactor,\n        controller = props.controller;\n    var topic = model.getTopic(topicKey);\n    var content = getRef(contentRefKey(topicKey));\n    var svg = getRef(linksSvgRefKey(topicKey));\n    var bigView = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).bigView;\n    var contentRect = getRelativeRect(content, bigView, zoomFactor);\n    var svgRect = getRelativeRect(svg, bigView, zoomFactor);\n    var p1, p2;\n    p1 = {\n      x: centerX(contentRect) - svgRect.left,\n      y: centerY(contentRect) - svgRect.top\n    };\n    var curves = [];\n    topic.subKeys.forEach(function (key) {\n      var linkStyle = controller.run('getLinkStyle', __assign(__assign({}, props), {\n        topicKey: key\n      }));\n      var lineType = linkStyle.lineType;\n      var subTopicContent = getRef(contentRefKey(key));\n      var rect = getRelativeRect(subTopicContent, bigView, zoomFactor);\n\n      if (rect.left > contentRect.right) {\n        p2 = {\n          x: rect.left,\n          y: centerY(rect)\n        };\n      } else {\n        p2 = {\n          x: rect.right,\n          y: centerY(rect)\n        };\n      }\n\n      p2 = {\n        x: p2.x - svgRect.left,\n        y: p2.y - svgRect.top\n      };\n      var curve;\n\n      if (lineType === 'curve') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" C \" + p1.x + \" \" + centerPointY(p1, p2) + \" \" + centerPointX(p1, p2) + \" \" + p2.y + \" \" + p2.x + \" \" + p2.y;\n      } else if (lineType === 'line') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" L \" + p2.x + \" \" + p2.y;\n      } else if (lineType === 'round') {\n        var vDir = p2.y > p1.y ? 1 : -1;\n        var hDir = p2.x > p1.x ? 1 : -1;\n        var radius = linkStyle.lineRadius;\n\n        if (radius == null) {\n          throw new Error('link line type is round, but lineRadius is not provided!');\n        }\n\n        if (p2.y === p1.y) {\n          curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x;\n        } else {\n          // 0 表示逆时针 1 表示顺时针\n          curve = \"M \" + p1.x + \" \" + p1.y + \"  V \" + (p2.y - vDir * radius) + \" A \" + radius + \" \" + radius + \" 0 0 \" + (vDir * hDir === 1 ? 0 : 1) + \" \" + (p1.x + radius * hDir) + \" \" + p2.y + \" H \" + p2.x;\n        }\n      }\n\n      curves.push(createElement(\"path\", {\n        key: \"link-\" + key,\n        d: curve,\n        strokeWidth: linkStyle.lineWidth,\n        stroke: linkStyle.lineColor,\n        fill: \"none\"\n      }));\n    });\n    this.setState({\n      curves: curves\n    });\n  };\n\n  RootSubLinks.prototype.render = function () {\n    log$6('render');\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n    return createElement(RootLinksSvg, {\n      ref: saveRef(linksSvgRefKey(topicKey))\n    }, createElement(\"g\", null, this.state.curves));\n  };\n\n  return RootSubLinks;\n}(BaseWidget);\n\nvar templateObject_1$6;\nvar log$7 = debug('RootNode');\nvar LayerPart = styled.div(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n\\n  align-items: \", \";\\n  flex-direction: column;\\n\\n  padding: \", \";\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n\\n  align-items: \", \";\\n  flex-direction: column;\\n\\n  padding: \", \";\\n\"])), function (props) {\n  //@ts-ignore\n  return props.topicDirection === TopicDirection.LEFT ? 'flex-end' : 'flex-start';\n}, function (props) {\n  //@ts-ignore\n  return props.topicDirection === TopicDirection.LEFT ? '15px 60px 15px 0px' : '15px 0px 15px 60px';\n});\nvar Topic = styled.div(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n  z-index: 3;\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n  z-index: 3;\\n\"])));\n\nvar RootWidget =\n/** @class */\nfunction (_super) {\n  __extends(RootWidget, _super);\n\n  function RootWidget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RootWidget.prototype.renderPartTopics = function (topics, dir) {\n    var _a = this.props,\n        controller = _a.controller,\n        saveRef = _a.saveRef;\n    var res = controller.run('createSubTopics', __assign(__assign({}, this.props), {\n      dir: dir,\n      isRoot: true,\n      topics: topics\n    }));\n    if (!res) return null;\n    var subTopics = res.subTopics;\n    var cxName = \"bm-layer-\" + (dir === TopicDirection.LEFT ? 'left' : 'right');\n    return (//@ts-ignore\n      createElement(LayerPart, {\n        topicDirection: dir,\n        ref: saveRef(cxName)\n      }, subTopics)\n    );\n  };\n\n  RootWidget.prototype.render = function () {\n    log$7('render');\n    var props = this.props;\n    var model = props.model,\n        topicKey = props.topicKey,\n        saveRef = props.saveRef,\n        controller = props.controller;\n    var topicStyle = controller.run('getTopicContentStyle', props);\n    var config = model.config;\n    var topicContent = controller.run('renderTopicContent', __assign(__assign({}, props), {\n      topicStyle: topicStyle,\n      dir: TopicDirection.MAIN\n    }));\n    var partTopics = controller.run('getPartTopics', {\n      layout: config.layoutDir,\n      model: model,\n      topicKey: topicKey\n    });\n    var rootTopic = createElement(Topic, {\n      ref: saveRef(topicRefKey(topicKey))\n    }, topicContent);\n    var children = controller.run('renderRootWidgetOtherChildren', props);\n\n    switch (config.layoutDir) {\n      case DiagramLayoutType.LEFT_AND_RIGHT:\n        return createElement(Fragment, null, this.renderPartTopics(partTopics.L, 'L'), rootTopic, this.renderPartTopics(partTopics.R, 'R'), children);\n\n      case DiagramLayoutType.LEFT_TO_RIGHT:\n        return createElement(Fragment, null, rootTopic, this.renderPartTopics(partTopics.R, 'R'), children);\n\n      case DiagramLayoutType.RIGHT_TO_LEFT:\n        return createElement(Fragment, null, this.renderPartTopics(partTopics.L, 'L'), rootTopic, children);\n\n      case DiagramLayoutType.TOP_TO_BOTTOM:\n        return createElement(Fragment, null, rootTopic, this.renderPartTopics(partTopics.B, 'B'), children);\n    }\n\n    return null;\n  };\n\n  return RootWidget;\n}(Component);\n\nvar templateObject_1$7, templateObject_2$4;\nvar Icon$1 = styled.div(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([\"\\n  position: absolute;\\n  top: calc(50% - 10px);\\n  \", \";\\n  border-radius: 50%;\\n  width: 20px;\\n  height: 20px;\\n  text-align: center;\\n  //@ts-ignore\\n  background: \", \";\\n  cursor: pointer;\\n  padding: 0;\\n  font-size: 14px;\\n  line-height: 20px;\\n  border: 0;\\n  z-index: 2;\\n\"], [\"\\n  position: absolute;\\n  top: calc(50% - 10px);\\n  \", \";\\n  border-radius: 50%;\\n  width: 20px;\\n  height: 20px;\\n  text-align: center;\\n  //@ts-ignore\\n  background: \", \";\\n  cursor: pointer;\\n  padding: 0;\\n  font-size: 14px;\\n  line-height: 20px;\\n  border: 0;\\n  z-index: 2;\\n\"])), function (_a) {\n  var dir = _a.dir;\n  if (dir === TopicDirection.RIGHT) return css(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject([\"\\n        right: -25px;\\n      \"], [\"\\n        right: -25px;\\n      \"])));\n  if (dir === TopicDirection.LEFT) return css(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject([\"\\n        left: -25px;\\n      \"], [\"\\n        left: -25px;\\n      \"])));\n}, function (props) {\n  return props.background;\n});\n\nfunction TopicCollapseIcon(props) {\n  var _a;\n\n  var model = props.model,\n      topicKey = props.topicKey,\n      topicStyle = props.topicStyle,\n      dir = props.dir,\n      saveRef = props.saveRef,\n      onClickCollapse = props.onClickCollapse;\n  var topic = model.getTopic(topicKey);\n  return topic.subKeys.size > 0 ? createElement(Icon$1, {\n    ref: saveRef(collapseRefKey(topicKey)),\n    onClick: onClickCollapse,\n    background: topicStyle.background,\n    dir: dir,\n    className: cx((_a = {\n      icon: true,\n      iconfont: true\n    }, _a[\"bm-\" + (topic.collapse ? 'plus' : 'minus')] = true, _a))\n  }) : null;\n}\n\nvar templateObject_1$8, templateObject_2$5, templateObject_3$2;\nvar log$8 = debug('node:topic-content2');\nvar EditingRoot = styled.div(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject([\"\\n  position: relative;\\n\"], [\"\\n  position: relative;\\n\"])));\nvar EditingWrapper = styled.div(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject([\"\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: auto;\\n  z-index: 10;\\n  color: black;\\n\"], [\"\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: auto;\\n  z-index: 10;\\n  color: black;\\n\"])));\n\nvar cancelEvent$1 = function (e) {\n  log$8('cancelEvent');\n  e.preventDefault();\n  e.stopPropagation();\n};\n\nfunction TopicContent(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey,\n      getRef = props.getRef;\n  var readOnly = model.editingContentKey !== topicKey;\n  var editor = controller.run('renderTopicContentEditor', __assign(__assign({}, props), {\n    readOnly: readOnly\n  }));\n  var child;\n\n  if (readOnly) {\n    child = editor;\n  } else {\n    var wrapper_1;\n\n    var wrapperRef = function (ref) {\n      if (ref) {\n        wrapper_1 = ref;\n        contentResizeObserver_1.observe(wrapper_1);\n      }\n    };\n\n    var rect_1 = {\n      width: 50,\n      height: 40\n    };\n    var editorDiv = getRef(\"content-editor-\" + topicKey);\n    if (editorDiv) rect_1 = editorDiv.getBoundingClientRect();\n\n    var contentResizeCallback = function (entries, observer) {\n      var r = entries[0].contentRect;\n      wrapper_1.style.left = (rect_1.width - r.width) / 2 + 'px';\n      wrapper_1.style.top = (rect_1.height - r.height) / 2 + 'px';\n    };\n\n    var contentResizeObserver_1 = new ResizeObserver(contentResizeCallback);\n    log$8(rect_1);\n    child = createElement(Fragment, null, createElement(\"div\", {\n      style: {\n        width: rect_1.width,\n        height: rect_1.height\n      }\n    }), createElement(EditingWrapper, {\n      ref: wrapperRef\n    }, editor));\n  }\n\n  return createElement(EditingRoot, {\n    onDragEnter: cancelEvent$1,\n    onDragOver: cancelEvent$1\n  }, child);\n}\n\nvar templateObject_1$9, templateObject_2$6;\nvar log$9 = debug('node:topic-content-widget');\nvar TopicContent$1 = styled.div(templateObject_1$a || (templateObject_1$a = __makeTemplateObject([\"\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n  //overflow: hidden;\\n  position: relative;\\n\"], [\"\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n  //overflow: hidden;\\n  position: relative;\\n\"])));\nvar TopicContentWithDropArea = styled.div(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject([\"\\n  position: relative;\\n\"], [\"\\n  position: relative;\\n\"])));\n\nvar TopicContentWidget =\n/** @class */\nfunction (_super) {\n  __extends(TopicContentWidget, _super);\n\n  function TopicContentWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onDragStart = function (ev) {\n      _this.run('handleTopicDragStart', __assign(__assign({}, _this.props), {\n        ev: ev\n      }));\n    };\n\n    _this.onDragOver = function (ev) {\n      // log('onDragOver');\n      ev.preventDefault();\n    };\n\n    _this.onDragEnter = function (ev) {\n      log$9('onDragEnter', _this.props.topicKey);\n\n      _this.run('handleTopicDragEnter', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onDragLeave = function (ev) {\n      _this.run('handleTopicDragLeave', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onDrop = function (ev) {\n      log$9('onDrop');\n\n      _this.run('handleTopicDrop', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onClick = function (ev) {\n      var props = _this.props;\n      var controller = props.controller; //TODO bug [Violation] 'setTimeout' handler took 69ms\n\n      _this.handleTopicClickTimeout = setTimeout(function () {\n        // log('handleTopicClick');\n        //注意这里要传递this.props, 而不是props, 因为会先调用onClick, 再调用其他的topic-content-editor的onClickOutside\n        //其他组件的onClickOutside是个同步的函数,会设置新的model, 如果这里用props传参,会导致model 还是老的model\n        controller.run('handleTopicClick', __assign(__assign({}, _this.props), {\n          ev: ev\n        }));\n      }, 200);\n    };\n\n    _this.onDoubleClick = function (ev) {\n      clearTimeout(_this.handleTopicClickTimeout);\n      var controller = _this.props.controller;\n      controller.run('handleTopicDoubleClick', __assign(__assign({}, _this.props), {\n        ev: ev\n      }));\n    };\n\n    _this.needRelocation = false;\n\n    _this.onClickCollapse = function (e) {\n      e.stopPropagation();\n      var _a = _this.props,\n          topicKey = _a.topicKey,\n          getRef = _a.getRef;\n      _this.needRelocation = true;\n      var collapseIcon = getRef(collapseRefKey(topicKey));\n      var rect = collapseIcon.getBoundingClientRect();\n      log$9('oldRect', rect);\n      _this.oldCollapseIconVector = [rect.left + rect.width / 2, rect.top + rect.height / 2];\n      log$9('oldCollapseIconVector', _this.oldCollapseIconVector); // this.oldCollapseIconVector = controller.run('getRelativeVectorFromViewPort', {\n      //   ...this.props,\n      //   element: collapseIcon\n      // });\n\n      _this.operation(OpType.TOGGLE_COLLAPSE, _this.props);\n    };\n\n    _this.state = {\n      dragEnter: false\n    };\n    return _this;\n  }\n\n  TopicContentWidget.prototype.renderContextMenu = function () {\n    var controller = this.props.controller;\n\n    if (!controller.getValue(PropKey.TOPIC_CONTEXT_MENU_ENABLED, __assign({}, this.props))) {\n      return;\n    }\n\n    this.operation(OpType.FOCUS_TOPIC, __assign(__assign({}, this.props), {\n      focusMode: FocusMode.SHOW_POPUP\n    }));\n    return controller.run('renderTopicContextMenu', this.props);\n  };\n\n  TopicContentWidget.prototype.onContextMenuClose = function () {// Optional method called once the context menu is closed.\n  };\n\n  TopicContentWidget.prototype.componentDidUpdate = function () {\n    if (this.needRelocation) {\n      var _a = this.props,\n          getRef = _a.getRef,\n          topicKey = _a.topicKey,\n          setViewBoxScrollDelta = _a.setViewBoxScrollDelta;\n      var newIcon = getRef(collapseRefKey(topicKey));\n      var newRect = newIcon.getBoundingClientRect(); // const newVector = controller.run('getRelativeVectorFromViewPort', {\n      //   ...this.props,\n      //   element: getRef(collapseRefKey(topicKey))\n      // });\n\n      var newVector = [newRect.left + newRect.width / 2, newRect.top + newRect.height / 2];\n      log$9('newVector:', newVector);\n      log$9('oldVector:', this.oldCollapseIconVector); //TODO bug\n\n      var vector = [newVector[0] - this.oldCollapseIconVector[0], newVector[1] - this.oldCollapseIconVector[1]];\n      log$9('vector', vector);\n      setViewBoxScrollDelta(vector[0], vector[1]);\n      this.needRelocation = false;\n    }\n  };\n\n  TopicContentWidget.prototype.render = function () {\n    var props = this.props;\n    var saveRef = props.saveRef,\n        topicKey = props.topicKey,\n        model = props.model,\n        controller = props.controller,\n        topicStyle = props.topicStyle,\n        dir = props.dir;\n    log$9('render', topicKey, model.focusMode);\n    var draggable = controller.run('isOperationEnabled', props) && model.editingContentKey !== topicKey;\n    var collapseIcon = controller.run('renderTopicCollapseIcon', __assign(__assign({}, props), {\n      onClickCollapse: this.onClickCollapse.bind(this)\n    }));\n    var prevDropArea = controller.run('renderTopicDropArea', __assign(__assign({}, props), {\n      dropDir: 'prev'\n    }));\n    var nextDropArea = controller.run('renderTopicDropArea', __assign(__assign({}, props), {\n      dropDir: 'next'\n    }));\n    var dropEventHandlers = {\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      onDragOver: this.onDragOver,\n      onDrop: this.onDrop\n    }; // log(topicKey, 'style', topicStyle);\n\n    return createElement(TopicContentWithDropArea, null, prevDropArea, createElement(TopicContent$1, __assign({\n      style: topicStyle,\n      draggable: draggable,\n      ref: saveRef(contentRefKey(topicKey)),\n      onDragStart: this.onDragStart,\n      onClick: this.onClick,\n      onDoubleClick: this.onDoubleClick\n    }, dropEventHandlers), controller.run('renderTopicBlocks', props), controller.run('renderTopicContentOthers', props)), nextDropArea, dir !== TopicDirection.MAIN && collapseIcon);\n  };\n\n  TopicContentWidget = __decorate([ContextMenuTarget], TopicContentWidget);\n  return TopicContentWidget;\n}(BaseWidget);\n\nvar templateObject_1$a, templateObject_2$7;\nvar log$a = debug('node:topic-desc');\nvar TooltipContentWrapper = styled.div(templateObject_1$b || (templateObject_1$b = __makeTemplateObject([\"\\n  overflow: auto;\\n\"], [\"\\n  overflow: auto;\\n\"])));\n\nfunction TopicDesc(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey,\n      getRef = props.getRef;\n  var isEditing = model.editingDescKey === topicKey;\n  log$a('isEditing', isEditing);\n\n  var onClick = function (e) {\n    e.stopPropagation();\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.START_EDITING_DESC\n    }));\n  };\n\n  var desc = model.getTopic(topicKey).getBlock(BlockType.DESC);\n  if (!isEditing && controller.run('isBlockEmpty', __assign(__assign({}, props), {\n    block: desc.block\n  }))) return null;\n  var descEditor = controller.run('renderTopicDescEditor', props);\n  var diagramRoot = getRef(RefKey.DIAGRAM_ROOT_KEY);\n  var style = {\n    maxWidth: '800px',\n    maxHeight: '600px'\n  };\n\n  if (diagramRoot) {\n    var dRect = diagramRoot.getBoundingClientRect();\n    style.maxWidth = dRect.width * 0.6 + \"px\";\n    style.maxHeight = dRect.height * 0.8 + \"px\";\n  }\n\n  var tooltipContent = createElement(TooltipContentWrapper, {\n    onClick: cancelEvent,\n    classname: Classes.POPOVER_DISMISS,\n    style: style\n  }, descEditor);\n  var icon = createElement(TopicBlockIcon, {\n    onClick: onClick,\n    className: iconClassName(IconName.NOTES),\n    tabIndex: -1\n  });\n  var tooltipProps = {\n    autoFocus: false,\n    content: tooltipContent,\n    target: icon,\n    interactionKind: PopoverInteractionKind.HOVER,\n    hoverOpenDelay: 500\n  };\n  var descIcon = desc.block && createElement(Popover, __assign({}, tooltipProps));\n  return descIcon;\n}\n\nvar templateObject_1$b;\nvar FocusHighlightSvg = styled.svg(templateObject_1$c || (templateObject_1$c = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"])));\n\nvar TopicHighlight =\n/** @class */\nfunction (_super) {\n  __extends(TopicHighlight, _super);\n\n  function TopicHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      content: null\n    };\n    return _this;\n  }\n\n  TopicHighlight.prototype.layout = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model,\n        zoomFactor = _a.zoomFactor;\n    var focusKey = model.focusKey;\n    var focusMode = model.focusMode;\n\n    if (!focusKey || focusMode === FocusMode.EDITING_CONTENT) {\n      this.setState({\n        content: null\n      });\n      return;\n    }\n\n    var content = getRef(contentRefKey(focusKey));\n    var bigView = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).bigView;\n    var svg = getRef(RefKey.SVG_HIGHLIGHT_KEY);\n    var contentRect = getRelativeRect(content, bigView, zoomFactor);\n    var svgRect = getRelativeRect(svg, bigView, zoomFactor);\n    var padding = 3;\n    var x = contentRect.left - svgRect.left - padding;\n    var y = contentRect.top - svgRect.top - padding;\n    var width = contentRect.width + 2 * padding;\n    var height = contentRect.height + 2 * padding;\n    this.setState({\n      content: createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: \"none\",\n        stroke: model.config.theme.highlightColor,\n        strokeWidth: 2\n      })\n    });\n  };\n\n  TopicHighlight.prototype.render = function () {\n    var saveRef = this.props.saveRef;\n    return createElement(FocusHighlightSvg, {\n      ref: saveRef(RefKey.SVG_HIGHLIGHT_KEY)\n    }, this.state.content);\n  };\n\n  return TopicHighlight;\n}(BaseWidget);\n\nvar templateObject_1$c;\nvar TopicLinksSvg = styled.svg(templateObject_1$d || (templateObject_1$d = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"])));\nvar log$b = debug('node:topic-sub-links');\n\nvar TopicSubLinks =\n/** @class */\nfunction (_super) {\n  __extends(TopicSubLinks, _super);\n\n  function TopicSubLinks() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      curves: []\n    };\n    return _this;\n  }\n\n  TopicSubLinks.prototype.layout = function () {\n    var props = this.props;\n    var model = props.model,\n        getRef = props.getRef,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        controller = props.controller;\n    var z = controller.run('getZoomFactor', props);\n    var topic = model.getTopic(topicKey);\n    var content = getRef(contentRefKey(topicKey));\n    var svg = getRef(linksSvgRefKey(topicKey));\n    var collapseIcon = getRef(collapseRefKey(topicKey));\n    var bigView = getRef(RefKey.DRAG_SCROLL_WIDGET_KEY).bigView;\n    var svgRect = getRelativeRect(svg, bigView, z);\n    var collapseRect = getRelativeRect(collapseIcon, bigView, z);\n    var contentRect = getRelativeRect(content, bigView, z);\n    log$b(topicKey);\n    log$b('svgRect', svgRect);\n    log$b('collapseRect', collapseRect);\n    log$b('contentRect', contentRect);\n    var p1, p2, p3;\n\n    if (dir === TopicDirection.RIGHT) {\n      p1 = {\n        x: 0,\n        y: centerY(contentRect) - svgRect.top\n      };\n      p2 = {\n        x: collapseRect.right - svgRect.left + 10,\n        y: p1.y\n      };\n    } else if (dir === TopicDirection.LEFT) {\n      p1 = {\n        x: svgRect.right - svgRect.left,\n        y: centerY(contentRect) - svgRect.top\n      };\n      p2 = {\n        x: collapseRect.left - svgRect.left - 10,\n        y: p1.y\n      };\n    }\n\n    var curves = [];\n    topic.subKeys.forEach(function (key) {\n      var curve;\n      var linkStyle = controller.run('getLinkStyle', __assign(__assign({}, props), {\n        topicKey: key\n      })); // log(key);\n\n      var subContent = getRef(contentRefKey(key));\n      if (!subContent) return;\n      var rect = getRelativeRect(subContent, bigView, z);\n\n      if (dir === TopicDirection.RIGHT) {\n        p3 = {\n          x: rect.left - svgRect.left,\n          y: centerY(rect) - svgRect.top\n        };\n      }\n\n      if (dir === TopicDirection.LEFT) {\n        p3 = {\n          x: rect.right - svgRect.left,\n          y: centerY(rect) - svgRect.top\n        };\n      }\n\n      var lineType = linkStyle.lineType;\n\n      if (lineType === 'curve') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" L \" + p2.x + \" \" + p2.y + \" C \" + p2.x + \" \" + centerPointY(p2, p3) + \" \" + centerPointX(p2, p3) + \" \" + p3.y + \" \" + p3.x + \" \" + p3.y;\n      } else if (lineType === 'round') {\n        var vDir = p3.y > p1.y ? 1 : -1;\n        var hDir = p3.x > p1.x ? 1 : -1;\n        var radius = linkStyle.lineRadius; // if (p3.y === p1.y) { //这样判断不可靠\n\n        if (topic.subKeys.size === 1 || Math.abs(p3.y - p1.y) <= 1) {\n          curve = \"M \" + p1.x + \" \" + p1.y + \" L \" + p3.x + \" \" + p3.y;\n        } else {\n          // 0 表示逆时针 1 表示顺时针\n          curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x + \" V \" + (p3.y - vDir * radius) + \" A \" + radius + \" \" + radius + \" 0 0 \" + (vDir * hDir === 1 ? 0 : 1) + \" \" + (p2.x + radius * hDir) + \" \" + p3.y + \" H \" + p3.x;\n        }\n      } else if (lineType === 'line') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x + \" L \" + p3.x + \" \" + p3.y;\n      }\n\n      curves.push(createElement(\"path\", {\n        key: \"link-\" + key,\n        d: curve,\n        strokeWidth: linkStyle.lineWidth,\n        stroke: linkStyle.lineColor,\n        fill: \"none\"\n      }));\n    });\n    this.setState({\n      curves: curves\n    });\n  };\n\n  TopicSubLinks.prototype.render = function () {\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n    return createElement(TopicLinksSvg, {\n      ref: saveRef(linksSvgRefKey(topicKey))\n    }, createElement(\"g\", null, this.state.curves));\n  };\n\n  return TopicSubLinks;\n}(BaseWidget);\n\nvar templateObject_1$d;\nvar log$c = debug('node:topic-widget');\nvar Node = styled.div(templateObject_1$e || (templateObject_1$e = __makeTemplateObject([\"\\n  display: flex;\\n  align-items: center;\\n  flex-direction: \", \";\\n\"], [\"\\n  display: flex;\\n  align-items: center;\\n  flex-direction: \", \";\\n\"])), function (props) {\n  return props.topicDirection === TopicDirection.RIGHT ? 'row' : 'row-reverse';\n}); // TODO\n\nvar NodeChildren = styled.div(templateObject_2$8 || (templateObject_2$8 = __makeTemplateObject([\"\\n  position: relative;\\n  padding: \", \";\\n\"], [\"\\n  position: relative;\\n  padding: \", \";\\n\"])), function (props) {\n  return props.dir === TopicDirection.RIGHT ? \"0 0 0 \" + props.marginH + \"px\" : \"0 \" + props.marginH + \"px 0 0\";\n});\nvar NodeTopic = styled.div(templateObject_3$3 || (templateObject_3$3 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n\\n  flex-direction: \", \";\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n\\n  flex-direction: \", \";\\n\"])), function (props) {\n  return props.topicDirection === TopicDirection.RIGHT ? 'row' : 'row-reverse';\n});\n\nvar TopicWidget =\n/** @class */\nfunction (_super) {\n  __extends(TopicWidget, _super);\n\n  function TopicWidget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TopicWidget.prototype.renderSubTopics = function () {\n    var props = this.props;\n    var controller = props.controller,\n        model = props.model,\n        topicKey = props.topicKey,\n        dir = props.dir;\n    var topics = model.getTopic(topicKey).subKeys.toArray();\n    var res = controller.run('createSubTopics', __assign(__assign({}, props), {\n      topics: topics\n    }));\n    if (!res) return null;\n    var subTopics = res.subTopics;\n    var subLinks = controller.run('renderSubLinks', props);\n    return createElement(NodeChildren, {\n      dir: dir,\n      marginH: model.config.theme.marginH\n    }, subTopics, \" \", subLinks);\n  }; // componentDidUpdate(): void {\n  //   this.layoutLinks();\n  // }\n  //\n  // componentDidMount(): void {\n  //   this.layoutLinks();\n  // }\n\n\n  TopicWidget.prototype.layoutLinks = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        topicKey = _a.topicKey,\n        model = _a.model;\n    var topic = model.getTopic(topicKey);\n    if (topic.subKeys.size === 0 || topic.collapse) return;\n    log$c('layoutLinks', topicKey);\n    var links = getRef(linksRefKey(topicKey));\n    links && links.layout();\n  };\n\n  TopicWidget.prototype.render = function () {\n    var props = this.props;\n    var controller = props.controller,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        saveRef = props.saveRef;\n    log$c('render', topicKey);\n    var topicStyle = controller.run('getTopicContentStyle', props);\n\n    var propsMore = __assign(__assign({}, props), {\n      topicStyle: topicStyle\n    });\n\n    var topicContent = controller.run('renderTopicContent', propsMore);\n    return createElement(Node, {\n      topicDirection: dir\n    }, createElement(NodeTopic, {\n      topicDirection: dir,\n      ref: saveRef(topicRefKey(topicKey))\n    }, topicContent), this.renderSubTopics());\n  };\n\n  return TopicWidget;\n}(Component);\n\nvar templateObject_1$e, templateObject_2$8, templateObject_3$3;\nvar log$d = debug('node:view-port-viewer');\nvar ViewerRoot = styled(ZIndex)(templateObject_1$f || (templateObject_1$f = __makeTemplateObject([\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  bottom: 20px;\\n  border-radius: 2px;\\n  display: flex;\\n  flex-direction: row;\\n  user-select: none;\\n\"], [\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  bottom: 20px;\\n  border-radius: 2px;\\n  display: flex;\\n  flex-direction: row;\\n  user-select: none;\\n\"])));\nvar Item_ = styled(Btn)(templateObject_2$9 || (templateObject_2$9 = __makeTemplateObject([\"\\n  margin: 10px;\\n\"], [\"\\n  margin: 10px;\\n\"])));\nvar ZoomFactorSpan = styled.span(templateObject_3$4 || (templateObject_3$4 = __makeTemplateObject([\"\\n  display: inline-block;\\n  width: 80px;\\n  height: 18px;\\n\"], [\"\\n  display: inline-block;\\n  width: 80px;\\n  height: 18px;\\n\"])));\n\nvar Item = function (props) {\n  return createElement(Tooltip, {\n    content: props.tooltip,\n    position: Position.TOP,\n    className: Classes.ICON\n  }, createElement(Item_, {\n    onClick: props.onClick,\n    tabIndex: -1\n  }, props.children));\n};\n\nvar ViewPortViewer =\n/** @class */\nfunction (_super) {\n  __extends(ViewPortViewer, _super);\n\n  function ViewPortViewer(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.zoomFactorChange = function (zoomFactor) {\n      log$d('zoomFactorChange', zoomFactor);\n\n      _this.setState({\n        zoomFactor: zoomFactor\n      });\n    };\n\n    _this.onClickResetZoom = function (e) {\n      var props = _this.props;\n      var controller = props.controller;\n      controller.run('setZoomFactor', __assign(__assign({}, props), {\n        zoomFactor: 1\n      }));\n    };\n\n    _this.onClickAddZoom = function (e) {\n      var props = _this.props;\n      var controller = props.controller;\n      var zoomFactor = controller.run('getZoomFactor', props);\n      controller.run('setZoomFactor', __assign(__assign({}, props), {\n        zoomFactor: zoomFactor + 0.1\n      }));\n    };\n\n    _this.onClickMinusZoom = function (e) {\n      var props = _this.props;\n      var controller = props.controller;\n      var zoomFactor = controller.run('getZoomFactor', props);\n      controller.run('setZoomFactor', __assign(__assign({}, props), {\n        zoomFactor: zoomFactor - 0.1\n      }));\n    };\n\n    _this.onClickCollapseAll = function (e) {\n      var props = _this.props;\n      var controller = props.controller;\n      controller.run('addEventListener', __assign(__assign({}, props), {\n        key: EventKey.CENTER_ROOT_TOPIC,\n        listener: _this.centerRootTopic,\n        once: true\n      }));\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.COLLAPSE_ALL\n      }));\n    };\n\n    _this.onClickExpandAll = function (e) {\n      var props = _this.props;\n      var controller = props.controller;\n      controller.run('addEventListener', __assign(__assign({}, props), {\n        key: EventKey.CENTER_ROOT_TOPIC,\n        listener: _this.centerRootTopic,\n        once: true\n      }));\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.EXPAND_ALL\n      }));\n    };\n\n    _this.centerRootTopic = function () {\n      var _a = _this.props,\n          model = _a.model,\n          controller = _a.controller;\n      controller.run('moveTopicToCenter', __assign(__assign({}, _this.props), {\n        topicKey: model.editorRootTopicKey\n      }));\n    };\n\n    return _this;\n  }\n\n  ViewPortViewer.prototype.componentDidMount = function () {\n    var props = this.props;\n    var controller = props.controller;\n    controller.run('addZoomFactorChangeEventListener', __assign(__assign({}, props), {\n      listener: this.zoomFactorChange\n    }));\n  };\n\n  ViewPortViewer.prototype.componentWillUnmount = function () {\n    var props = this.props;\n    var controller = props.controller;\n    controller.run('removeZoomFactorChangeEventListener', __assign(__assign({}, props), {\n      listener: this.zoomFactorChange\n    }));\n  };\n\n  ViewPortViewer.prototype.render = function () {\n    log$d('render');\n    var props = this.props;\n    var controller = props.controller,\n        zIndex = props.zIndex;\n    var zoomFactor = controller.run('getZoomFactor', props);\n    return createElement(ViewerRoot, {\n      zIndex: zIndex\n    }, createElement(Item, {\n      onClick: this.onClickCollapseAll,\n      tooltip: \"collapse all\"\n    }, Icon(IconName.COLLAPSE_ALL)), createElement(Item, {\n      onClick: this.onClickExpandAll,\n      tooltip: \"expand all\"\n    }, Icon(IconName.EXPAND_ALL)), createElement(Item, {\n      onClick: this.centerRootTopic,\n      tooltip: \"center root topic\"\n    }, Icon(IconName.CENTER)), createElement(Item, {\n      onClick: this.onClickMinusZoom,\n      tooltip: \"zoom in\"\n    }, Icon(IconName.MINUS)), createElement(Item, {\n      onClick: this.onClickResetZoom,\n      tooltip: \"reset zoom\"\n    }, createElement(ZoomFactorSpan, null, \"zoom:\" + Math.floor(zoomFactor * 100) + \"%\")), createElement(Item, {\n      onClick: this.onClickAddZoom,\n      tooltip: \"zoom out\"\n    }, Icon(IconName.PLUS)));\n  };\n\n  return ViewPortViewer;\n}(BaseWidget);\n\nvar templateObject_1$f, templateObject_2$9, templateObject_3$4;\nvar DescEditorWrapper = styled.div(templateObject_1$g || (templateObject_1$g = __makeTemplateObject([\"\\n  overflow: auto;\\n  padding: 0px 0px 0px 20px;\\n  background: #88888850;\\n\"], [\"\\n  overflow: auto;\\n  padding: 0px 0px 0px 20px;\\n  background: #88888850;\\n\"])));\n\nfunction renderDrawer(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey;\n\n  if (model.focusMode === FocusMode.EDITING_DESC) {\n    var onDescEditorClose = function (e) {\n      e.stopPropagation();\n      var key = \"topic-desc-data-\" + topicKey;\n      var descData = controller.run('deleteTempValue', {\n        key: key\n      });\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.SET_TOPIC_BLOCK,\n        topicKey: topicKey,\n        blockType: BlockType.DESC,\n        data: descData,\n        focusMode: FocusMode.NORMAL\n      }));\n    };\n\n    var descEditor = controller.run('renderTopicDescEditor', props);\n    return createElement(Drawer, {\n      key: \"drawer\",\n      title: \"Edit Notes\",\n      icon: Icon('note'),\n      isOpen: true,\n      hasBackdrop: true,\n      backdropProps: {\n        onMouseDown: cancelEvent\n      },\n      isCloseButtonShown: false,\n      onClose: onDescEditorClose,\n      size: \"70%\"\n    }, createElement(DescEditorWrapper, null, descEditor));\n  }\n}\n\nvar templateObject_1$g; //TODO 是否需要themeProvider\n\nfunction Theme(_a) {\n  var theme = _a.theme,\n      children = _a.children;\n  return (//@ts-ignore\n    createElement(ThemeProvider, {\n      theme: theme\n    }, createElement(Fragment, null, children))\n  );\n}\n\nvar log$e = debug('plugin:rendering');\n\nfunction RenderingPlugin() {\n  var DiagramRoot = styled.div(templateObject_1$h || (templateObject_1$h = __makeTemplateObject([\"\\n    width: 100%;\\n    height: 100%;\\n    background: \", \";\\n    position: relative;\\n  \"], [\"\\n    width: 100%;\\n    height: 100%;\\n    background: \", \";\\n    position: relative;\\n  \"])), function (props) {\n    return props.theme.background;\n  });\n  var diagramProps;\n  return {\n    getDiagramProps: function () {\n      return diagramProps;\n    },\n    renderDiagram: function (props) {\n      var model = props.model,\n          controller = props.controller;\n      return createElement(SaveRef, null, function (saveRef, getRef, deleteRef) {\n        diagramProps = __assign(__assign({}, props), {\n          saveRef: saveRef,\n          getRef: getRef,\n          deleteRef: deleteRef\n        });\n        log$e('renderDiagram', model);\n        return createElement(Theme, {\n          theme: model.config.theme\n        }, createElement(DiagramRoot, {\n          ref: saveRef(RefKey.DIAGRAM_ROOT_KEY)\n        }, createElement(MindDragScrollWidget, __assign({}, diagramProps)), controller.run('renderDiagramCustomize', diagramProps)));\n      });\n    },\n    renderDrawer: renderDrawer,\n    renderDiagramCustomize: function (props) {\n      var controller = props.controller,\n          model = props.model;\n      var zIndex = controller.getValue(PropKey.DIAGRAM_CUSTOMIZE_BASE_Z_INDEX);\n\n      var nProps = __assign(__assign({}, props), {\n        zIndex: zIndex,\n        topicKey: model.focusKey\n      });\n\n      var breadcrumbs = controller.run('renderEditorRootBreadcrumbs', nProps); // const styleEditor = controller.run('renderStyleEditor', nProps);\n\n      var rightTopPanel = controller.run('renderRightTopPanel', nProps);\n      var modals = controller.run('renderModals', __assign(__assign({}, nProps), {\n        zIndex: zIndex + 1\n      }));\n      var drawer = controller.run('renderDrawer', __assign(__assign({}, nProps), {\n        zIndex: zIndex + 1\n      }));\n      var viewportViewer = controller.run('renderViewPortViewer', nProps);\n      return [breadcrumbs, rightTopPanel, modals, drawer, viewportViewer];\n    },\n    renderEditorRootBreadcrumbs: function (props) {\n      return createElement(EditorRootBreadcrumbs, __assign({\n        key: \"EditorRootBreadcrumbs\"\n      }, props));\n    },\n    renderModals: function (props) {\n      return createElement(Modals, __assign({\n        key: \"modals\"\n      }, props));\n    },\n    renderModal: function (props) {\n      return null;\n    },\n    getActiveModalProps: function (props) {\n      return null;\n    },\n    renderDoc: function (_a) {\n      var children = _a.children;\n      return children;\n    },\n    renderRootWidget: function (props) {\n      return createElement(RootWidget, __assign({}, props));\n    },\n    renderTopicWidget: function (props) {\n      return createElement(TopicWidget, __assign({}, props));\n    },\n    renderTopicContent: function (props) {\n      return createElement(TopicContentWidget, __assign({}, props));\n    },\n    renderTopicCollapseIcon: function (props) {\n      return createElement(TopicCollapseIcon, __assign({}, props));\n    },\n    renderTopicContentOthers: function (props) {\n      return [];\n    },\n    renderTopicBlocks: function (props) {\n      var model = props.model,\n          topicKey = props.topicKey,\n          controller = props.controller;\n      var topic = model.getTopic(topicKey);\n      var blocks = topic.blocks;\n      var res = [];\n      var i = 0;\n      blocks.forEach(function (block) {\n        var b = controller.run('renderTopicBlock', __assign(__assign({}, props), {\n          block: block,\n          blockKey: \"block-\" + i\n        }));\n\n        if (b) {\n          res.push(createElement(Fragment, {\n            key: \"block-\" + i\n          }, b));\n          i++;\n        }\n      });\n      return res;\n    },\n    renderTopicBlock: function (props) {\n      var controller = props.controller,\n          block = props.block;\n\n      switch (block.type) {\n        case BlockType.CONTENT:\n          return controller.run('renderTopicBlockContent', props);\n\n        case BlockType.DESC:\n          return controller.run('renderTopicBlockDesc', props);\n      }\n\n      return null;\n    },\n    renderTopicBlockContent: function (props) {\n      return createElement(TopicContent, __assign({}, props));\n    },\n    renderTopicBlockDesc: function (props) {\n      return createElement(TopicDesc, __assign({}, props));\n    },\n    renderSubLinks: function (props) {\n      var saveRef = props.saveRef,\n          topicKey = props.topicKey,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      if (topic.subKeys.size === 0 || topic.collapse) return null;\n      return createElement(TopicSubLinks, __assign({\n        ref: saveRef(linksRefKey(topicKey))\n      }, props));\n    },\n    renderRootSubLinks: function (props) {\n      // log('renderRootSubLinks');\n      var saveRef = props.saveRef,\n          topicKey = props.topicKey; // 这里逻辑有问题,会导致layout 错误\n      // const topic = model.getTopic(topicKey);\n      // if (topic.subKeys.size === 0) return null;\n\n      return createElement(RootSubLinks, __assign({\n        ref: saveRef(linksRefKey(topicKey))\n      }, props));\n    },\n    renderFocusItemHighlight: function (props) {\n      var saveRef = props.saveRef;\n      return createElement(TopicHighlight, __assign({\n        ref: saveRef(RefKey.FOCUS_HIGHLIGHT_KEY)\n      }, props));\n    },\n    renderRootWidgetOtherChildren: function (props) {\n      var controller = props.controller;\n      var zoomFactor = controller.run('getZoomFactor', props);\n      props = __assign(__assign({}, props), {\n        zoomFactor: zoomFactor\n      });\n      return createElement(Fragment, null, controller.run('renderRootSubLinks', props), controller.run('renderFocusItemHighlight', props), controller.run('renderDragAndDropEffect', props));\n    },\n    renderViewPortViewer: function (props) {\n      return createElement(ViewPortViewer, __assign({\n        key: \"view-port-viewer\"\n      }, props));\n    }\n  };\n}\n\nvar templateObject_1$h;\nvar PanelRoot = styled(ZIndex)(templateObject_1$i || (templateObject_1$i = __makeTemplateObject([\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n  user-select: none;\\n\"], [\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n  user-select: none;\\n\"])));\nvar StyledTabs = styled(Tabs)(templateObject_2$a || (templateObject_2$a = __makeTemplateObject([\"\\n  padding: 0px 10px;\\n\"], [\"\\n  padding: 0px 10px;\\n\"])));\n\nfunction RightTopPanel(props) {\n  var controller = props.controller,\n      zIndex = props.zIndex,\n      selectedTabId = props.selectedTabId,\n      handleTabIdChange = props.handleTabIdChange;\n\n  var _a = __read(useState(false), 2),\n      expand = _a[0],\n      setExpand = _a[1];\n\n  if (!expand) {\n    return createElement(PanelRoot, {\n      zIndex: zIndex\n    }, createElement(IconBg, {\n      onClick: function () {\n        return setExpand(true);\n      }\n    }, createElement(ShowMenuIcon, {\n      className: iconClassName(IconName.SHOW_MENU)\n    })));\n  }\n\n  return createElement(PanelRoot, {\n    zIndex: zIndex\n  }, createElement(Title, null, createElement(CloseIcon, {\n    className: iconClassName(IconName.CLOSE),\n    onClick: function () {\n      return setExpand(false);\n    }\n  })), createElement(StyledTabs, {\n    id: selectedTabId,\n    onChange: handleTabIdChange\n  }, controller.run('renderRightTopPanelTabs', props)));\n}\n\nvar templateObject_1$i, templateObject_2$a;\nvar SettingTitle = styled.div(templateObject_1$j || (templateObject_1$j = __makeTemplateObject([\"\\n  margin-top: 10px;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n\"], [\"\\n  margin-top: 10px;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n\"])));\nvar SettingItem = styled.span(templateObject_2$b || (templateObject_2$b = __makeTemplateObject([\"\\n  margin: 0px 10px 0px 0px;\\n\"], [\"\\n  margin: 0px 10px 0px 0px;\\n\"])));\nvar SettingBoxContainer = styled.div(templateObject_3$5 || (templateObject_3$5 = __makeTemplateObject([\"\\n  padding: 10px;\\n  margin: 0 0 10px 0;\\n  border: rgba(16, 22, 26, 0.15) solid 1px;\\n  border-radius: 5px;\\n\"], [\"\\n  padding: 10px;\\n  margin: 0 0 10px 0;\\n  border: rgba(16, 22, 26, 0.15) solid 1px;\\n  border-radius: 5px;\\n\"])));\nvar SettingLabel = styled(SettingItem)(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([\"\"], [\"\"])));\nvar SettingRow = styled.div(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject([\"\\n  display: flex;\\n  align-items: center;\\n  //justify-content: center;\\n  margin: 5px 0;\\n\"], [\"\\n  display: flex;\\n  align-items: center;\\n  //justify-content: center;\\n  margin: 5px 0;\\n\"])));\nvar ColorBar = styled.div(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject([\"\\n  height: 3px;\\n  width: 80%;\\n  margin-left: 10%;\\n  margin-right: 10%;\\n  margin-bottom: 2px;\\n  background: \", \";\\n\"], [\"\\n  height: 3px;\\n  width: 80%;\\n  margin-left: 10%;\\n  margin-right: 10%;\\n  margin-bottom: 2px;\\n  background: \", \";\\n\"])), function (props) {\n  return props.color;\n});\nvar WithBorder = styled.div(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject([\"\\n  border: 1px solid grey;\\n  cursor: pointer;\\n  font-weight: bold;\\n\"], [\"\\n  border: 1px solid grey;\\n  cursor: pointer;\\n  font-weight: bold;\\n\"])));\nvar templateObject_1$j, templateObject_2$b, templateObject_3$5, templateObject_4$1, templateObject_5$1, templateObject_6$1, templateObject_7$1;\n\nfunction SettingGroup(props) {\n  return createElement(\"div\", null, props.children, createElement(Divider, {\n    style: {\n      margin: '10px 0'\n    }\n  }));\n}\n\nfunction SettingItemColorPicker(props) {\n  var color = props.color,\n      handleColorChange = props.handleColorChange;\n  return createElement(SettingItem, null, createElement(Popover, null, createElement(WithBorder, null, createElement(\"div\", {\n    className: iconClassName(IconName.COLOR_PICKER)\n  }), createElement(ColorBar, {\n    color: color\n  })), createElement(\"div\", null, createElement(SketchPicker, {\n    color: color,\n    onChangeComplete: function (color) {\n      return handleColorChange(color.hex);\n    }\n  }))));\n}\n\nfunction SettingItemButton(props) {\n  var title = props.title,\n      handleClick = props.handleClick;\n  return createElement(SettingItem, null, createElement(Button, {\n    onClick: handleClick\n  }, title));\n}\n\nfunction SettingItemNumericInput(props) {\n  var _a = props.layout,\n      layout = _a === void 0 ? 'h' : _a,\n      title = props.title,\n      restProps = __rest(props, [\"layout\", \"title\"]);\n\n  var flexProps = {\n    flexDirection: layout === 'h' ? 'row' : 'column',\n    alignItems: 'center'\n  };\n  return createElement(SettingItem, null, createElement(Flex, __assign({}, flexProps), createElement(Margin, {\n    margin: \"0 5px 0 0\"\n  }, title), createElement(NumericInput, __assign({}, restProps))));\n}\n\nfunction SettingItemSelect(props) {\n  var text = props.text,\n      items = props.items,\n      itemRenderer = props.itemRenderer,\n      onItemSelect = props.onItemSelect;\n  var PxSelect = Select.ofType();\n  var pxProps = {\n    items: items,\n    itemRenderer: itemRenderer,\n    onItemSelect: onItemSelect,\n    filterable: false\n  };\n  return createElement(SettingItem, null, createElement(PxSelect, __assign({}, pxProps), createElement(Button, {\n    text: text\n  })));\n}\n\nvar renderItem = function (unit) {\n  return function (width, _a) {\n    var handleClick = _a.handleClick;\n    return createElement(MenuItem, {\n      text: \"\" + width + unit,\n      key: width,\n      onClick: handleClick\n    });\n  };\n};\n\nvar PxSelect = Select.ofType();\n\nvar borderWidthItems = __spread(Array(7).keys());\n\nvar borderWidthItems$1 = __spread(Array(7).keys());\n\nvar borderRadiusItems = [0, 5, 10, 15, 20, 25, 30, 35];\nvar borderStyleItems = ['none', 'solid', 'dotted', 'dashed', 'double'];\n\nfunction BorderStyleEditor(props) {\n  var contentStyle = props.contentStyle,\n      setContentStyle = props.setContentStyle;\n\n  var handleBorderWidthChange = function (value) {\n    // log('handleBorderWithChange:', value);\n    setContentStyle({\n      borderWidth: value + \"px\"\n    });\n  };\n\n  var handleBorderStyleChange = function (value) {\n    setContentStyle({\n      borderStyle: value\n    });\n  };\n\n  var handleBorderRadiusChange = function (value) {\n    // log('handleBorderRadiusChange:', value);\n    setContentStyle({\n      borderRadius: value + \"px\"\n    });\n  };\n\n  var handleBorderColorChange = function (color) {\n    setContentStyle({\n      borderColor: color\n    });\n  };\n\n  return createElement(SettingGroup, null, createElement(SettingTitle, null, \"Border\"), createElement(\"div\", null, createElement(SettingItemSelect, {\n    text: \"width: \" + (contentStyle.borderWidth ? contentStyle.borderWidth : '0px'),\n    items: borderWidthItems$1,\n    itemRenderer: renderItem('px'),\n    onItemSelect: handleBorderWidthChange\n  }), createElement(SettingItemSelect, {\n    text: \"style: \" + (contentStyle.borderStyle ? contentStyle.borderStyle : 'none'),\n    items: borderStyleItems,\n    itemRenderer: renderItem(''),\n    onItemSelect: handleBorderStyleChange\n  }), createElement(SettingItemSelect, {\n    text: \"radius: \" + contentStyle.borderRadius,\n    items: borderRadiusItems,\n    itemRenderer: renderItem('px'),\n    onItemSelect: handleBorderRadiusChange\n  }), createElement(SettingItemColorPicker, {\n    color: contentStyle.borderColor,\n    handleColorChange: handleBorderColorChange\n  })));\n}\n\nfunction ClearAllCustomStyle(props) {\n  var controller = props.controller;\n\n  var handleClearAllCustomStyle = function (e) {\n    controller.run('clearAllCustomStyle', props);\n  };\n\n  return createElement(SettingGroup, null, createElement(SettingItem, null, createElement(Button, {\n    onClick: handleClearAllCustomStyle\n  }, \"Clear All Custom Styles\")));\n}\n\nvar lineTypes = ['curve', 'round', 'line'];\n\nvar renderLineTypeItem = function (lineType, _a) {\n  var handleClick = _a.handleClick,\n      modifiers = _a.modifiers,\n      query = _a.query;\n  return createElement(MenuItem, {\n    text: \"\" + lineType,\n    key: lineType,\n    onClick: handleClick\n  });\n};\n\nfunction LinkStyleEditor(props) {\n  var _a = props.showLinkStyle,\n      showLinkStyle = _a === void 0 ? true : _a,\n      _b = props.showSubLinkStyle,\n      showSubLinkStyle = _b === void 0 ? true : _b,\n      _c = props.linkStyle,\n      linkStyle = _c === void 0 ? {} : _c,\n      _d = props.subLinkStyle,\n      subLinkStyle = _d === void 0 ? {} : _d,\n      setLinkStyle = props.setLinkStyle,\n      setSubLinkStyle = props.setSubLinkStyle;\n\n  var handleLinkWidthChange = function (value) {\n    setLinkStyle({\n      lineWidth: value + \"px\"\n    });\n  };\n\n  var handleLinkTypeChange = function (value) {\n    setLinkStyle({\n      lineType: value\n    });\n  };\n\n  var handleLinkColorChange = function (color) {\n    setLinkStyle({\n      lineColor: color\n    });\n  };\n\n  var handleSubLinkWidthChange = function (value) {\n    setSubLinkStyle({\n      lineWidth: value + \"px\"\n    });\n  };\n\n  var handleSubLinkTypeChange = function (value) {\n    setSubLinkStyle({\n      lineType: value\n    });\n  };\n\n  var handleSubLinkColorChange = function (color) {\n    setSubLinkStyle({\n      lineColor: color\n    });\n  };\n\n  return createElement(SettingGroup, null, createElement(SettingTitle, null, \"Link\"), showLinkStyle && createElement(SettingRow, {\n    alignItems: \"center\"\n  }, createElement(Margin, {\n    margin: \"0 5px 0 0\"\n  }, \"LinkToParent: \"), createElement(SettingItemSelect, {\n    text: \"width: \" + (linkStyle ? linkStyle.lineWidth : '0px'),\n    items: borderWidthItems,\n    itemRenderer: renderItem('px'),\n    onItemSelect: handleLinkWidthChange\n  }), createElement(SettingItemSelect, {\n    text: \"lineType: \" + linkStyle.lineType,\n    items: lineTypes,\n    itemRenderer: renderLineTypeItem,\n    onItemSelect: handleLinkTypeChange\n  }), createElement(SettingItemColorPicker, {\n    color: linkStyle.lineColor,\n    handleColorChange: handleLinkColorChange\n  })), showSubLinkStyle && createElement(SettingRow, {\n    alignItems: \"center\"\n  }, createElement(Margin, {\n    margin: \"0 5px 0 0\"\n  }, \"SubLinks: \"), createElement(SettingItemSelect, {\n    text: \"width: \" + (subLinkStyle ? subLinkStyle.lineWidth : '0px'),\n    items: borderWidthItems,\n    itemRenderer: renderItem('px'),\n    onItemSelect: handleSubLinkWidthChange\n  }), createElement(SettingItemSelect, {\n    text: \"lineType: \" + subLinkStyle.lineType,\n    items: lineTypes,\n    itemRenderer: renderLineTypeItem,\n    onItemSelect: handleSubLinkTypeChange\n  }), createElement(SettingItemColorPicker, {\n    color: subLinkStyle.lineColor,\n    handleColorChange: handleSubLinkColorChange\n  })));\n}\n\nfunction TextStyleEditor(props) {\n  var contentStyle = props.contentStyle,\n      setContentStyle = props.setContentStyle;\n\n  var handleFontSizeChange = function (value) {\n    // log('handleFontSizeChange:', value);\n    setContentStyle({\n      fontSize: value\n    });\n  };\n\n  var handleLineHeightChange = function (e) {\n    // log('handleLineHeightChange:', e.target.value);\n    setContentStyle({\n      lineHeight: e.target.value\n    });\n  };\n\n  var handleColorChange = function (color) {\n    setContentStyle({\n      color: color\n    });\n  };\n\n  var fontSizeNumInputProps = {\n    title: 'FontSize:',\n    min: 12,\n    max: 100,\n    value: parseInt(contentStyle.fontSize),\n    style: {\n      width: 50\n    },\n    onValueChange: handleFontSizeChange\n  };\n  var lineHeightInputProps = {\n    style: {\n      width: 50\n    },\n    value: contentStyle.lineHeight || '',\n    onChange: handleLineHeightChange\n  };\n  return createElement(SettingGroup, null, createElement(SettingTitle, null, \"Text Editor\"), createElement(Flex, null, createElement(SettingItemNumericInput, __assign({}, fontSizeNumInputProps)), createElement(SettingItem, null, createElement(Flex, {\n    alignItems: \"center\"\n  }, createElement(Margin, {\n    margin: \"0 5px 0 0\"\n  }, \"LineHeight: \"), createElement(InputGroup, __assign({}, lineHeightInputProps)))), createElement(SettingItemColorPicker, {\n    color: contentStyle.color,\n    handleColorChange: handleColorChange\n  })));\n}\n\nvar log$f = debug('node:style-editor');\nvar copiedStyle;\n\nfunction StyleEditor(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey;\n  var topic = model.getTopic(topicKey);\n\n  var setContentStyle = function (style) {\n    controller.run('setTopicContentStyle', __assign(__assign({}, props), {\n      style: style\n    }));\n  };\n\n  var handleBackgroundColorChange = function (color) {\n    setContentStyle({\n      background: color\n    });\n  };\n\n  var handleClearStyle = function () {\n    if (topic.style) {\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.SET_STYLE,\n        style: null\n      }));\n    }\n  };\n\n  var handleCopyStyle = function () {\n    copiedStyle = controller.run('getTopicStyle', props);\n    log$f(copiedStyle);\n  };\n\n  var handlePasteStyle = function () {\n    if (copiedStyle) {\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.SET_STYLE,\n        style: JSON.stringify(copiedStyle)\n      }));\n    }\n  };\n\n  if (!model.focusKey) return null;\n  var contentStyle = controller.run('getTopicContentStyle', props);\n  var linkStyle = controller.run('getLinkStyle', props);\n  var subLinkStyle = controller.run('getSubLinkStyle', props);\n\n  var setLinkStyle = function (linkStyle) {\n    controller.run('setLinkStyle', __assign(__assign({}, props), {\n      linkStyle: linkStyle\n    }));\n  };\n\n  var setSubLinkStyle = function (subLinkStyle) {\n    controller.run('setSubLinkStyle', __assign(__assign({}, props), {\n      subLinkStyle: subLinkStyle\n    }));\n  };\n\n  var linkStyleEditorProps = {\n    linkStyle: linkStyle,\n    subLinkStyle: subLinkStyle,\n    setLinkStyle: setLinkStyle,\n    setSubLinkStyle: setSubLinkStyle\n  };\n  var contentStyleEditorPros = {\n    contentStyle: contentStyle,\n    setContentStyle: setContentStyle\n  };\n  return createElement(PanelTabRoot, null, createElement(BorderStyleEditor, __assign({}, contentStyleEditorPros)), createElement(TextStyleEditor, __assign({}, contentStyleEditorPros)), createElement(SettingGroup, null, createElement(SettingTitle, null, \"Background\"), createElement(SettingItemColorPicker, {\n    color: contentStyle.background,\n    handleColorChange: handleBackgroundColorChange\n  })), createElement(LinkStyleEditor, __assign({}, linkStyleEditorProps)), createElement(SettingGroup, null, createElement(SettingItemButton, {\n    title: \"Clear Topic Style\",\n    handleClick: handleClearStyle\n  }), createElement(SettingItemButton, {\n    title: \"Copy Style\",\n    handleClick: handleCopyStyle\n  }), createElement(SettingItemButton, {\n    title: \"Paste Style\",\n    handleClick: handlePasteStyle\n  })), ClearAllCustomStyle(props));\n}\n/** Event handler that exposes the target element's value as a boolean. */\n\n\nfunction handleBooleanChange(handler) {\n  return function (event) {\n    return handler(event.target.checked);\n  };\n}\n\nvar expand = require('css-shorthand-expand');\n\nfunction PaddingStyleEditor(props) {\n  var contentStyle = props.contentStyle,\n      setContentStyle = props.setContentStyle;\n  var padding = expand('padding', contentStyle.padding || '0');\n  var commonProps = {\n    layout: 'v',\n    min: 0,\n    max: 99,\n    style: {\n      width: 38\n    }\n  };\n  var top = parseInt(padding['padding-top']);\n  var right = parseInt(padding['padding-right']);\n  var bottom = parseInt(padding['padding-bottom']);\n  var left = parseInt(padding['padding-left']);\n  var p = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n\n  var setPadding = function (dir) {\n    return function (v) {\n      var _a;\n\n      setContentStyle({\n        padding: paddingCss(__assign(__assign({}, p), (_a = {}, _a[dir] = v, _a)))\n      });\n    };\n  };\n\n  var topProps = __assign(__assign({}, commonProps), {\n    title: 'top',\n    value: top,\n    onValueChange: setPadding('top')\n  });\n\n  var rightProps = __assign(__assign({}, commonProps), {\n    title: 'right',\n    value: right,\n    onValueChange: setPadding('right')\n  });\n\n  var bottomProps = __assign(__assign({}, commonProps), {\n    title: 'bottom',\n    value: bottom,\n    onValueChange: setPadding('bottom')\n  });\n\n  var leftProps = __assign(__assign({}, commonProps), {\n    title: 'left',\n    value: left,\n    onValueChange: setPadding('left')\n  });\n\n  return createElement(SettingGroup, null, createElement(SettingTitle, null, \"Padding\"), createElement(SettingRow, null, createElement(SettingItemNumericInput, __assign({}, topProps)), createElement(SettingItemNumericInput, __assign({}, rightProps)), createElement(SettingItemNumericInput, __assign({}, bottomProps)), createElement(SettingItemNumericInput, __assign({}, leftProps))));\n}\n\nvar TopicThemeEditorRoot = styled.div(templateObject_1$k || (templateObject_1$k = __makeTemplateObject([\"\\n  height: 250px;\\n  overflow: auto;\\n\"], [\"\\n  height: 250px;\\n  overflow: auto;\\n\"])));\n\nfunction TopicThemeEditor(props) {\n  var topicStyle = props.topicStyle,\n      setTopicStyle = props.setTopicStyle;\n  var _a = topicStyle.contentStyle,\n      contentStyle = _a === void 0 ? {} : _a,\n      _b = topicStyle.linkStyle,\n      linkStyle = _b === void 0 ? {} : _b,\n      _c = topicStyle.subLinkStyle,\n      subLinkStyle = _c === void 0 ? {} : _c;\n\n  var setContentStyle = function (contentStyle) {\n    setTopicStyle({\n      contentStyle: contentStyle\n    });\n  };\n\n  var nProps = {\n    contentStyle: contentStyle,\n    setContentStyle: setContentStyle\n  };\n\n  var setLinkStyle = function (linkStyle) {\n    setTopicStyle({\n      linkStyle: linkStyle\n    });\n  };\n\n  var setSubLinkStyle = function (subLinkStyle) {\n    setTopicStyle({\n      subLinkStyle: subLinkStyle\n    });\n  };\n\n  var linkStyleEditorProps = {\n    showLinkStyle: false,\n    linkStyle: linkStyle,\n    subLinkStyle: subLinkStyle,\n    setLinkStyle: setLinkStyle,\n    setSubLinkStyle: setSubLinkStyle\n  };\n  return createElement(TopicThemeEditorRoot, null, createElement(BorderStyleEditor, __assign({}, nProps)), createElement(PaddingStyleEditor, __assign({}, nProps)), createElement(TextStyleEditor, __assign({}, nProps)), createElement(SettingGroup, null, createElement(SettingTitle, null, \"Background\"), createElement(SettingItemColorPicker, {\n    color: contentStyle.background,\n    handleColorChange: function (color) {\n      setContentStyle({\n        background: color\n      });\n    }\n  })), createElement(LinkStyleEditor, __assign({}, linkStyleEditorProps)));\n}\n\nvar templateObject_1$k;\nvar tabId = 'normal';\n\nfunction ThemeEditor(props) {\n  var _a = __read(useState(false), 2),\n      showExportDialog = _a[0],\n      setShowExportDialog = _a[1];\n\n  var _b = __read(useState(false), 2),\n      alertThemeError = _b[0],\n      setAlertThemeError = _b[1];\n\n  var model = props.model,\n      controller = props.controller;\n  var theme = model.config.theme;\n  var rootTopic = theme.rootTopic,\n      primaryTopic = theme.primaryTopic,\n      normalTopic = theme.normalTopic;\n\n  var setTheme = function (theme) {\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.SET_THEME,\n      theme: clone(theme)\n    }));\n  };\n\n  var handleBackgroundColorChange = function (background) {\n    setTheme(merge(theme, {\n      background: background\n    }));\n  };\n\n  var handleHighlightColorChange = function (highlightColor) {\n    setTheme(merge(theme, {\n      highlightColor: highlightColor\n    }));\n  };\n\n  var handleRandomColorChange = handleBooleanChange(function (randomColor) {\n    setTheme(merge(theme, {\n      randomColor: randomColor\n    }));\n  });\n\n  var setRootTopicStyle = function (style) {\n    setTheme(merge(theme, {\n      rootTopic: style\n    }));\n  };\n\n  var setPrimaryTopicStyle = function (style) {\n    setTheme(merge(theme, {\n      primaryTopic: style\n    }));\n  };\n\n  var setNormalTopicStyle = function (style) {\n    setTheme(merge(theme, {\n      normalTopic: style\n    }));\n  };\n\n  var rootTopicEditorProps = {\n    topicStyle: rootTopic,\n    setTopicStyle: setRootTopicStyle\n  };\n  var rootTopicEditor = createElement(TopicThemeEditor, __assign({}, rootTopicEditorProps));\n  var primaryTopicEditorProps = {\n    topicStyle: primaryTopic,\n    setTopicStyle: setPrimaryTopicStyle\n  };\n  var primaryTopicEditor = createElement(TopicThemeEditor, __assign({}, primaryTopicEditorProps));\n  var normalTopicEditorProps = {\n    topicStyle: normalTopic,\n    setTopicStyle: setNormalTopicStyle\n  };\n  var normalTopicEditor = createElement(TopicThemeEditor, __assign({}, normalTopicEditorProps));\n  var tabsProps = {\n    id: tabId,\n    handleTabIdChange: function (id) {\n      tabId = id;\n    }\n  };\n  var topicThemes = createElement(SettingBoxContainer, null, createElement(Tabs, __assign({}, tabsProps), createElement(Tab, {\n    id: \"normal\",\n    title: \"NormalTopic\",\n    panel: normalTopicEditor\n  }), createElement(Tab, {\n    id: \"primary\",\n    title: \"PrimaryTopic\",\n    panel: primaryTopicEditor\n  }), createElement(Tab, {\n    id: \"root\",\n    title: \"RootTopic\",\n    panel: rootTopicEditor\n  })));\n\n  var handleExportTheme = function (e) {\n    // setShowExportDialog(true);\n    var text = JSON.stringify(theme);\n    browserDownloadText(text, 'blink-mind-theme.json');\n  };\n\n  var handleImportTheme = function (e) {\n    browserOpenFile('.json,.txt').then(function (txt) {\n      var t = JSON.parse(txt);\n\n      if (!isThemeType(t)) {\n        setAlertThemeError(true);\n        return;\n      }\n\n      setTheme(t);\n    });\n  };\n\n  var alertProps = {\n    isOpen: alertThemeError,\n    onClose: function (e) {\n      setAlertThemeError(false);\n    }\n  };\n  var alert = createElement(Alert, __assign({}, alertProps), createElement(\"p\", null, \"File format error\"));\n  return createElement(PanelTabRoot, null, createElement(SettingGroup, null, createElement(SettingTitle, null, \"Global\"), createElement(SettingRow, null, createElement(SettingLabel, null, \"Background:\"), createElement(SettingItemColorPicker, {\n    color: theme.background,\n    handleColorChange: handleBackgroundColorChange\n  }), createElement(SettingLabel, null, \"Highlight:\"), createElement(SettingItemColorPicker, {\n    color: theme.highlightColor,\n    handleColorChange: handleHighlightColorChange\n  }), createElement(SettingLabel, null, \"Random Color:\"), createElement(StyledCheckbox, {\n    checked: theme.randomColor,\n    onChange: handleRandomColorChange\n  }))), topicThemes, createElement(SettingGroup, null, createElement(SettingItemButton, {\n    title: \"Export Theme\",\n    handleClick: handleExportTheme\n  }), createElement(SettingItemButton, {\n    title: \"Import Theme\",\n    handleClick: handleImportTheme\n  })), alert);\n}\n\nfunction RightTopPanelPlugin() {\n  var selectedTabId = 'topic-style';\n\n  var handleTabIdChange = function (tabId) {\n    selectedTabId = tabId;\n  };\n\n  return {\n    renderRightTopPanel: function (props) {\n      var nProps = __assign(__assign({}, props), {\n        key: 'right-top-panel',\n        selectedTabId: selectedTabId,\n        handleTabIdChange: handleTabIdChange\n      });\n\n      return createElement(RightTopPanel, __assign({}, nProps));\n    },\n    renderRightTopPanelTabs: function (props) {\n      var controller = props.controller;\n      var styleEditorTab = controller.run('renderTopicStyleEditor', props);\n      var themeEditorTab = controller.run('renderThemeEditor', props);\n      return [styleEditorTab, themeEditorTab];\n    },\n    renderTopicStyleEditor: function (props) {\n      var tProps = {\n        id: 'topic-style',\n        key: 'topic-style',\n        title: 'TopicStyle',\n        panel: createElement(StyleEditor, __assign({}, props))\n      };\n      return createElement(Tab, __assign({}, tProps));\n    },\n    renderThemeEditor: function (props) {\n      var tProps = {\n        id: 'theme-editor',\n        key: 'theme-editor',\n        title: 'Theme',\n        panel: createElement(ThemeEditor, __assign({}, props))\n      };\n      return createElement(Tab, __assign({}, tProps));\n    }\n  };\n}\n\nvar log$g = debug('plugin:utils');\n\nfunction UtilsPlugin() {\n  var tempValueMap = new Map();\n  var eventListenerMap = new Map();\n  return {\n    addTempValueChangeListener: function (props) {\n      var key = props.key,\n          listener = props.listener;\n\n      if (!eventListenerMap.has(key)) {\n        eventListenerMap.set(key, []);\n      }\n\n      eventListenerMap.get(key).push(listener);\n    },\n    removeTempValueChangeListener: function (props) {\n      var key = props.key,\n          listener = props.listener;\n\n      if (eventListenerMap.has(key)) {\n        eventListenerMap[key] = eventListenerMap.get(key).filter(function (l) {\n          return l !== listener;\n        });\n      }\n    },\n    getTempValue: function (props) {\n      var key = props.key;\n      log$g('getTempValue', key);\n      return tempValueMap.get(key);\n    },\n    setTempValue: function (props) {\n      var e_1, _a;\n\n      var key = props.key,\n          value = props.value;\n      log$g('setTempValue', key);\n      tempValueMap.set(key, value);\n\n      if (eventListenerMap.has(key)) {\n        var listeners = eventListenerMap.get(key);\n\n        try {\n          for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n            var listener = listeners_1_1.value;\n            listener(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    },\n    deleteTempValue: function (props) {\n      var key = props.key;\n      log$g('deleteTempValue', key);\n      var value = tempValueMap.get(key);\n      tempValueMap.delete(key);\n      return value;\n    }\n  };\n}\n\nfunction ReactPlugin(options) {\n  return [RenderingPlugin(), UtilsPlugin(), ContextMenuPlugin(), RightTopPanelPlugin(), DragAndDropPlugin()];\n}\n\nvar log$h = debug('plugin:StylePlugin');\n\nfunction StylePlugin() {\n  var colorMap = new Map();\n  var colorIndex = 0;\n  return {\n    getTopicStyle: function (props) {\n      var controller = props.controller;\n      return {\n        contentStyle: controller.run('getTopicContentStyle', props),\n        linkStyle: controller.run('getLinkStyle', props),\n        subLinkStyle: controller.run('getSubLinkStyle', props)\n      };\n    },\n    getTopicContentStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      log$h('getTopicContentStyle:', topicKey, model);\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      var themeStyle;\n      if (visualLevel === TopicVisualLevel.ROOT) themeStyle = theme.rootTopic;else if (visualLevel === TopicVisualLevel.PRIMARY) themeStyle = theme.primaryTopic;else themeStyle = theme.normalTopic;\n      themeStyle = __assign(__assign({}, theme.contentStyle), themeStyle.contentStyle);\n\n      if (theme.randomColor) {\n        var randomColor = controller.run('getRandomColor', props);\n        themeStyle = __assign(__assign({}, themeStyle), {\n          background: randomColor,\n          borderColor: randomColor,\n          subLinkStyle: __assign(__assign({}, themeStyle.subLinkStyle), {\n            lineColor: randomColor\n          })\n        });\n      }\n\n      var topic = model.getTopic(topicKey);\n\n      if (!topic.style) {\n        return themeStyle;\n      }\n\n      var customStyle = JSON.parse(topic.style);\n      return __assign(__assign({}, themeStyle), customStyle.contentStyle);\n    },\n    getLinkStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      log$h('getLinkStyle', topicKey);\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      var linkStyle = theme.linkStyle;\n      var presetStyle;\n      if (visualLevel === TopicVisualLevel.ROOT) presetStyle = theme.rootTopic.linkStyle;else if (visualLevel === TopicVisualLevel.PRIMARY) presetStyle = theme.primaryTopic.linkStyle;else presetStyle = theme.normalTopic.linkStyle;\n      linkStyle = __assign(__assign({}, linkStyle), presetStyle);\n      var topic = model.getTopic(topicKey);\n\n      if (topic.parentKey != null) {\n        var parentSubLinkStyle = controller.run('getSubLinkStyle', __assign(__assign({}, props), {\n          topicKey: topic.parentKey\n        }));\n        linkStyle = __assign(__assign({}, linkStyle), parentSubLinkStyle);\n      }\n\n      if (!topic.style) {\n        return linkStyle;\n      }\n\n      var customStyle = JSON.parse(topic.style);\n      return __assign(__assign({}, linkStyle), customStyle.linkStyle);\n    },\n    getSubLinkStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      log$h('getLinkStyle', topicKey);\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      var subLinkStyle = theme.linkStyle;\n      var presetStyle;\n      if (visualLevel === TopicVisualLevel.ROOT) presetStyle = theme.rootTopic.subLinkStyle;else if (visualLevel === TopicVisualLevel.PRIMARY) presetStyle = theme.primaryTopic.subLinkStyle;else presetStyle = theme.normalTopic.subLinkStyle;\n      subLinkStyle = __assign(__assign({}, subLinkStyle), presetStyle);\n      var topic = model.getTopic(topicKey); // 获取父节点的color\n\n      if (theme.randomColor) {\n        var randomColor = controller.run('getRandomColor', props);\n        log$h(randomColor);\n        subLinkStyle = __assign(__assign({}, subLinkStyle), {\n          lineColor: randomColor\n        });\n      }\n\n      if (!topic.style) {\n        return subLinkStyle;\n      }\n\n      var customStyle = JSON.parse(topic.style);\n\n      var res = __assign(__assign({}, subLinkStyle), customStyle.subLinkStyle); // if (res.lineRadius == null) res.lineRadius = 5;\n\n\n      return res;\n    },\n    setTopicContentStyle: function (props) {\n      var topicKey = props.topicKey,\n          controller = props.controller,\n          style = props.style,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      var topicStyle = topic.style;\n      var styleObj = topicStyle ? JSON.parse(topicStyle) : {};\n\n      var newStyleObj = __assign(__assign({}, styleObj), {\n        contentStyle: __assign(__assign({}, styleObj.contentStyle), style)\n      });\n\n      if (!isEqual(styleObj, newStyleObj)) {\n        var newStyleStr = JSON.stringify(newStyleObj);\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.SET_STYLE,\n          style: newStyleStr\n        }));\n      }\n    },\n    setLinkStyle: function (props) {\n      var topicKey = props.topicKey,\n          controller = props.controller,\n          linkStyle = props.linkStyle,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      var style = topic.style;\n      var styleObj = style ? JSON.parse(style) : {};\n\n      var newStyleObj = __assign(__assign({}, styleObj), {\n        linkStyle: __assign(__assign({}, styleObj.linkStyle), linkStyle)\n      });\n\n      if (!isEqual(styleObj, newStyleObj)) {\n        var newStyleStr = JSON.stringify(newStyleObj);\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.SET_STYLE,\n          style: newStyleStr\n        }));\n      }\n    },\n    setSubLinkStyle: function (props) {\n      var topicKey = props.topicKey,\n          controller = props.controller,\n          subLinkStyle = props.subLinkStyle,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      var style = topic.style;\n      var styleObj = style ? JSON.parse(style) : {};\n\n      var newStyleObj = __assign(__assign({}, styleObj), {\n        subLinkStyle: __assign(__assign({}, styleObj.subLinkStyle), subLinkStyle)\n      });\n\n      if (!isEqual(styleObj, newStyleObj)) {\n        var newStyleStr = JSON.stringify(newStyleObj);\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.SET_STYLE,\n          style: newStyleStr\n        }));\n      }\n    },\n    getTopicThemeStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model;\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      if (visualLevel === TopicVisualLevel.ROOT) return theme.rootTopic;\n      if (visualLevel === TopicVisualLevel.PRIMARY) return theme.primaryTopic;\n      return theme.normalTopic;\n    },\n    getRandomColor: function (props) {\n      var topicKey = props.topicKey;\n      if (colorMap.has(topicKey)) return colorMap.get(topicKey);\n      var colors = ['#00CC99', '#FFEE88', '#A167A5', '#E5F993', '#F5C396', '#DB995A', '#83BCFF', '#ED7B84', '#739E82', '#D3BCC0', '#FFA0FD', '#EFD3D7', '#C6878F'];\n      var color = colors[++colorIndex % colors.length];\n      colorMap.set(topicKey, color);\n      log$h('getRandomColor', topicKey, color);\n      return color;\n    },\n    clearAllCustomStyle: function (props) {\n      var model = props.model,\n          controller = props.controller;\n      var newModel = model.withMutations(function (model) {\n        model.topics.keySeq().forEach(function (key) {\n          model.setIn(['topics', key, 'style'], null);\n        });\n      });\n      controller.change(newModel);\n    }\n  };\n}\n\nfunction DefaultPlugin() {\n  return [ReactPlugin(), LayoutPlugin(), OperationPlugin(), StylePlugin(), EventPlugin(), HotKeyPlugin(), GetValuePlugin(), SimpleTextEditorPlugin()];\n}\n\nvar log$i = debug('node:Diagram');\n\nvar Diagram =\n/** @class */\nfunction (_super) {\n  __extends(Diagram, _super);\n\n  function Diagram() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.resolveController = memoizeOne(function (plugins, TheDefaultPlugin) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      var defaultPlugin = TheDefaultPlugin();\n      _this.controller = new Controller({\n        plugins: [plugins, defaultPlugin],\n        construct: false,\n        onChange: _this.props.onChange\n      }); // this.controller.run('onConstruct');\n    });\n    return _this;\n  }\n\n  Diagram.prototype.getDiagramProps = function () {\n    return this.controller.run('getDiagramProps');\n  };\n\n  Diagram.prototype.openNewModel = function (newModel) {\n    var _this = this;\n\n    var props = this.getDiagramProps();\n    var model = props.model,\n        controller = props.controller;\n    controller.run('deleteRefKey', __assign(__assign({}, props), {\n      topicKey: model.rootTopicKey\n    }));\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.EXPAND_TO,\n      topicKey: newModel.focusKey,\n      model: newModel,\n      callback: function () {\n        var props = _this.getDiagramProps();\n\n        var model = props.model;\n        controller.run('moveTopicToCenter', __assign(__assign({}, props), {\n          topicKey: model.focusKey\n        }));\n      }\n    }));\n  };\n\n  Diagram.prototype.render = function () {\n    var plugins = this.props.plugins;\n    this.resolveController(plugins, DefaultPlugin);\n    this.diagramProps = __assign(__assign({}, this.props), {\n      controller: this.controller\n    });\n    return this.controller.run('renderDiagram', this.diagramProps);\n  };\n\n  return Diagram;\n}(Component);\n\nexport { BaseWidget, Btn, CloseIcon, DefaultPlugin, Diagram, DragScrollWidget, EventKey, Flex, HotKeyName, HotKeyPlugin, Icon, IconBg, IconName, Margin, PanelTabRoot, PropKey, RefKey, SaveRef, ShowMenuIcon, StyledCheckbox, Title, TopicBlockIcon, ZIndex, browserDownloadFile, browserDownloadText, browserOpenFile, cancelEvent, center, centerPointX, centerPointY, centerX, centerY, collapseRefKey, contentEditorRefKey, contentRefKey, descEditorRefKey, dropAreaRefKey, getLinkKey, getRelativeRect, getRelativeVector, iconClassName, linksRefKey, linksSvgRefKey, paddingCss, topicRefKey, topicWidgetRefKey };","map":null,"metadata":{},"sourceType":"module"}