{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar point_1 = require(\"../../models/point\");\n\nvar direction_1 = require(\"../../models/direction\");\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar distance = 80;\n\nfunction curve(ctx, l) {\n  ctx.beginPath();\n  ctx.moveTo(l.from.x, l.from.y);\n  ctx.bezierCurveTo(l.controlPoints[0].x, l.controlPoints[0].y, l.controlPoints[1].x, l.controlPoints[1].y, l.to.x, l.to.y);\n  ctx.stroke();\n}\n\nexports.curve = curve;\n\nfunction curveControlPoints(ctx, l) {\n  ctx.save();\n  ctx.fillStyle = ctx.strokeStyle + '80';\n  ctx.lineWidth = 1;\n  ctx.beginPath();\n  ctx.moveTo(l.from.x, l.from.y);\n  ctx.lineTo(l.controlPoints[0].x, l.controlPoints[0].y);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(l.to.x, l.to.y);\n  ctx.lineTo(l.controlPoints[1].x, l.controlPoints[1].y);\n  ctx.stroke();\n  ctx.fillStyle = '#fff';\n  ctx.lineWidth = 2;\n\n  for (var _i = 0, _a = l.controlPoints; _i < _a.length; _i++) {\n    var item = _a[_i];\n    ctx.beginPath();\n    ctx.arc(item.x, item.y, 4, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.fill();\n  }\n\n  ctx.restore();\n}\n\nexports.curveControlPoints = curveControlPoints;\n\nfunction calcCurveControlPoints(l) {\n  l.controlPoints = [getControlPt(l.from, l.to), getControlPt(l.to, l.from)];\n  le5le_store_1.Store.set('pts-' + l.id, null);\n}\n\nexports.calcCurveControlPoints = calcCurveControlPoints;\n\nfunction pointInCurve(point, l) {\n  var points = le5le_store_1.Store.get('pts-' + l.id);\n\n  if (!points) {\n    points = [l.from];\n\n    for (var i = 0.01; i < 1; i += 0.01) {\n      points.push(getBezierPoint(i, l.from, l.controlPoints[0], l.controlPoints[1], l.to));\n    }\n\n    points.push(l.to);\n    le5le_store_1.Store.set('pts-' + l.id, points);\n  }\n\n  var cnt = points.length - 1;\n\n  for (var i = 0; i < cnt; ++i) {\n    if (utils_1.pointInLine(point, points[i], points[i + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.pointInCurve = pointInCurve; // Get a point in bezier.\n// pos - The position of point in bezier. It is expressed as a percentage(0 - 1).\n\nfunction getBezierPoint(pos, from, cp1, cp2, to) {\n  var x1 = from.x,\n      y1 = from.y;\n  var x2 = to.x,\n      y2 = to.y;\n  var cx1 = cp1.x,\n      cy1 = cp1.y;\n  var cx2 = cp2.x,\n      cy2 = cp2.y;\n  var x = x1 * (1 - pos) * (1 - pos) * (1 - pos) + 3 * cx1 * pos * (1 - pos) * (1 - pos) + 3 * cx2 * pos * pos * (1 - pos) + x2 * pos * pos * pos;\n  var y = y1 * (1 - pos) * (1 - pos) * (1 - pos) + 3 * cy1 * pos * (1 - pos) * (1 - pos) + 3 * cy2 * pos * pos * (1 - pos) + y2 * pos * pos * pos;\n  return new point_1.Point(x, y);\n}\n\nexports.getBezierPoint = getBezierPoint;\n\nfunction getControlPt(pt, to) {\n  var point = new point_1.Point(pt.x, pt.y, pt.direction, pt.anchorIndex, pt.id);\n  var dis = distance;\n\n  if ((pt.direction === direction_1.Direction.Up || pt.direction === direction_1.Direction.Bottom) && Math.abs(pt.x - to.x) < 3) {\n    if (to.y > pt.y) {\n      dis = Math.floor((to.y - pt.y) / 3);\n      point.y += dis;\n    } else {\n      dis = Math.floor((pt.y - to.y) / 3);\n      point.y -= dis;\n    }\n\n    return point;\n  }\n\n  if ((pt.direction === direction_1.Direction.Left || pt.direction === direction_1.Direction.Right) && Math.abs(pt.y - to.y) < 3) {\n    if (to.x > pt.x) {\n      dis = Math.floor((to.x - pt.x) / 3);\n      point.x += dis;\n    } else {\n      dis = Math.floor((pt.x - to.x) / 3);\n      point.x -= dis;\n    }\n\n    return point;\n  }\n\n  switch (pt.direction) {\n    case direction_1.Direction.Up:\n      point.y -= dis;\n      break;\n\n    case direction_1.Direction.Right:\n      point.x += dis;\n      break;\n\n    case direction_1.Direction.Bottom:\n      point.y += dis;\n      break;\n\n    case direction_1.Direction.Left:\n      point.x -= dis;\n      break;\n  }\n\n  return point;\n}\n\nfunction calcMindControlPoints(l) {\n  var w = l.to.x - l.from.x;\n  var h = l.to.y - l.from.y;\n\n  if (l.from.direction === direction_1.Direction.Left || l.from.direction === direction_1.Direction.Right) {\n    l.controlPoints = [new point_1.Point(l.from.x, l.from.y + h / 2), new point_1.Point(l.from.x, l.to.y)];\n  } else {\n    l.controlPoints = [new point_1.Point(l.from.x + w / 2, l.from.y), new point_1.Point(l.to.x, l.from.y)];\n  }\n\n  le5le_store_1.Store.set('pts-' + l.id, null);\n}\n\nexports.calcMindControlPoints = calcMindControlPoints;","map":null,"metadata":{},"sourceType":"script"}