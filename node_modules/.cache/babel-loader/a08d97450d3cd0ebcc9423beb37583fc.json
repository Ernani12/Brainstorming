{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _slateReact = require(\"slate-react\");\n\nvar _outlineIcons = require(\"outline-icons\");\n\nvar _ToolbarButton = require(\"./ToolbarButton\");\n\nvar _ToolbarButton2 = _interopRequireDefault(_ToolbarButton);\n\nvar _Separator = require(\"./Separator\");\n\nvar _Separator2 = _interopRequireDefault(_Separator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar FormattingToolbar = function (_React$Component) {\n  _inherits(FormattingToolbar, _React$Component);\n\n  function FormattingToolbar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FormattingToolbar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FormattingToolbar.__proto__ || Object.getPrototypeOf(FormattingToolbar)).call.apply(_ref, [this].concat(args))), _this), _this.hasMark = function (type) {\n      try {\n        return _this.props.editor.value.marks.some(function (mark) {\n          return mark.type === type;\n        });\n      } catch (_err) {\n        return false;\n      }\n    }, _this.isBlock = function (type) {\n      var _this$props$editor$va = _this.props.editor.value,\n          startBlock = _this$props$editor$va.startBlock,\n          document = _this$props$editor$va.document; // accounts for blocks with an inner paragraph tag\n\n      var parent = startBlock && document.getParent(startBlock.key);\n      return startBlock && startBlock.type === type || parent && parent.type === type;\n    }, _this.onClickMark = function (ev, type) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      var editor = _this.props.editor;\n      editor.toggleMark(type); // ensure we remove any other marks on inline code\n      // we don't allow bold / italic / strikethrough code.\n\n      var isInlineCode = _this.hasMark(\"code\") || type === \"code\";\n\n      if (isInlineCode) {\n        editor.value.marks.forEach(function (mark) {\n          if (mark.type !== \"code\") editor.removeMark(mark);\n        });\n      }\n    }, _this.onClickBlock = function (ev, type) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      var editor = _this.props.editor;\n      var _editor$value = editor.value,\n          startBlock = _editor$value.startBlock,\n          document = _editor$value.document;\n      var parent = document.getParent(startBlock.key);\n      editor.setNodeByKey(startBlock.key, type); // accounts for blocks with an inner paragraph tag\n\n      if (parent && parent.type && type === \"paragraph\") {\n        editor.setNodeByKey(parent.key, type);\n      }\n    }, _this.handleCreateLink = function (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      var selection = window.getSelection().toString();\n      selection = selection.trim();\n\n      if (selection.length) {\n        var data = {\n          href: \"\"\n        };\n\n        _this.props.editor.wrapInline({\n          type: \"link\",\n          data: data\n        });\n\n        _this.props.onCreateLink(ev);\n      }\n    }, _this.renderMarkButton = function (type, IconClass, tooltip) {\n      var hiddenToolbarButtons = _this.props.theme.hiddenToolbarButtons;\n      var Tooltip = _this.props.editor.props.tooltip;\n\n      if (hiddenToolbarButtons && hiddenToolbarButtons.marks && hiddenToolbarButtons.marks.includes(type)) {\n        return null;\n      }\n\n      var isActive = _this.hasMark(type);\n\n      var onMouseDown = function onMouseDown(ev) {\n        return _this.onClickMark(ev, type);\n      };\n\n      return React.createElement(_ToolbarButton2.default, {\n        onMouseDown: onMouseDown,\n        active: isActive\n      }, React.createElement(Tooltip, {\n        tooltip: tooltip,\n        placement: \"top\"\n      }, React.createElement(IconClass, {\n        color: _this.props.theme.toolbarItem\n      })));\n    }, _this.renderBlockButton = function (type, IconClass, tooltip) {\n      var hiddenToolbarButtons = _this.props.theme.hiddenToolbarButtons;\n      var Tooltip = _this.props.editor.props.tooltip;\n      if (hiddenToolbarButtons && hiddenToolbarButtons.blocks && hiddenToolbarButtons.blocks.includes(type)) return null;\n\n      var isActive = _this.isBlock(type);\n\n      var onMouseDown = function onMouseDown(ev) {\n        return _this.onClickBlock(ev, isActive ? \"paragraph\" : type);\n      };\n\n      return React.createElement(_ToolbarButton2.default, {\n        onMouseDown: onMouseDown,\n        active: isActive\n      }, React.createElement(Tooltip, {\n        tooltip: tooltip,\n        placement: \"top\"\n      }, React.createElement(IconClass, {\n        color: _this.props.theme.toolbarItem\n      })));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * Check if the current selection has a mark with `type` in it.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  /**\n   * When a mark button is clicked, toggle the current mark.\n   *\n   * @param {Event} ev\n   * @param {String} type\n   */\n\n\n  _createClass(FormattingToolbar, [{\n    key: \"render\",\n    value: function render() {\n      var isSelectionInTable = this.props.editor.isSelectionInTable();\n      var Tooltip = this.props.editor.props.tooltip;\n      return React.createElement(React.Fragment, null, this.renderMarkButton(\"bold\", _outlineIcons.BoldIcon, \"Bold\"), this.renderMarkButton(\"italic\", _outlineIcons.ItalicIcon, \"Italic\"), this.renderMarkButton(\"deleted\", _outlineIcons.StrikethroughIcon, \"Strikethrough\"), this.renderMarkButton(\"code\", _outlineIcons.CodeIcon, \"Code\"), !isSelectionInTable && React.createElement(React.Fragment, null, React.createElement(_Separator2.default, null), this.renderBlockButton(\"heading2\", _outlineIcons.Heading1Icon, \"Heading\"), this.renderBlockButton(\"heading3\", _outlineIcons.Heading2Icon, \"Subheading\"), this.renderBlockButton(\"block-quote\", _outlineIcons.BlockQuoteIcon, \"Quote\")), React.createElement(_Separator2.default, null), React.createElement(_ToolbarButton2.default, {\n        onMouseDown: this.handleCreateLink\n      }, React.createElement(Tooltip, {\n        tooltip: \"Create link\",\n        placement: \"top\"\n      }, React.createElement(_outlineIcons.LinkIcon, {\n        color: this.props.theme.toolbarItem\n      }))));\n    }\n  }]);\n\n  return FormattingToolbar;\n}(React.Component);\n\nexports.default = (0, _styledComponents.withTheme)(FormattingToolbar);","map":null,"metadata":{},"sourceType":"script"}