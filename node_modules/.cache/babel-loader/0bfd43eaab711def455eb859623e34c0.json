{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pen_1 = require(\"./pen\");\n\nvar rect_1 = require(\"./rect\");\n\nvar point_1 = require(\"./point\");\n\nvar middles_1 = require(\"../middles\");\n\nvar default_anchor_1 = require(\"../middles/default.anchor\");\n\nvar default_rect_1 = require(\"../middles/default.rect\");\n\nvar text_1 = require(\"../middles/nodes/text\");\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar utils_1 = require(\"../utils\");\n\nexports.images = {};\n\nvar Node =\n/** @class */\nfunction (_super) {\n  __extends(Node, _super);\n\n  function Node(json, noChild) {\n    if (noChild === void 0) {\n      noChild = false;\n    }\n\n    var _this = _super.call(this, json) || this;\n\n    _this.is3D = false;\n    _this.zRotate = 0;\n    _this.imageRatio = true;\n    _this.anchors = [];\n    _this.rotatedAnchors = [];\n    _this.animateDuration = 0;\n    _this.animateFrames = [];\n    _this.is3D = json.is3D;\n    _this.z = json.z;\n    _this.zRotate = json.zRotate || 0;\n    _this.borderRadius = +json.borderRadius || 0;\n\n    if (_this.borderRadius > 1) {\n      _this.borderRadius = 1;\n    }\n\n    _this.icon = json.icon;\n    _this.iconFamily = json.iconFamily;\n    _this.iconSize = +json.iconSize;\n    _this.iconColor = json.iconColor;\n    _this.image = json.image;\n\n    if (json.imgNaturalWidth) {\n      _this.imgNaturalWidth = json.imgNaturalWidth;\n    }\n\n    if (json.imgNaturalHeight) {\n      _this.imgNaturalHeight = json.imgNaturalHeight;\n    }\n\n    if (json.imageWidth) {\n      _this.imageWidth = json.imageWidth;\n    }\n\n    if (json.imageHeight) {\n      _this.imageHeight = json.imageHeight;\n    }\n\n    _this.imageRatio = json.imageRatio;\n    _this.imageAlign = json.imageAlign || 'center';\n    _this.bkType = json.bkType;\n    _this.gradientFromColor = json.gradientFromColor;\n    _this.gradientToColor = json.gradientToColor;\n    _this.gradientAngle = json.gradientAngle || 0;\n    _this.gradientRadius = json.gradientRadius || 0.01;\n    _this.paddingTop = json.paddingTop || 0;\n    _this.paddingBottom = json.paddingBottom || 0;\n    _this.paddingLeft = json.paddingLeft || 0;\n    _this.paddingRight = json.paddingRight || 0;\n\n    if (json.children && json.children[0] && json.children[0].parentRect) {\n      _this.paddingLeft = json.children[0].parentRect.offsetX;\n      _this.paddingRight = 0;\n      _this.paddingTop = json.children[0].parentRect.offsetY;\n      _this.paddingBottom = 0;\n    }\n\n    if (json.parentRect) {\n      _this.rectInParent = {\n        x: json.parentRect.x * 100 + '%',\n        y: json.parentRect.y * 100 + '%',\n        width: json.parentRect.width * 100 + '%',\n        height: json.parentRect.height * 100 + '%',\n        marginTop: 0,\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n        rotate: json.parentRect.rotate\n      };\n      _this.paddingTop = json.parentRect.marginY;\n      _this.paddingBottom = json.parentRect.marginY;\n      _this.paddingLeft = json.parentRect.marginX;\n      _this.paddingRight = json.parentRect.marginX;\n    }\n\n    _this.childStand = json.childStand;\n    _this.stand = json.stand;\n\n    if (json.rectInParent) {\n      _this.rectInParent = json.rectInParent;\n    }\n\n    if (json.animateFrames) {\n      _this.animateFrames = json.animateFrames;\n\n      for (var _i = 0, _a = _this.animateFrames; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        if (!item.state.init) {\n          item.state = new Node(item.state, true);\n        }\n      }\n    }\n\n    if (json.animateDuration) {\n      _this.animateDuration = json.animateDuration;\n    }\n\n    _this.animateType = json.animateType ? json.animateType : json.animateDuration ? 'custom' : '';\n    _this.iframe = json.iframe;\n    _this.elementId = json.elementId;\n    _this.audio = json.audio;\n    _this.video = json.video;\n    _this.play = json.play;\n    _this.nextPlay = json.nextPlay;\n\n    _this.init();\n\n    if (!noChild) {\n      _this.setChild(json.children);\n    } else {\n      _this.children = null;\n    }\n\n    return _this;\n  }\n\n  Node.cloneState = function (json) {\n    var n = new Node(json);\n    delete n.animateFrames;\n    return n;\n  };\n\n  Node.prototype.init = function () {\n    this.calcAbsPadding(); // Calc rect of text.\n\n    if (middles_1.textRectFns[this.name]) {\n      middles_1.textRectFns[this.name](this);\n    } else {\n      default_rect_1.defaultTextRect(this);\n    } // Calc rect of icon.\n\n\n    if (middles_1.iconRectFns[this.name]) {\n      middles_1.iconRectFns[this.name](this);\n    } else {\n      default_rect_1.defaultIconRect(this);\n    }\n\n    this.calcAnchors();\n    this.addToDiv();\n  };\n\n  Node.prototype.addToDiv = function () {\n    if (this.audio || this.video || this.iframe || this.elementId || this.hasGif()) {\n      le5le_store_1.Store.set('LT:addDiv', this);\n    }\n  };\n\n  Node.prototype.hasGif = function () {\n    if (this.gif) {\n      return true;\n    }\n\n    if (this.children) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        if (item.hasGif()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Node.prototype.calcAbsPadding = function () {\n    this.paddingLeftNum = utils_1.abs(this.rect.width, this.paddingLeft);\n    this.paddingRightNum = utils_1.abs(this.rect.width, this.paddingRight);\n    this.paddingTopNum = utils_1.abs(this.rect.height, this.paddingTop);\n    this.paddingBottomNum = utils_1.abs(this.rect.height, this.paddingBottom);\n  };\n\n  Node.prototype.setChild = function (children) {\n    if (!children) {\n      return;\n    }\n\n    this.children = [];\n\n    for (var i = 0; i < children.length; ++i) {\n      var child = new Node(children[i]);\n      child.parentId = this.id;\n      child.calcChildRect(this);\n      child.init();\n      child.setChild(children[i].children);\n      this.children.push(child);\n    }\n  }; // 根据父节点rect计算自己（子节点）的rect\n\n\n  Node.prototype.calcChildRect = function (parent) {\n    if (!this.rectInParent) {\n      return;\n    }\n\n    var parentW = parent.rect.width - parent.paddingLeftNum - parent.paddingRightNum;\n    var parentH = parent.rect.height - parent.paddingTopNum - parent.paddingBottomNum;\n    var x = parent.rect.x + parent.paddingLeftNum + utils_1.abs(parentW, this.rectInParent.x) + utils_1.abs(parentW, this.rectInParent.marginLeft);\n    var y = parent.rect.y + parent.paddingTopNum + utils_1.abs(parentH, this.rectInParent.y) + utils_1.abs(parentW, this.rectInParent.marginTop);\n    var w = utils_1.abs(parentW, this.rectInParent.width);\n    var h = utils_1.abs(parentH, this.rectInParent.height);\n\n    if (this.rectInParent.marginLeft === undefined && this.rectInParent.marginRight) {\n      x -= utils_1.abs(parentW, this.rectInParent.marginRight);\n    }\n\n    if (this.rectInParent.marginTop === undefined && this.rectInParent.marginBottom) {\n      y -= utils_1.abs(parentW, this.rectInParent.marginBottom);\n    }\n\n    this.rect = new rect_1.Rect(x, y, w, h);\n\n    if (!this.rectInParent.rotate) {\n      this.rectInParent.rotate = 0;\n    }\n\n    var offsetR = parent.rotate + parent.offsetRotate;\n    this.rotate = this.rectInParent.rotate + offsetR;\n\n    if (!this.rectInParent.rect) {\n      this.rectInParent.rect = this.rect.clone();\n    } // const oldCenter = this.rectInParent.rect.center.clone();\n    // const newCenter = this.rectInParent.rect.center.clone().rotate(offsetR, parent.rect.center);\n    // this.rect.translate(newCenter.x - oldCenter.x, newCenter.y - oldCenter.y);\n\n  };\n\n  Node.prototype.draw = function (ctx) {\n    if (!middles_1.drawNodeFns[this.name]) {\n      return;\n    } // DrawBk\n\n\n    switch (this.bkType) {\n      case 1:\n        this.drawBkLinearGradient(ctx);\n        break;\n\n      case 2:\n        this.drawBkRadialGradient(ctx);\n        break;\n    } // Draw shape.\n\n\n    middles_1.drawNodeFns[this.name](ctx, this); // Draw text.\n\n    if (this.name !== 'text' && this.text) {\n      text_1.text(ctx, this);\n    } // Draw image.\n\n\n    if (this.image) {\n      this.drawImg(ctx);\n      return;\n    } // Draw icon\n\n\n    if (this.icon) {\n      ctx.save();\n      ctx.shadowColor = '';\n      ctx.shadowBlur = 0;\n      text_1.iconfont(ctx, this);\n      ctx.restore();\n    }\n  };\n\n  Node.prototype.drawBkLinearGradient = function (ctx) {\n    var from = new point_1.Point(this.rect.x, this.rect.center.y);\n    var to = new point_1.Point(this.rect.ex, this.rect.center.y);\n\n    if (this.gradientAngle) {\n      from.rotate(this.gradientAngle, this.rect.center);\n      to.rotate(this.gradientAngle, this.rect.center);\n    } // contributor: https://github.com/sunnyguohua/topology\n\n\n    var grd = ctx.createLinearGradient(from.x, from.y, to.x, to.y);\n    grd.addColorStop(0, this.gradientFromColor);\n    grd.addColorStop(1, this.gradientToColor);\n    ctx.fillStyle = grd;\n  };\n\n  Node.prototype.drawBkRadialGradient = function (ctx) {\n    var r = this.rect.width;\n\n    if (r < this.rect.height) {\n      r = this.rect.height;\n    }\n\n    r *= 0.5;\n    var grd = ctx.createRadialGradient(this.rect.center.x, this.rect.center.y, r * this.gradientRadius, this.rect.center.x, this.rect.center.y, r);\n    grd.addColorStop(0, this.gradientFromColor);\n    grd.addColorStop(1, this.gradientToColor);\n    ctx.fillStyle = grd;\n  };\n\n  Node.prototype.drawImg = function (ctx) {\n    var _this = this;\n\n    if (this.lastImage !== this.image) {\n      this.img = null;\n    }\n\n    if (this.img) {\n      ctx.save();\n      ctx.shadowColor = '';\n      ctx.shadowBlur = 0;\n      var rect = this.getIconRect();\n      var x = rect.x;\n      var y = rect.y;\n      var w = rect.width;\n      var h = rect.height;\n\n      if (this.imageWidth) {\n        w = this.imageWidth;\n      }\n\n      if (this.imageHeight) {\n        h = this.imageHeight;\n      }\n\n      if (this.imageRatio) {\n        if (this.imageWidth) {\n          h = this.imgNaturalHeight / this.imgNaturalWidth * w;\n        } else {\n          w = this.imgNaturalWidth / this.imgNaturalHeight * h;\n        }\n      }\n\n      if (this.name !== 'image') {\n        x += (rect.width - w) / 2;\n        y += (rect.height - h) / 2;\n      }\n\n      switch (this.imageAlign) {\n        case 'top':\n          y = rect.y;\n          break;\n\n        case 'bottom':\n          y = rect.ey - h;\n          break;\n\n        case 'left':\n          x = rect.x;\n          break;\n\n        case 'right':\n          x = rect.ex - w;\n          break;\n\n        case 'left-top':\n          x = rect.x;\n          y = rect.y;\n          break;\n\n        case 'right-top':\n          x = rect.ex - w;\n          y = rect.y;\n          break;\n\n        case 'left-bottom':\n          x = rect.x;\n          y = rect.ey - h;\n          break;\n\n        case 'right-bottom':\n          x = rect.ex - w;\n          y = rect.ey - h;\n          break;\n      }\n\n      ctx.drawImage(this.img, x, y, w, h);\n      ctx.restore();\n      return;\n    } // Load image and draw it.\n\n\n    if (exports.images[this.image]) {\n      this.img = exports.images[this.image].img;\n      ++exports.images[this.image].cnt;\n      this.lastImage = this.image;\n      this.imgNaturalWidth = this.img.naturalWidth;\n      this.imgNaturalHeight = this.img.naturalHeight;\n      this.drawImg(ctx);\n      return;\n    }\n\n    this.img = new Image();\n    exports.images[this.image] = {\n      img: this.img,\n      cnt: 1\n    };\n    this.img.crossOrigin = 'anonymous';\n    this.img.src = this.image;\n\n    if (!this.gif && this.image.indexOf('.gif') > 0) {\n      this.gif = true;\n      le5le_store_1.Store.set('LT:addDiv', this);\n    }\n\n    this.img.onload = function () {\n      _this.lastImage = _this.image;\n      _this.imgNaturalWidth = _this.img.naturalWidth;\n      _this.imgNaturalHeight = _this.img.naturalHeight; // this.drawImg(ctx);\n\n      le5le_store_1.Store.set('LT:imageLoaded', true);\n    };\n  };\n\n  Node.prototype.calcAnchors = function () {\n    this.anchors = [];\n\n    if (middles_1.anchorsFns[this.name]) {\n      middles_1.anchorsFns[this.name](this);\n    } else {\n      default_anchor_1.defaultAnchors(this);\n    }\n\n    this.calcRotateAnchors();\n  };\n\n  Node.prototype.calcRotateAnchors = function (angle) {\n    if (angle === undefined) {\n      angle = this.rotate;\n    }\n\n    this.rotatedAnchors = [];\n\n    for (var _i = 0, _a = this.anchors; _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.rotatedAnchors.push(item.clone().rotate(angle, this.rect.center));\n    }\n  };\n\n  Node.prototype.getTextRect = function () {\n    var textRect = this.textRect;\n\n    if (!this.icon && !this.image) {\n      textRect = this.fullTextRect;\n    }\n\n    return textRect;\n  };\n\n  Node.prototype.getIconRect = function () {\n    var rect = this.iconRect;\n\n    if (!this.text) {\n      rect = this.fullIconRect || this.fullTextRect || this.rect;\n    }\n\n    return rect;\n  };\n\n  Node.prototype.calcRectInParent = function (parent) {\n    this.rectInParent = {\n      x: (this.rect.x - parent.rect.x) / parent.rect.width * 100 + '%',\n      y: (this.rect.y - parent.rect.y) / parent.rect.height * 100 + '%',\n      width: this.rect.width / parent.rect.width * 100 + '%',\n      height: this.rect.height / parent.rect.height * 100 + '%',\n      rotate: this.rotate,\n      rect: this.rect.clone()\n    };\n  };\n\n  Node.prototype.getDockWatchers = function () {\n    this.dockWatchers = this.rect.toPoints();\n    this.dockWatchers.unshift(this.rect.center);\n  };\n\n  Node.prototype.updateAnimateProps = function () {\n    var passed = 0;\n\n    for (var i = 0; i < this.animateFrames.length; ++i) {\n      this.animateFrames[i].start = passed;\n      passed += this.animateFrames[i].duration;\n      this.animateFrames[i].end = passed;\n      this.animateFrames[i].initState = Node.cloneState(i ? this.animateFrames[i - 1].state : this);\n    }\n  };\n\n  Node.prototype.animate = function (now) {\n    var timeline = now - this.animateStart;\n\n    if (timeline > this.animateDuration) {\n      if (++this.animateCycleIndex >= this.animateCycle && this.animateCycle > 0) {\n        this.animateStart = 0;\n        this.animateCycleIndex = 0;\n        var item = this.animateFrames[this.animateFrames.length - 1];\n        this.dash = item.state.dash;\n        this.strokeStyle = item.state.strokeStyle;\n        this.fillStyle = item.state.fillStyle;\n        this.font = item.state.font;\n        this.lineWidth = item.state.lineWidth;\n        this.rotate = item.state.rotate;\n        this.globalAlpha = item.state.globalAlpha;\n        this.lineDashOffset = item.state.lineDashOffset || 0;\n\n        if (item.state.rect && item.state.rect.width) {\n          this.rect = new rect_1.Rect(item.state.rect.x, item.state.rect.y, item.state.rect.width, item.state.rect.height);\n          this.init();\n        }\n\n        le5le_store_1.Store.set('animateEnd', {\n          type: 'node',\n          data: this\n        });\n        return this.nextAnimate;\n      }\n\n      this.animateStart = now;\n      timeline = 0;\n      this.animateFrames[0].initState = Node.cloneState(this);\n    }\n\n    var rectChanged = false;\n\n    for (var i = 0; i < this.animateFrames.length; ++i) {\n      var item = this.animateFrames[i];\n\n      if (timeline >= item.start && timeline < item.end) {\n        this.dash = item.state.dash;\n        this.strokeStyle = item.state.strokeStyle;\n        this.fillStyle = item.state.fillStyle;\n        this.font = item.state.font;\n        var rate = (timeline - item.start) / item.duration;\n\n        if (item.linear) {\n          if (item.state.rect.x !== item.initState.rect.x) {\n            this.rect.x = item.initState.rect.x + (item.state.rect.x - item.initState.rect.x) * rate;\n            rectChanged = true;\n          }\n\n          if (item.state.rect.y !== item.initState.rect.y) {\n            this.rect.y = item.initState.rect.y + (item.state.rect.y - item.initState.rect.y) * rate;\n            rectChanged = true;\n          }\n\n          if (item.state.rect.width !== item.initState.rect.width) {\n            this.rect.width = item.initState.rect.width + (item.state.rect.width - item.initState.rect.width) * rate;\n            rectChanged = true;\n          }\n\n          if (item.state.rect.height !== item.initState.rect.height) {\n            this.rect.height = item.initState.rect.height + (item.state.rect.height - item.initState.rect.height) * rate;\n            rectChanged = true;\n          }\n\n          this.rect.ex = this.rect.x + this.rect.width;\n          this.rect.ey = this.rect.y + this.rect.height;\n          this.rect.calceCenter();\n\n          if (item.initState.z !== undefined && item.state.z !== item.initState.z) {\n            this.z = item.initState.z + (item.state.z - item.initState.z) * rate;\n            rectChanged = true;\n          }\n\n          if (item.state.borderRadius !== item.initState.borderRadius) {\n            this.borderRadius = item.initState.borderRadius + (item.state.borderRadius - item.initState.borderRadius) * rate;\n          }\n\n          if (item.state.lineWidth !== item.initState.lineWidth) {\n            this.lineWidth = item.initState.lineWidth + (item.state.lineWidth - item.initState.lineWidth) * rate;\n          }\n\n          if (item.state.rotate !== item.initState.rotate) {\n            this.rotate = item.initState.rotate + (item.state.rotate - item.initState.rotate) * rate;\n            rectChanged = true;\n          }\n\n          if (item.state.globalAlpha !== item.initState.globalAlpha) {\n            this.globalAlpha = item.initState.globalAlpha + (item.state.globalAlpha - item.initState.globalAlpha) * rate;\n          }\n\n          if (item.state.lineDashOffset) {\n            if (!this.lineDashOffset) {\n              this.lineDashOffset = item.state.lineDashOffset;\n            } else {\n              this.lineDashOffset += item.state.lineDashOffset;\n            }\n          }\n        } else {\n          this.rect = item.state.rect;\n          this.lineWidth = item.state.lineWidth;\n          this.rotate = item.state.rotate;\n          this.globalAlpha = item.state.globalAlpha;\n          this.lineDashOffset = item.state.lineDashOffset;\n        }\n      }\n    }\n\n    if (rectChanged) {\n      this.init();\n      le5le_store_1.Store.set('nodeRectChanged', this);\n    }\n  };\n\n  Node.prototype.scale = function (scale, center) {\n    if (!center) {\n      center = this.rect.center;\n    }\n\n    this.rect.x = center.x - (center.x - this.rect.x) * scale;\n    this.rect.y = center.y - (center.y - this.rect.y) * scale;\n    this.z *= scale;\n    this.rect.width *= scale;\n    this.rect.height *= scale;\n    this.rect.ex = this.rect.x + this.rect.width;\n    this.rect.ey = this.rect.y + this.rect.height;\n\n    if (this.imageWidth) {\n      this.imageWidth *= scale;\n    }\n\n    if (this.imageHeight) {\n      this.imageHeight *= scale;\n    }\n\n    this.font.fontSize *= scale;\n    this.iconSize *= scale;\n    this.rect.calceCenter();\n\n    if (this.animateFrames) {\n      for (var _i = 0, _a = this.animateFrames; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        if (item.state) {\n          item.state = new Node(item.state);\n          item.state.scale(scale, center);\n        }\n      }\n    }\n\n    this.elementRendered = false;\n    this.init();\n\n    if (this.children) {\n      for (var _b = 0, _c = this.children; _b < _c.length; _b++) {\n        var item = _c[_b];\n        item.scale(scale, center);\n      }\n    }\n  };\n\n  Node.prototype.translate = function (x, y) {\n    this.rect.x += x;\n    this.rect.y += y;\n    this.rect.ex = this.rect.x + this.rect.width;\n    this.rect.ey = this.rect.y + this.rect.height;\n    this.rect.calceCenter();\n\n    if (this.animateFrames) {\n      for (var _i = 0, _a = this.animateFrames; _i < _a.length; _i++) {\n        var frame = _a[_i];\n\n        if (frame.state) {\n          frame.state.rect.x += x;\n          frame.state.rect.y += y;\n          frame.state.rect.ex = frame.state.rect.x + frame.state.rect.width;\n          frame.state.rect.ey = frame.state.rect.y + frame.state.rect.height;\n        }\n      }\n    }\n\n    this.init();\n\n    if (this.children) {\n      for (var _b = 0, _c = this.children; _b < _c.length; _b++) {\n        var item = _c[_b];\n        item.translate(x, y);\n      }\n    }\n  };\n\n  Node.prototype.round = function () {\n    this.rect.round();\n\n    if (this.children) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var item = _a[_i];\n        item.rect.round();\n      }\n    }\n  };\n\n  return Node;\n}(pen_1.Pen);\n\nexports.Node = Node;","map":null,"metadata":{},"sourceType":"script"}