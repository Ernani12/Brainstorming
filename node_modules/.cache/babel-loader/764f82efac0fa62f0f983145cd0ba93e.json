{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require('slate');\n\nvar _slateSchemaViolations = require('slate-schema-violations');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Create a schema definition with rules to normalize blockquotes\n */\n\n\nfunction schema(opts) {\n  return {\n    blocks: _defineProperty({}, opts.type, {\n      nodes: [{\n        match: {\n          object: 'block'\n        }\n      }],\n      normalize: function normalize(editor, error) {\n        var code = error.code;\n\n        switch (code) {\n          case _slateSchemaViolations.CHILD_OBJECT_INVALID:\n            return containBlocks(opts, editor, error);\n\n          default:\n            return undefined;\n        }\n      }\n    })\n  };\n}\n/**\n *  Ensures that blockquotes always contain blocks.\n */\n\n\nfunction containBlocks(opts, editor, error) {\n  var toWrap = error.node.nodes.filter(function (n) {\n    return n.object !== 'block';\n  });\n\n  if (toWrap.isEmpty()) {\n    return undefined;\n  } // Wrap text/inline nodes in default block\n\n\n  var wrapper = _slate.Block.create({\n    type: opts.typeDefault,\n    nodes: []\n  }); // Be careful of Slate's core schema removing inlines or blocks when\n  // a block contains a mix of them.\n\n\n  editor.withoutNormalizing(function () {\n    editor.insertNodeByKey(error.node.key, 0, wrapper);\n  });\n  toWrap.forEach(function (child, index) {\n    var isLast = index === toWrap.size - 1;\n\n    if (isLast) {\n      editor.moveNodeByKey(child.key, wrapper.key, index);\n    } else {\n      editor.withoutNormalizing(function () {\n        editor.moveNodeByKey(child.key, wrapper.key, index);\n      });\n    }\n  });\n  return editor;\n}\n\nexports.default = schema;","map":null,"metadata":{},"sourceType":"script"}