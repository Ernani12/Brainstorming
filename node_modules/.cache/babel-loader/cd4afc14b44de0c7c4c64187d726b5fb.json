{"ast":null,"code":"/* eslint-disable guard-for-in */\n'use strict';\n\nvar repeating = require('repeating'); // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\n\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  var result = 0;\n  var maxUsed = 0;\n  var maxWeight = 0;\n\n  for (var n in indents) {\n    var indent = indents[n];\n    var u = indent[0];\n    var w = indent[1];\n\n    if (u > maxUsed || u === maxUsed && w > maxWeight) {\n      maxUsed = u;\n      maxWeight = w;\n      result = Number(n);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  var tabs = 0;\n  var spaces = 0; // remember the size of previous line's indentation\n\n  var prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  var indents = {}; // pointer to the array of last used indent\n\n  var current; // whether the last action was an indent (opposed to an unindent)\n\n  var isIndent;\n  str.split(/\\n/g).forEach(function (line) {\n    if (!line) {\n      // ignore empty lines\n      return;\n    }\n\n    var indent;\n    var matches = line.match(INDENT_RE);\n\n    if (!matches) {\n      indent = 0;\n    } else {\n      indent = matches[0].length;\n\n      if (matches[1]) {\n        spaces++;\n      } else {\n        tabs++;\n      }\n    }\n\n    var diff = indent - prev;\n    prev = indent;\n\n    if (diff) {\n      // an indent or unindent has been detected\n      isIndent = diff > 0;\n      current = indents[isIndent ? diff : -diff];\n\n      if (current) {\n        current[0]++;\n      } else {\n        current = indents[diff] = [1, 0];\n      }\n    } else if (current) {\n      // if the last action was an indent, increment the weight\n      current[1] += Number(isIndent);\n    }\n  });\n  var amount = getMostUsed(indents);\n  var type;\n  var actual;\n\n  if (!amount) {\n    type = null;\n    actual = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    actual = repeating(' ', amount);\n  } else {\n    type = 'tab';\n    actual = repeating('\\t', amount);\n  }\n\n  return {\n    amount: amount,\n    type: type,\n    indent: actual\n  };\n};","map":null,"metadata":{},"sourceType":"script"}