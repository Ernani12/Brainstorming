{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar le5le_store_1 = require(\"le5le-store\");\n\nvar Canvas =\n/** @class */\nfunction () {\n  function Canvas(parentElem, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.parentElem = parentElem;\n    this.options = options;\n    this.data = le5le_store_1.Store.get('topology-data');\n    this.canvas = document.createElement('canvas');\n    this.width = 0;\n    this.height = 0;\n    this.canvas.style.position = 'absolute';\n    this.canvas.style.left = '0';\n    this.canvas.style.top = '0';\n    this.canvas.style.outline = 'none';\n\n    if (!Canvas.dpiRatio) {\n      var ctx = this.canvas.getContext('2d');\n      var bsr = ctx['webkitBackingStorePixelRatio'] || ctx['mozBackingStorePixelRatio'] || ctx['msBackingStorePixelRatio'] || ctx['oBackingStorePixelRatio'] || ctx['backingStorePixelRatio'] || 1;\n\n      if (!options.extDpiRatio && options.extDpiRatio !== 0) {\n        options.extDpiRatio = 0.25;\n      }\n\n      Canvas.dpiRatio = window.devicePixelRatio / bsr + options.extDpiRatio;\n    }\n  }\n\n  Canvas.prototype.resize = function (size) {\n    if (size) {\n      this.width = size.width | 0;\n      this.height = size.height | 0;\n    } else {\n      if (this.options.width && this.options.width !== 'auto') {\n        this.width = +this.options.width;\n      } else {\n        this.width = this.parentElem.clientWidth;\n      }\n\n      if (this.options.height && this.options.height !== 'auto') {\n        this.height = +this.options.height;\n      } else {\n        this.height = this.parentElem.clientHeight - 8;\n      }\n    }\n\n    this.canvas.style.width = this.width + 'px';\n    this.canvas.style.height = this.height + 'px';\n    this.canvas.width = this.width * Canvas.dpiRatio | 0;\n    this.canvas.height = this.height * Canvas.dpiRatio | 0;\n    this.canvas.getContext('2d').scale(Canvas.dpiRatio, Canvas.dpiRatio);\n    le5le_store_1.Store.set('LT:size', {\n      width: this.canvas.width,\n      height: this.canvas.height\n    });\n  };\n\n  Canvas.prototype.render = function () {\n    var ctx = this.canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  };\n\n  Canvas.prototype.getDpiRatio = function () {\n    return Canvas.dpiRatio;\n  };\n\n  Canvas.dpiRatio = 0;\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":null,"metadata":{},"sourceType":"script"}