{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"../uuid/uuid\");\n\nvar rect_1 = require(\"./rect\");\n\nvar utils_1 = require(\"../utils\");\n\nvar Pen =\n/** @class */\nfunction () {\n  function Pen(json) {\n    this.id = '';\n    this.name = '';\n    this.tags = [];\n    this.rect = new rect_1.Rect(0, 0, 0, 0);\n    this.lineWidth = 1;\n    this.rotate = 0;\n    this.offsetRotate = 0;\n    this.globalAlpha = 1;\n    this.dash = 0;\n    this.strokeStyle = '';\n    this.fillStyle = '';\n    this.font = {\n      color: '',\n      fontFamily: '\"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial',\n      fontSize: 12,\n      lineHeight: 1.5,\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      textAlign: 'center',\n      textBaseline: 'middle',\n      background: ''\n    }; // Date.getTime\n\n    this.animateStart = 0;\n    this.animateCycleIndex = 0;\n    this.locked = false;\n\n    if (json) {\n      this.id = json.id || uuid_1.s8();\n      this.name = json.name || '';\n      this.tags = json.tags || [];\n\n      if (json.rect) {\n        this.rect = new rect_1.Rect(json.rect.x, json.rect.y, json.rect.width, json.rect.height);\n      }\n\n      this.dash = json.dash || 0;\n      this.lineDash = json.lineDash;\n      this.lineDashOffset = json.lineDashOffset || 0;\n      this.lineWidth = json.lineWidth || 1;\n      this.strokeStyle = json.strokeStyle || '';\n      this.fillStyle = json.fillStyle || '';\n      this.lineCap = json.lineCap;\n      this.globalAlpha = json.globalAlpha || 1;\n      this.rotate = json.rotate || 0;\n      this.offsetRotate = json.offsetRotate || 0;\n\n      if (json.font) {\n        Object.assign(this.font, json.font);\n      }\n\n      this.text = json.text;\n\n      if (json.textMaxLine) {\n        this.textMaxLine = +json.textMaxLine || 0;\n      }\n\n      this.textOffsetX = json.textOffsetX || 0;\n      this.textOffsetY = json.textOffsetY || 0;\n      this.animateType = json.animateType;\n      this.animateCycle = json.animateCycle;\n      this.nextAnimate = json.nextAnimate;\n      this.animatePlay = json.animatePlay;\n      this.locked = json.locked;\n      this.link = json.link;\n      this.markdown = json.markdown;\n      this.tipId = json.tipId;\n      this.title = json.title;\n\n      if (typeof json.data === 'object') {\n        this.data = JSON.parse(JSON.stringify(json.data));\n      } else {\n        this.data = json.data || '';\n      }\n    } else {\n      this.id = uuid_1.s8();\n      this.textOffsetX = 0;\n      this.textOffsetY = 0;\n    }\n  }\n\n  Pen.prototype.render = function (ctx) {\n    ctx.save();\n\n    if (this.rotate || this.offsetRotate) {\n      ctx.translate(this.rect.center.x, this.rect.center.y);\n      ctx.rotate((this.rotate + this.offsetRotate) * Math.PI / 180);\n      ctx.translate(-this.rect.center.x, -this.rect.center.y);\n    }\n\n    if (this.lineWidth > 1) {\n      ctx.lineWidth = this.lineWidth;\n    }\n\n    ctx.strokeStyle = this.strokeStyle || '#222';\n    ctx.fillStyle = this.fillStyle || 'transparent';\n\n    if (this.lineCap) {\n      ctx.lineCap = this.lineCap;\n    }\n\n    if (this.globalAlpha < 1) {\n      ctx.globalAlpha = this.globalAlpha;\n    }\n\n    switch (this.dash) {\n      case 1:\n        ctx.setLineDash([5, 5]);\n        break;\n\n      case 2:\n        ctx.setLineDash([10, 10]);\n        break;\n\n      case 3:\n        ctx.setLineDash([10, 10, 2, 10]);\n        break;\n    }\n\n    if (this.lineDash) {\n      ctx.setLineDash(this.lineDash);\n    }\n\n    if (this.lineDashOffset) {\n      ctx.lineDashOffset = this.lineDashOffset;\n    }\n\n    this.draw(ctx);\n    ctx.restore();\n\n    if (this.children) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var item = _a[_i];\n        item.render(ctx);\n      }\n    }\n  };\n\n  Pen.prototype.hit = function (point, padding) {\n    if (padding === void 0) {\n      padding = 0;\n    }\n\n    if (!this.rotate) {\n      return this.rect.hit(point, padding);\n    }\n\n    var pts = this.rect.toPoints();\n\n    for (var _i = 0, pts_1 = pts; _i < pts_1.length; _i++) {\n      var pt = pts_1[_i];\n      pt.rotate(this.rotate, this.rect.center);\n    }\n\n    return utils_1.pointInRect(point, pts);\n  };\n\n  return Pen;\n}();\n\nexports.Pen = Pen;","map":null,"metadata":{},"sourceType":"script"}