{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slate = require('slate');\n\nvar _immutable = require('immutable');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DEFAULTS = {\n  containerType: 'code_block',\n  lineType: 'code_line',\n  exitBlockType: 'paragraph',\n  selectAll: true,\n  allowMarks: false,\n  getIndent: null,\n  onExit: null\n};\n/**\n * The plugin options container\n */\n\nvar Options = function (_Record) {\n  _inherits(Options, _Record);\n\n  function Options() {\n    _classCallCheck(this, Options);\n\n    return _possibleConstructorReturn(this, (Options.__proto__ || Object.getPrototypeOf(Options)).apply(this, arguments));\n  }\n\n  _createClass(Options, [{\n    key: 'resolvedOnExit',\n    value: function resolvedOnExit(editor) {\n      if (this.onExit) {\n        // Custom onExit option\n        return this.onExit(editor);\n      } // Default behavior: insert an exit block\n\n\n      var range = editor.value.selection;\n\n      var exitBlock = _slate.Block.create({\n        type: this.exitBlockType,\n        nodes: [_slate.Text.create()]\n      });\n\n      editor.withoutNormalizing(function () {\n        editor.deleteAtRange(range);\n        editor.insertBlockAtRange(editor.value.selection, exitBlock); // Exit the code block\n\n        editor.unwrapNodeByKey(exitBlock.key);\n      });\n      return editor.moveToStartOfNode(exitBlock);\n    }\n  }]);\n\n  return Options;\n}((0, _immutable.Record)(DEFAULTS));\n\nexports.default = Options;","map":null,"metadata":{},"sourceType":"script"}