{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction TablePlugin() {\n  return {\n    schema: {\n      blocks: {\n        \"table-cell\": {\n          data: {\n            align: function align(_align) {\n              return [\"left\", \"center\", \"right\"].includes(_align);\n            }\n          },\n          normalize: function normalize(change, error) {\n            if (error.code === \"node_data_invalid\") {\n              change.setNodeByKey(error.node.key, {\n                data: error.node.data.set(\"align\", \"left\")\n              });\n            }\n          }\n        }\n      }\n    },\n    commands: {\n      setColumnAlign: function setColumnAlign(editor, align) {\n        var pos = editor.getPosition(editor.value);\n        var columnCells = editor.getCellsAtColumn(pos.table, pos.getColumnIndex());\n        columnCells.forEach(function (cell) {\n          var data = cell.data.toObject();\n          editor.setNodeByKey(cell.key, {\n            data: _extends({}, data, {\n              align: align\n            })\n          });\n        });\n        return editor;\n      },\n      clearSelectedColumn: function clearSelectedColumn(editor, table, columnIndex) {\n        var cells = editor.getCellsAtColumn(table, columnIndex);\n        cells.forEach(function (cell) {\n          if (!cell) return;\n          var data = cell.data.toObject();\n          editor.setNodeByKey(cell.key, {\n            data: _extends({}, data, {\n              selected: undefined\n            })\n          });\n        });\n      },\n      clearSelectedRow: function clearSelectedRow(editor, table, rowIndex) {\n        var cells = editor.getCellsAtRow(table, rowIndex);\n        cells.forEach(function (cell) {\n          if (!cell) return;\n          var data = cell.data.toObject();\n          editor.setNodeByKey(cell.key, {\n            data: _extends({}, data, {\n              selected: undefined\n            })\n          });\n        });\n      },\n      resetAlign: function resetAlign(editor, table, rowIndex) {\n        var headCells = editor.getCellsAtRow(table, 0); // we need to re-query position as the table has been edited\n        // since it was originally queried (pre-insert)\n\n        var position = editor.getPositionByKey(editor.value.document, table.key);\n        var cells = editor.getCellsAtRow(position.table, rowIndex); // take the alignment data from the head cells and map onto\n        // the individual data cells\n\n        cells.forEach(function (cell, index) {\n          var headCell = headCells.get(index);\n          var data = headCell.data.toObject();\n          editor.setNodeByKey(cell.key, {\n            data: _extends({}, data, {\n              selected: undefined\n            })\n          });\n        });\n      },\n      clearSelected: function clearSelected(editor, table) {\n        var previouslySelectedRows = table.data.get(\"selectedRows\") || [];\n        var previouslySelectedColumns = table.data.get(\"selectedColumns\") || [];\n        editor.withoutSaving(function () {\n          previouslySelectedRows.forEach(function (rowIndex) {\n            editor.clearSelectedRow(table, rowIndex);\n          });\n          previouslySelectedColumns.forEach(function (columnIndex) {\n            editor.clearSelectedColumn(table, columnIndex);\n          });\n\n          if (previouslySelectedRows.length || previouslySelectedColumns.length) {\n            editor.setNodeByKey(table.key, {\n              data: {\n                selectedTable: false,\n                selectedColumns: [],\n                selectedRows: []\n              }\n            });\n          }\n        });\n        return editor;\n      },\n      selectColumn: function selectColumn(editor, selected) {\n        var pos = editor.getPosition(editor.value);\n        var selectedColumn = pos.getColumnIndex();\n        editor.withoutSaving(function () {\n          editor.clearSelected(pos.table);\n          editor.setNodeByKey(pos.table.key, {\n            data: {\n              selectedColumns: selected ? [selectedColumn] : [],\n              selectedRows: []\n            }\n          });\n          var cells = editor.getCellsAtColumn(pos.table, selectedColumn);\n          cells.forEach(function (cell) {\n            var data = cell.data.toObject();\n            editor.setNodeByKey(cell.key, {\n              data: _extends({}, data, {\n                selected: selected\n              })\n            });\n          });\n        });\n        return editor;\n      },\n      selectRow: function selectRow(editor, selected) {\n        var pos = editor.getPosition(editor.value);\n        var selectedRow = pos.getRowIndex();\n        editor.withoutSaving(function () {\n          editor.clearSelected(pos.table);\n          editor.setNodeByKey(pos.table.key, {\n            data: {\n              selectedColumns: [],\n              selectedRows: selected ? [selectedRow] : []\n            }\n          });\n          var cells = editor.getCellsAtRow(pos.table, selectedRow);\n          cells.forEach(function (cell) {\n            var data = cell.data.toObject();\n            editor.setNodeByKey(cell.key, {\n              data: _extends({}, data, {\n                selected: selected\n              })\n            });\n          });\n        });\n        return editor;\n      },\n      selectAll: function selectAll(editor) {\n        var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var pos = editor.getPosition(editor.value);\n        editor.withoutSaving(function () {\n          editor.withoutNormalizing(function () {\n            var width = pos.getWidth();\n            var height = pos.getHeight();\n            var data = {\n              selectedTable: true,\n              selectedColumns: Array.from(Array(width).keys()),\n              selectedRows: Array.from(Array(height).keys())\n            };\n            editor.setNodeByKey(pos.table.key, {\n              data: data\n            });\n\n            for (var y = 0; y < pos.getHeight(); y++) {\n              var cells = editor.getCellsAtRow(pos.table, y);\n              cells.forEach(function (cell) {\n                var data = cell.data.toObject();\n                editor.setNodeByKey(cell.key, {\n                  data: _extends({}, data, {\n                    selected: selected\n                  })\n                });\n              });\n            }\n          });\n        });\n      }\n    }\n  };\n}\n\nexports.default = TablePlugin;","map":null,"metadata":{},"sourceType":"script"}