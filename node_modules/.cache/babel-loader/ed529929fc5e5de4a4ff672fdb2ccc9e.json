{"ast":null,"code":"import isUrl from 'is-url';\n\nfunction PasteLinkify() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$isActiveQuer = options.isActiveQuery,\n      isActiveQuery = _options$isActiveQuer === undefined ? 'isLinkActive' : _options$isActiveQuer,\n      _options$wrapCommand = options.wrapCommand,\n      wrapCommand = _options$wrapCommand === undefined ? 'wrapLink' : _options$wrapCommand,\n      _options$unwrapComman = options.unwrapCommand,\n      unwrapCommand = _options$unwrapComman === undefined ? 'unwrapLink' : _options$unwrapComman;\n  return {\n    onCommand: function onCommand(command, change, next) {\n      var type = command.type,\n          args = command.args;\n      var value = change.value;\n      var selection = value.selection;\n      var isCollapsed = selection.isCollapsed,\n          start = selection.start;\n      var url = void 0;\n\n      if (type === 'insertText' && isUrl(url = args[0]) || type === 'insertFragment' && isUrl(url = args[0].text)) {\n        // If there is already a link active, unwrap it so that we don't end up\n        // with a confusing overlapping inline situation.\n        if (change.query(isActiveQuery, value)) {\n          change.command(unwrapCommand);\n        } // If the selection is collapsed, we need to allow the default inserting\n        // to occur instead of just wrapping the existing text in a link.\n\n\n        if (isCollapsed) {\n          next();\n          change.moveAnchorTo(start.offset).moveFocusTo(start.offset + url.length);\n        } // Wrap the selection in a link, and collapse to the end of it.\n\n\n        change.command(wrapCommand, url).moveToEnd();\n        return;\n      }\n\n      next();\n    }\n  };\n}\n\nexport default PasteLinkify;","map":null,"metadata":{},"sourceType":"module"}