{"ast":null,"code":"import { OpType, FocusMode, ModelModifier } from '@blink-mind/core';\nimport { iconClassName, TopicBlockIcon, BaseWidget, Btn, Icon, IconName, cancelEvent } from '@blink-mind/renderer-react';\nimport { Alert, Tooltip, Position, Classes, Drawer, MenuDivider, MenuItem } from '@blueprintjs/core';\nimport { createElement, Component, Fragment } from 'react';\nimport { Topology } from 'topology-core';\nimport { registerNode } from 'topology-core/middles';\nimport { flowData, flowDataAnchors, flowDataIconRect, flowDataTextRect, flowSubprocess, flowSubprocessIconRect, flowSubprocessTextRect, flowDb, flowDbIconRect, flowDbTextRect, flowDocument, flowDocumentAnchors, flowDocumentIconRect, flowDocumentTextRect, flowInternalStorage, flowInternalStorageIconRect, flowInternalStorageTextRect, flowExternStorage, flowExternStorageAnchors, flowExternStorageIconRect, flowExternStorageTextRect, flowQueue, flowQueueIconRect, flowQueueTextRect, flowManually, flowManuallyAnchors, flowManuallyIconRect, flowManuallyTextRect, flowDisplay, flowDisplayAnchors, flowDisplayIconRect, flowDisplayTextRect, flowParallel, flowParallelAnchors, flowComment, flowCommentAnchors } from 'topology-flow-diagram';\nimport '@blink-mind/icons/iconfont/topology';\nimport styled from 'styled-components';\nimport { activityFinal, activityFinalIconRect, activityFinalTextRect, swimlaneV, swimlaneVIconRect, swimlaneVTextRect, swimlaneH, swimlaneHIconRect, swimlaneHTextRect, fork, forkHAnchors, forkIconRect, forkTextRect, forkVAnchors } from 'topology-activity-diagram';\nimport { simpleClass, simpleClassIconRect, simpleClassTextRect, interfaceClass, interfaceClassIconRect, interfaceClassTextRect } from 'topology-class-diagram';\nimport { lifeline, lifelineAnchors, lifelineIconRect, lifelineTextRect, sequenceFocus, sequenceFocusAnchors, sequenceFocusIconRect, sequenceFocusTextRect } from 'topology-sequence-diagram';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar FOCUS_MODE_EDITING_TOPOLOGY = 'FOCUS_MODE_EDITING_TOPOLOGY';\nvar OP_TYPE_START_EDITING_TOPOLOGY = 'OP_TYPE_START_EDITING_TOPOLOGY';\nvar BLOCK_TYPE_TOPOLOGY = 'TOPOLOGY';\nvar REF_KEY_TOPOLOGY_DIAGRAM = 'TOPOLOGY_DIAGRAM';\nvar REF_KEY_TOPOLOGY_DIAGRAM_UTIL = 'TOPOLOGY_DIAGRAM_UTIL';\n\nfunction TopicBlockTopology(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey;\n\n  var onClick = function (e) {\n    e.stopPropagation();\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OP_TYPE_START_EDITING_TOPOLOGY\n    }));\n  };\n\n  var isEditing = model.focusKey === topicKey && model.focusMode === FOCUS_MODE_EDITING_TOPOLOGY;\n  var block = model.getTopic(topicKey).getBlock(BLOCK_TYPE_TOPOLOGY).block;\n  if (!isEditing && !block) return null;\n  var iconProps = {\n    className: iconClassName('topology'),\n    onClick: onClick,\n    tabIndex: -1\n  };\n  return createElement(TopicBlockIcon, __assign({}, iconProps));\n}\n\nvar ToolsConfig = [{\n  group: 'Basic',\n  children: [{\n    name: 'rectangle',\n    icon: 'icon-rect',\n    data: {\n      text: 'Topology',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      name: 'rectangle',\n      icon: '\\ue64d',\n      iconFamily: 'topology',\n      iconColor: '#2f54eb'\n    }\n  }, {\n    name: 'rectangle',\n    icon: 'icon-rectangle',\n    data: {\n      text: 'rectangle',\n      rect: {\n        width: 200,\n        height: 50\n      },\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      borderRadius: 0.1,\n      name: 'rectangle'\n    }\n  }, {\n    name: 'circle',\n    icon: 'icon-circle',\n    data: {\n      text: 'circle',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'circle',\n      textMaxLine: 1\n    }\n  }, {\n    name: 'triangle',\n    icon: 'icon-triangle',\n    data: {\n      text: 'triangle',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'triangle'\n    }\n  }, {\n    name: 'diamond',\n    icon: 'icon-diamond',\n    data: {\n      text: 'diamond',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'diamond'\n    }\n  }, {\n    name: 'pentagon',\n    icon: 'icon-pentagon',\n    data: {\n      text: 'pentagon',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'pentagon'\n    }\n  }, {\n    name: 'hexagon',\n    icon: 'icon-hexagon',\n    data: {\n      text: 'hexagon',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      paddingTop: 10,\n      paddingBottom: 10,\n      name: 'hexagon'\n    }\n  }, {\n    name: 'pentagram',\n    icon: 'icon-pentagram',\n    data: {\n      text: 'pentagram',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'pentagram'\n    }\n  }, {\n    name: 'left arrow',\n    icon: 'icon-arrow-left',\n    data: {\n      text: '',\n      rect: {\n        width: 200,\n        height: 100\n      },\n      name: 'leftArrow'\n    }\n  }, {\n    name: 'right arrow',\n    icon: 'icon-arrow-right',\n    data: {\n      text: '',\n      rect: {\n        width: 200,\n        height: 100\n      },\n      name: 'rightArrow'\n    }\n  }, {\n    name: 'bidirectional arrow',\n    icon: 'icon-twoway-arrow',\n    data: {\n      text: '',\n      rect: {\n        width: 200,\n        height: 100\n      },\n      name: 'twowayArrow'\n    }\n  }, {\n    name: 'line',\n    icon: 'icon-line',\n    data: {\n      text: 'line',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'line'\n    }\n  }, {\n    name: 'cloud',\n    icon: 'icon-cloud',\n    data: {\n      text: 'cloud',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'cloud'\n    }\n  }, {\n    name: 'message',\n    icon: 'icon-msg',\n    data: {\n      text: 'message',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      name: 'message'\n    }\n  }, {\n    name: 'file',\n    icon: 'icon-file',\n    data: {\n      text: 'file',\n      rect: {\n        width: 80,\n        height: 100\n      },\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      name: 'file'\n    }\n  }, {\n    name: 'text',\n    icon: 'icon-text',\n    data: {\n      text: 'text',\n      rect: {\n        width: 160,\n        height: 30\n      },\n      name: 'text'\n    }\n  }, {\n    name: 'image',\n    icon: 'icon-image',\n    data: {\n      text: '',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'image',\n      image: '/assets/img/logo.png'\n    }\n  }, {\n    name: 'cube',\n    icon: 'icon-cube',\n    data: {\n      rect: {\n        width: 50,\n        height: 70\n      },\n      is3D: true,\n      z: 10,\n      zRotate: 15,\n      fillStyle: '#ddd',\n      name: 'cube',\n      icon: '\\ue63c',\n      iconFamily: 'topology',\n      iconColor: '#777',\n      iconSize: 30\n    }\n  }, {\n    name: 'people',\n    icon: 'icon-people',\n    data: {\n      rect: {\n        width: 70,\n        height: 100\n      },\n      name: 'people'\n    }\n  }, {\n    name: 'multi media',\n    icon: 'icon-pc',\n    data: {\n      text: 'multi media',\n      rect: {\n        width: 200,\n        height: 200\n      },\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      // strokeStyle: 'transparent',\n      name: 'div'\n    }\n  }]\n}, {\n  group: 'Flow Graph',\n  children: [{\n    name: 'start/end',\n    icon: 'icon-flow-start',\n    data: {\n      text: 'start',\n      rect: {\n        width: 120,\n        height: 40\n      },\n      borderRadius: 0.5,\n      name: 'rectangle'\n    }\n  }, {\n    name: 'flow',\n    icon: 'icon-rectangle',\n    data: {\n      text: 'flow',\n      rect: {\n        width: 120,\n        height: 40\n      },\n      name: 'rectangle'\n    }\n  }, {\n    name: 'judgement',\n    icon: 'icon-diamond',\n    data: {\n      text: 'judgement',\n      rect: {\n        width: 120,\n        height: 60\n      },\n      name: 'diamond'\n    }\n  }, {\n    name: 'data',\n    icon: 'icon-flow-data',\n    data: {\n      text: 'data',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      name: 'flowData'\n    }\n  }, {\n    name: 'prepare',\n    icon: 'icon-flow-ready',\n    data: {\n      text: 'prepare',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      name: 'hexagon'\n    }\n  }, {\n    name: 'sub flow',\n    icon: 'icon-flow-subprocess',\n    data: {\n      text: 'sub flow',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      name: 'flowSubprocess'\n    }\n  }, {\n    name: 'database',\n    icon: 'icon-db',\n    data: {\n      text: 'database',\n      rect: {\n        width: 80,\n        height: 120\n      },\n      name: 'flowDb'\n    }\n  }, {\n    name: 'document',\n    icon: 'icon-flow-document',\n    data: {\n      text: 'document',\n      rect: {\n        width: 120,\n        height: 100\n      },\n      name: 'flowDocument'\n    }\n  }, {\n    name: 'internal storage',\n    icon: 'icon-internal-storage',\n    data: {\n      text: 'internal storage',\n      rect: {\n        width: 120,\n        height: 80\n      },\n      name: 'flowInternalStorage'\n    }\n  }, {\n    name: 'external storage',\n    icon: 'icon-extern-storage',\n    data: {\n      text: 'external storage',\n      rect: {\n        width: 120,\n        height: 80\n      },\n      name: 'flowExternStorage'\n    }\n  }, {\n    name: 'queue',\n    icon: 'icon-flow-queue',\n    data: {\n      text: 'queue',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'flowQueue'\n    }\n  }, {\n    name: 'input manually',\n    icon: 'icon-flow-manually',\n    data: {\n      text: 'input manually',\n      rect: {\n        width: 120,\n        height: 80\n      },\n      name: 'flowManually'\n    }\n  }, {\n    name: 'display',\n    icon: 'icon-flow-display',\n    data: {\n      text: 'display',\n      rect: {\n        width: 120,\n        height: 80\n      },\n      name: 'flowDisplay'\n    }\n  }, {\n    name: 'parallel',\n    icon: 'icon-flow-parallel',\n    data: {\n      text: 'parallel',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      name: 'flowParallel'\n    }\n  }, {\n    name: 'comment',\n    icon: 'icon-flow-comment',\n    data: {\n      text: 'comment',\n      rect: {\n        width: 100,\n        height: 100\n      },\n      name: 'flowComment'\n    }\n  }]\n}, {\n  group: 'Activity Diagram',\n  children: [{\n    name: 'start',\n    icon: 'icon-inital',\n    data: {\n      text: '',\n      rect: {\n        width: 30,\n        height: 30\n      },\n      name: 'circle',\n      fillStyle: '#555',\n      strokeStyle: 'transparent'\n    }\n  }, {\n    name: 'end',\n    icon: 'icon-final',\n    data: {\n      text: '',\n      rect: {\n        width: 30,\n        height: 30\n      },\n      name: 'activityFinal'\n    }\n  }, {\n    name: 'action',\n    icon: 'icon-action',\n    data: {\n      text: 'action',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      borderRadius: 0.25,\n      name: 'rectangle'\n    }\n  }, {\n    name: 'decision/merge',\n    icon: 'icon-diamond',\n    data: {\n      text: '决策',\n      rect: {\n        width: 120,\n        height: 50\n      },\n      name: 'diamond'\n    }\n  }, {\n    name: 'vertical swimming lane',\n    icon: 'icon-swimlane-v',\n    data: {\n      text: 'vertical swimming lane',\n      rect: {\n        width: 200,\n        height: 500\n      },\n      name: 'swimlaneV'\n    }\n  }, {\n    name: 'horizontal swimming lane',\n    icon: 'icon-swimlane-h',\n    data: {\n      text: 'horizontal swimming lane',\n      rect: {\n        width: 500,\n        height: 200\n      },\n      name: 'swimlaneH'\n    }\n  }, {\n    name: 'vertical fork/merge',\n    icon: 'icon-fork-v',\n    data: {\n      text: '',\n      rect: {\n        width: 10,\n        height: 150\n      },\n      name: 'forkV',\n      fillStyle: '#555',\n      strokeStyle: 'transparent'\n    }\n  }, {\n    name: 'horizontal fork/merge',\n    icon: 'icon-fork',\n    data: {\n      text: '',\n      rect: {\n        width: 150,\n        height: 10\n      },\n      name: 'forkH',\n      fillStyle: '#555',\n      strokeStyle: 'transparent'\n    }\n  }]\n}, {\n  group: 'Sequence Diagram && Class Diagram',\n  children: [{\n    name: 'lifeline',\n    icon: 'icon-lifeline',\n    data: {\n      text: 'lifeline',\n      rect: {\n        width: 150,\n        height: 400\n      },\n      name: 'lifeline'\n    }\n  }, {\n    name: 'activation',\n    icon: 'icon-focus',\n    data: {\n      text: '',\n      rect: {\n        width: 12,\n        height: 200\n      },\n      name: 'sequenceFocus'\n    }\n  }, {\n    name: 'simple class',\n    icon: 'icon-simple-class',\n    data: {\n      text: 'Topolgoy',\n      rect: {\n        width: 270,\n        height: 200\n      },\n      paddingTop: 40,\n      font: {\n        fontFamily: 'Arial',\n        color: '#222',\n        fontWeight: 'bold'\n      },\n      fillStyle: '#ffffba',\n      strokeStyle: '#7e1212',\n      name: 'simpleClass',\n      children: [{\n        text: '- name: string\\n+ setName(name: string): void',\n        name: 'text',\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n        rectInParent: {\n          x: 0,\n          y: 0,\n          width: '100%',\n          height: '100%',\n          rotate: 0\n        },\n        font: {\n          fontFamily: 'Arial',\n          color: '#222',\n          textAlign: 'left',\n          textBaseline: 'top'\n        }\n      }]\n    }\n  }, {\n    name: 'class',\n    icon: 'icon-class',\n    data: {\n      text: 'Topolgoy',\n      rect: {\n        width: 270,\n        height: 200\n      },\n      paddingTop: 40,\n      font: {\n        fontFamily: 'Arial',\n        color: '#222',\n        fontWeight: 'bold'\n      },\n      fillStyle: '#ffffba',\n      strokeStyle: '#7e1212',\n      name: 'interfaceClass',\n      children: [{\n        text: '- name: string',\n        name: 'text',\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n        rectInParent: {\n          x: 0,\n          y: 0,\n          width: '100%',\n          height: '50%',\n          rotate: 0\n        },\n        font: {\n          fontFamily: 'Arial',\n          color: '#222',\n          textAlign: 'left',\n          textBaseline: 'top'\n        }\n      }, {\n        text: '+ setName(name: string): void',\n        name: 'text',\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10,\n        rectInParent: {\n          x: 0,\n          y: '50%',\n          width: '100%',\n          height: '50%',\n          rotate: 0\n        },\n        font: {\n          fontFamily: 'Arial',\n          color: '#222',\n          textAlign: 'left',\n          textBaseline: 'top'\n        }\n      }]\n    }\n  }]\n}];\nvar Root = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  position: relative;\\n  display: flex;\\n  width: 100%;\\n  height: 100%;\\n\"], [\"\\n  position: relative;\\n  display: flex;\\n  width: 100%;\\n  height: 100%;\\n\"])));\nvar Canvas = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  flex: 1;\\n  width: initial;\\n  position: relative;\\n  overflow: auto;\\n  background: #fff;\\n\"], [\"\\n  flex: 1;\\n  width: initial;\\n  position: relative;\\n  overflow: auto;\\n  background: #fff;\\n\"])));\nvar Tools = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  flex-shrink: 0;\\n  width: 1.75rem;\\n  background-color: #f8f8f8;\\n  border-right: 1px solid #d9d9d9;\\n  overflow-y: auto;\\n\"], [\"\\n  flex-shrink: 0;\\n  width: 1.75rem;\\n  background-color: #f8f8f8;\\n  border-right: 1px solid #d9d9d9;\\n  overflow-y: auto;\\n\"])));\nvar ToolTitle = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n  color: #0d1a26;\\n  font-weight: 600;\\n  font-size: 0.12rem;\\n  padding: 0.05rem 0.1rem;\\n  margin-top: 0.08rem;\\n  border-bottom: 1px solid #ddd;\\n\\n  &:first-child {\\n    border-top: none;\\n  }\\n\"], [\"\\n  color: #0d1a26;\\n  font-weight: 600;\\n  font-size: 0.12rem;\\n  padding: 0.05rem 0.1rem;\\n  margin-top: 0.08rem;\\n  border-bottom: 1px solid #ddd;\\n\\n  &:first-child {\\n    border-top: none;\\n  }\\n\"])));\nvar ToolbarButtons = styled.div(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n  padding: 0.1rem 0;\\n  a {\\n    display: inline-block;\\n    color: @text-color;\\n    line-height: 1;\\n    width: 0.4rem;\\n    height: 0.4rem;\\n    text-align: center;\\n    text-decoration: none !important;\\n\\n    .iconfont {\\n      font-size: 0.24rem;\\n    }\\n  }\\n\"], [\"\\n  padding: 0.1rem 0;\\n  a {\\n    display: inline-block;\\n    color: @text-color;\\n    line-height: 1;\\n    width: 0.4rem;\\n    height: 0.4rem;\\n    text-align: center;\\n    text-decoration: none !important;\\n\\n    .iconfont {\\n      font-size: 0.24rem;\\n    }\\n  }\\n\"])));\n\nvar TopologyDiagram =\n/** @class */\nfunction (_super) {\n  __extends(TopologyDiagram, _super);\n\n  function TopologyDiagram() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      id: '',\n      data: null,\n      toolsConfig: ToolsConfig,\n      iconfont: {\n        fontSize: '0.24rem'\n      }\n    };\n    _this.canvasOptions = {};\n\n    _this.handleContextMenu = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    _this.onMessage = function (event, data) {\n      var getRef = _this.props.getRef;\n      var diagramUtil = getRef(REF_KEY_TOPOLOGY_DIAGRAM_UTIL);\n\n      switch (event) {\n        case 'resize':\n        case 'scale':\n        case 'locked':\n          if (_this.topology && diagramUtil) {\n            diagramUtil.setCanvasData(_this.topology.data);\n          }\n\n          break;\n      }\n    };\n\n    return _this;\n  }\n\n  TopologyDiagram.prototype.canvasRegister = function () {\n    registerNode('flowData', flowData, flowDataAnchors, flowDataIconRect, flowDataTextRect);\n    registerNode('flowSubprocess', flowSubprocess, null, flowSubprocessIconRect, flowSubprocessTextRect);\n    registerNode('flowDb', flowDb, null, flowDbIconRect, flowDbTextRect);\n    registerNode('flowDocument', flowDocument, flowDocumentAnchors, flowDocumentIconRect, flowDocumentTextRect);\n    registerNode('flowInternalStorage', flowInternalStorage, null, flowInternalStorageIconRect, flowInternalStorageTextRect);\n    registerNode('flowExternStorage', flowExternStorage, flowExternStorageAnchors, flowExternStorageIconRect, flowExternStorageTextRect);\n    registerNode('flowQueue', flowQueue, null, flowQueueIconRect, flowQueueTextRect);\n    registerNode('flowManually', flowManually, flowManuallyAnchors, flowManuallyIconRect, flowManuallyTextRect);\n    registerNode('flowDisplay', flowDisplay, flowDisplayAnchors, flowDisplayIconRect, flowDisplayTextRect);\n    registerNode('flowParallel', flowParallel, flowParallelAnchors, null, null);\n    registerNode('flowComment', flowComment, flowCommentAnchors, null, null); // activity\n\n    registerNode('activityFinal', activityFinal, null, activityFinalIconRect, activityFinalTextRect);\n    registerNode('swimlaneV', swimlaneV, null, swimlaneVIconRect, swimlaneVTextRect);\n    registerNode('swimlaneH', swimlaneH, null, swimlaneHIconRect, swimlaneHTextRect);\n    registerNode('forkH', fork, forkHAnchors, forkIconRect, forkTextRect);\n    registerNode('forkV', fork, forkVAnchors, forkIconRect, forkTextRect); // class\n\n    registerNode('simpleClass', simpleClass, null, simpleClassIconRect, simpleClassTextRect);\n    registerNode('interfaceClass', interfaceClass, null, interfaceClassIconRect, interfaceClassTextRect); // sequence\n\n    registerNode('lifeline', lifeline, lifelineAnchors, lifelineIconRect, lifelineTextRect);\n    registerNode('sequenceFocus', sequenceFocus, sequenceFocusAnchors, sequenceFocusIconRect, sequenceFocusTextRect);\n  };\n\n  TopologyDiagram.prototype.componentDidMount = function () {\n    this.canvasRegister();\n    this.canvasOptions.on = this.onMessage;\n    this.topology = new Topology('topology-canvas', this.canvasOptions);\n    this.openData();\n  };\n\n  TopologyDiagram.prototype.componentDidUpdate = function () {\n    this.openData();\n  };\n\n  TopologyDiagram.prototype.openData = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey;\n    var topic = model.getTopic(topicKey);\n    var block = topic.getBlock(BLOCK_TYPE_TOPOLOGY).block;\n\n    if (block && block.data && block.data !== '') {\n      this.setState({\n        data: block.data\n      });\n      this.topology.open(block.data);\n    }\n  };\n\n  TopologyDiagram.prototype.onDrag = function (event, node) {\n    event.dataTransfer.setData('Text', JSON.stringify(node.data));\n  };\n\n  TopologyDiagram.prototype.renderTools = function () {\n    var _this = this;\n\n    return createElement(Tools, null, this.state.toolsConfig.map(function (item, index) {\n      return createElement(\"div\", {\n        key: index\n      }, createElement(ToolTitle, null, item.group), createElement(ToolbarButtons, null, //TODO\n      //@ts-ignore\n      item.children.map(function (btn, i) {\n        return createElement(\"a\", {\n          key: i,\n          title: btn.name,\n          draggable: true,\n          onDragStart: function (ev) {\n            _this.onDrag(ev, btn);\n          }\n        }, createElement(\"i\", {\n          className: 'iconfont ' + btn.icon,\n          style: _this.state.iconfont\n        }));\n      })));\n    }));\n  };\n\n  TopologyDiagram.prototype.render = function () {\n    return createElement(Root, null, this.renderTools(), createElement(Canvas, {\n      id: \"topology-canvas\",\n      onContextMenu: this.handleContextMenu\n    }));\n  };\n\n  return TopologyDiagram;\n}(BaseWidget);\n\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;\nvar Root$1 = styled.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  bottom: 20px;\\n  border-radius: 2px;\\n  z-index: 3;\\n  display: flex;\\n  flex-direction: row;\\n  user-select: none;\\n\"], [\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  bottom: 20px;\\n  border-radius: 2px;\\n  z-index: 3;\\n  display: flex;\\n  flex-direction: row;\\n  user-select: none;\\n\"])));\nvar Item_ = styled(Btn)(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([\"\\n  margin: 10px;\\n\"], [\"\\n  margin: 10px;\\n\"])));\n\nvar Item = function (props) {\n  return createElement(Tooltip, {\n    content: props.tooltip,\n    position: Position.TOP,\n    className: Classes.ICON\n  }, createElement(Item_, {\n    onClick: props.onClick\n  }, props.children));\n};\n\nvar ZoomFactorSpan = styled.span(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([\"\\n  display: inline-block;\\n  width: 80px;\\n  height: 18px;\\n\"], [\"\\n  display: inline-block;\\n  width: 80px;\\n  height: 18px;\\n\"])));\n\nvar TopologyDiagramUtils =\n/** @class */\nfunction (_super) {\n  __extends(TopologyDiagramUtils, _super);\n\n  function TopologyDiagramUtils(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setCanvasData = function (canvasData) {\n      _this.setState({\n        canvasData: canvasData\n      });\n    };\n\n    _this.onClickResetZoom = function (e) {\n      var topology = _this.getTopology();\n\n      topology.scaleTo(1);\n    };\n\n    _this.state = {\n      deleteConfirm: false,\n      canvasData: null\n    };\n    return _this;\n  }\n\n  TopologyDiagramUtils.prototype.getTopology = function () {\n    var getRef = this.props.getRef;\n    return getRef(REF_KEY_TOPOLOGY_DIAGRAM).topology;\n  };\n\n  TopologyDiagramUtils.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var controller = props.controller;\n\n    var onClickDelete = function (e) {\n      _this.setState({\n        deleteConfirm: true\n      });\n    };\n\n    var deleteAlertProps = {\n      isOpen: this.state.deleteConfirm,\n      cancelButtonText: 'cancel',\n      onConfirm: function (e) {\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.DELETE_TOPIC_BLOCK,\n          blockType: BLOCK_TYPE_TOPOLOGY\n        }));\n      },\n      onCancel: function (e) {\n        _this.setState({\n          deleteConfirm: false\n        });\n      },\n      onClose: function (e) {\n        _this.setState({\n          deleteConfirm: false\n        });\n      }\n    };\n    var canvasData = this.state.canvasData;\n    var scale = canvasData ? canvasData.scale : 1;\n    return createElement(Root$1, null, createElement(Item, {\n      onClick: this.onClickResetZoom,\n      tooltip: \"reset zoom\"\n    }, createElement(ZoomFactorSpan, null, \"zoom:\" + Math.floor(scale * 100) + \"%\")), createElement(Item, {\n      onClick: onClickDelete,\n      tooltip: \"delete this diagram\"\n    }, Icon(IconName.TRASH)), createElement(Alert, __assign({}, deleteAlertProps), createElement(\"p\", null, \"Are you confirm to delete this topology diagram?\")));\n  };\n\n  return TopologyDiagramUtils;\n}(Component);\n\nvar templateObject_1$1, templateObject_2$1, templateObject_3$1;\nvar DiagramWrapper = styled.div(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\"\\n  position: relative;\\n  overflow: auto;\\n  padding: 0px 0px 0px 5px;\\n  background: #88888850;\\n  height: 100%;\\n\"], [\"\\n  position: relative;\\n  overflow: auto;\\n  padding: 0px 0px 0px 5px;\\n  background: #88888850;\\n  height: 100%;\\n\"])));\nvar Title = styled.span(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([\"\\n  padding: 0px 20px;\\n\"], [\"\\n  padding: 0px 20px;\\n\"])));\n\nfunction TopologyDrawer(props) {\n  var controller = props.controller,\n      topicKey = props.topicKey,\n      getRef = props.getRef,\n      saveRef = props.saveRef;\n\n  var onDiagramClose = function (e) {\n    e.stopPropagation(); // const key = `topic-topology-data-${topicKey}`;\n    // const topologyData = controller.run('deleteTempValue', { key });\n\n    var diagram = getRef(REF_KEY_TOPOLOGY_DIAGRAM);\n    var topologyData = diagram.topology.data;\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.SET_TOPIC_BLOCK,\n      topicKey: topicKey,\n      blockType: BLOCK_TYPE_TOPOLOGY,\n      data: topologyData,\n      focusMode: FocusMode.NORMAL\n    }));\n  };\n\n  var diagramProps = __assign(__assign({}, props), {\n    ref: saveRef(REF_KEY_TOPOLOGY_DIAGRAM)\n  });\n\n  var utilProps = __assign(__assign({}, props), {\n    ref: saveRef(REF_KEY_TOPOLOGY_DIAGRAM_UTIL)\n  });\n\n  return createElement(Drawer, {\n    title: createElement(Title, null, \"Topology Diagram Editor\"),\n    icon: Icon('topology'),\n    isOpen: true,\n    hasBackdrop: true,\n    backdropClassName: \"backdrop\",\n    backdropProps: {\n      onMouseDown: cancelEvent\n    },\n    canOutsideClickClose: false,\n    isCloseButtonShown: true,\n    onClose: onDiagramClose,\n    size: \"100%\"\n  }, createElement(DiagramWrapper, {\n    onClick: cancelEvent,\n    onDoubleClick: cancelEvent\n  }, createElement(TopologyDiagram, __assign({}, diagramProps)), createElement(TopologyDiagramUtils, __assign({}, utilProps))));\n}\n\nvar templateObject_1$2, templateObject_2$2;\n\nfunction startEditingTopology(_a) {\n  var model = _a.model,\n      topicKey = _a.topicKey;\n  var topic = model.getTopic(topicKey);\n  var block = topic.getBlock(BLOCK_TYPE_TOPOLOGY).block;\n\n  if (block == null || block.data == null) {\n    model = ModelModifier.setBlockData({\n      model: model,\n      topicKey: topicKey,\n      blockType: BLOCK_TYPE_TOPOLOGY,\n      data: ''\n    });\n  }\n\n  model = ModelModifier.focusTopic({\n    model: model,\n    topicKey: topicKey,\n    focusMode: FOCUS_MODE_EDITING_TOPOLOGY\n  });\n  return model;\n}\n\nfunction TopologyDiagramPlugin() {\n  return {\n    renderTopicBlock: function (props, next) {\n      var controller = props.controller,\n          block = props.block;\n\n      if (block.type === BLOCK_TYPE_TOPOLOGY) {\n        return controller.run('renderTopicBlockTopology', props);\n      }\n\n      return next();\n    },\n    renderTopicBlockTopology: function (props) {\n      return createElement(TopicBlockTopology, __assign({}, props));\n    },\n    renderDrawer: function (props, next) {\n      var model = props.model;\n\n      if (model.focusMode === FOCUS_MODE_EDITING_TOPOLOGY) {\n        var topoProps = __assign(__assign({}, props), {\n          topicKey: model.focusKey,\n          key: 'topology-drawer'\n        });\n\n        return createElement(TopologyDrawer, __assign({}, topoProps));\n      }\n\n      return next();\n    },\n    customizeTopicContextMenu: function (props, next) {\n      var controller = props.controller;\n\n      function editTopology(e) {\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OP_TYPE_START_EDITING_TOPOLOGY\n        }));\n      }\n\n      return createElement(Fragment, null, next(), createElement(MenuDivider, null), createElement(MenuItem, {\n        icon: Icon('topology'),\n        text: \"Edit Topology Diagram\",\n        onClick: editTopology\n      }));\n    },\n    getOpMap: function (props, next) {\n      var opMap = next();\n      opMap.set(OP_TYPE_START_EDITING_TOPOLOGY, startEditingTopology);\n      return opMap;\n    }\n  };\n}\n\nexport default TopologyDiagramPlugin;","map":null,"metadata":{},"sourceType":"module"}