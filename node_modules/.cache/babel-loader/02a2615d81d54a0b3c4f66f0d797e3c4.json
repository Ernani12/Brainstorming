{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('slate');\n\nvar _immutable = require('immutable');\n\nvar _isList = require('./isList');\n\nvar _isList2 = _interopRequireDefault(_isList);\n\nvar _getCurrentItem = require('./getCurrentItem');\n\nvar _getCurrentItem2 = _interopRequireDefault(_getCurrentItem);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Return the list of items at the given range. The returned items are\n * the highest list item blocks that cover the range.\n *\n * Returns an empty list if no list of items can cover the range\n */\n\n\nfunction getItemsAtRange(opts, value, range) {\n  range = range || value.selection;\n\n  if (!range.start.key) {\n    return (0, _immutable.List)();\n  }\n\n  var document = value.document;\n  var startBlock = document.getClosestBlock(range.start.key);\n  var endBlock = document.getClosestBlock(range.end.key);\n\n  if (startBlock === endBlock) {\n    var item = (0, _getCurrentItem2.default)(opts, value, startBlock);\n    return item ? (0, _immutable.List)([item]) : (0, _immutable.List)();\n  }\n\n  var ancestor = document.getCommonAncestor(startBlock.key, endBlock.key);\n\n  if ((0, _isList2.default)(opts, ancestor)) {\n    var startPath = ancestor.getPath(startBlock.key);\n    var endPath = ancestor.getPath(endBlock.key);\n    return ancestor.nodes.slice(startPath.get(0), endPath.get(0) + 1);\n  } else if (ancestor.type === opts.typeItem) {\n    // The ancestor is the highest list item that covers the range\n    return (0, _immutable.List)([ancestor]);\n  } // No list of items can cover the range\n\n\n  return (0, _immutable.List)();\n}\n\nexports.default = getItemsAtRange;","map":null,"metadata":{},"sourceType":"script"}