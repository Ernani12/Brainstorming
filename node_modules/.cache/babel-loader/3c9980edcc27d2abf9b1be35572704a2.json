{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _options = require('./options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _utils = require('./utils');\n\nvar _changes = require('./changes');\n\nvar _validation = require('./validation');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * The core of the plugin, which does not relies on `slate-react`, and includes\n * everything but behavior and rendering logic.\n */\n\n\nfunction core(optsParam) {\n  var opts = new _options2.default(optsParam);\n  return {\n    schema: (0, _validation.schema)(opts),\n    utils: {\n      isSelectionInBlockquote: _utils.isSelectionInBlockquote.bind(null, opts)\n    },\n    changes: {\n      wrapInBlockquote: _changes.wrapInBlockquote.bind(null, opts),\n      unwrapBlockquote: bindAndScopeChange(opts, _changes.unwrapBlockquote)\n    }\n  };\n}\n/**\n * Bind a change to given options, and scope it to act only inside a blockquote\n */\n\n\nfunction bindAndScopeChange(opts, fn) {\n  return function (change) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var value = change.value;\n\n    if (!(0, _utils.isSelectionInBlockquote)(opts, value)) {\n      return change;\n    } // $FlowFixMe\n\n\n    return fn.apply(undefined, _toConsumableArray([opts, change].concat(args)));\n  };\n}\n\nexports.default = core;","map":null,"metadata":{},"sourceType":"script"}