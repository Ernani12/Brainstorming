"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var point_1 = require("topology-core/models/point");
var direction_1 = require("topology-core/models/direction");
function forkHAnchors(node) {
    node.anchors.push(new point_1.Point(node.rect.x, node.rect.y + node.rect.height / 2, direction_1.Direction.Left));
    node.anchors.push(new point_1.Point(node.rect.ex, node.rect.y + node.rect.height / 2, direction_1.Direction.Right));
    var dis = 5;
    for (var i = dis; node.rect.x + i < node.rect.ex; i = i + dis) {
        var pt1 = new point_1.Point(node.rect.x + i, node.rect.y, direction_1.Direction.Up);
        var pt2 = new point_1.Point(node.rect.x + i, node.rect.ey, direction_1.Direction.Bottom);
        pt1.hidden = true;
        pt1.out = true;
        pt2.hidden = true;
        pt2.out = true;
        node.anchors.push(pt1);
        node.anchors.push(pt2);
    }
}
exports.forkHAnchors = forkHAnchors;
function forkVAnchors(node) {
    node.anchors.push(new point_1.Point(node.rect.x + node.rect.width / 2, node.rect.y, direction_1.Direction.Up));
    node.anchors.push(new point_1.Point(node.rect.x + node.rect.width / 2, node.rect.ey, direction_1.Direction.Bottom));
    var dis = 5;
    for (var i = dis; node.rect.y + i < node.rect.ey; i = i + dis) {
        var pt1 = new point_1.Point(node.rect.x, node.rect.y + i, direction_1.Direction.Left);
        var pt2 = new point_1.Point(node.rect.ex, node.rect.y + i, direction_1.Direction.Right);
        pt1.hidden = true;
        pt1.out = true;
        pt2.hidden = true;
        pt2.out = true;
        node.anchors.push(pt1);
        node.anchors.push(pt2);
    }
}
exports.forkVAnchors = forkVAnchors;
//# sourceMappingURL=fork.anchor.js.map