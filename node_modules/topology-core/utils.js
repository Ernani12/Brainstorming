"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var le5le_store_1 = require("le5le-store");
var point_1 = require("./models/point");
function pointInRect(point, vertices) {
    if (vertices.length < 3) {
        return false;
    }
    var isIn = false;
    var last = vertices[vertices.length - 1];
    for (var _i = 0, vertices_1 = vertices; _i < vertices_1.length; _i++) {
        var item = vertices_1[_i];
        if ((item.y < point.y && last.y >= point.y) || (item.y >= point.y && last.y < point.y)) {
            if (item.x + ((point.y - item.y) * (last.x - item.x)) / (last.y - item.y) > point.x) {
                isIn = !isIn;
            }
        }
        last = item;
    }
    return isIn;
}
exports.pointInRect = pointInRect;
function pointInLine(point, from, to) {
    var points = [
        new point_1.Point(from.x - 8, from.y - 8),
        new point_1.Point(to.x - 8, to.y - 8),
        new point_1.Point(to.x + 8, to.y + 8),
        new point_1.Point(from.x + 8, from.y + 8)
    ];
    return pointInRect(point, points);
}
exports.pointInLine = pointInLine;
function lineLen(from, to) {
    var len = Math.sqrt(Math.pow(Math.abs(from.x - to.x), 2) + Math.pow(Math.abs(from.y - to.y), 2));
    return len | 0;
}
exports.lineLen = lineLen;
function curveLen(from, cp1, cp2, to) {
    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', "M" + from.x + " " + from.y + " C" + cp1.x + " " + cp1.y + " " + cp2.x + " " + cp2.y + " " + to.x + " " + to.y);
    return path.getTotalLength() | 0;
}
exports.curveLen = curveLen;
// https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)
// Version 4.0
function pSBC(p, c0, c1, l) {
    var r, g, b, P, f, t, h, a = typeof c1 === 'string';
    var i = parseInt, m = Math.round;
    if (typeof p !== 'number' ||
        p < -1 ||
        p > 1 ||
        typeof c0 !== 'string' ||
        (c0[0] !== 'r' && c0[0] !== '#') ||
        (c1 && !a)) {
        return null;
    }
    var pSBCr = function (d) {
        var _a;
        var n = d.length;
        var x = {};
        if (n > 9) {
            (_a = d = d.split(','), r = _a[0], g = _a[1], b = _a[2], a = _a[3], _a), (n = d.length);
            if (n < 3 || n > 4) {
                return null;
            }
            (x.r = i(r[3] === 'a' ? r.slice(5) : r.slice(4))), (x.g = i(g)), (x.b = i(b)), (x.a = a ? parseFloat(a) : -1);
        }
        else {
            if (n === 8 || n === 6 || n < 4) {
                return null;
            }
            if (n < 6) {
                d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '');
            }
            d = i(d.slice(1), 16);
            if (n === 9 || n === 5) {
                (x.r = (d >> 24) & 255), (x.g = (d >> 16) & 255), (x.b = (d >> 8) & 255), (x.a = m((d & 255) / 0.255) / 1000);
            }
            else {
                (x.r = d >> 16), (x.g = (d >> 8) & 255), (x.b = d & 255), (x.a = -1);
            }
        }
        return x;
    };
    (h = c0.length > 9),
        (h = a ? (c1.length > 9 ? true : c1 === 'c' ? !h : false) : h),
        (f = pSBCr(c0)),
        (P = p < 0),
        (t = c1 && c1 !== 'c' ? pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }),
        (p = P ? p * -1 : p),
        (P = 1 - p);
    if (!f || !t) {
        return null;
    }
    if (l) {
        (r = m(P * f.r + p * t.r)), (g = m(P * f.g + p * t.g)), (b = m(P * f.b + p * t.b));
    }
    else {
        (r = m(Math.pow((P * Math.pow(f.r, 2) + p * Math.pow(t.r, 2)), 0.5))),
            (g = m(Math.pow((P * Math.pow(f.g, 2) + p * Math.pow(t.g, 2)), 0.5))),
            (b = m(Math.pow((P * Math.pow(f.b, 2) + p * Math.pow(t.b, 2)), 0.5)));
    }
    (a = f.a), (t = t.a), (f = a >= 0 || t >= 0), (a = f ? (a < 0 ? t : t < 0 ? a : a * P + t * p) : 0);
    if (h) {
        return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')';
    }
    else {
        return ('#' +
            (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2));
    }
}
exports.pSBC = pSBC;
function abs(num, percent) {
    if (+percent) {
        return +percent;
    }
    if (!percent || percent[percent.length - 1] !== '%') {
        return 0;
    }
    percent = percent.substr(0, percent.length - 1);
    return Math.round((num * +percent) / 100);
}
exports.abs = abs;
function createDiv(node) {
    var div = document.createElement('div');
    div.style.position = 'absolute';
    div.style.outline = 'none';
    div.style.left = '-9999px';
    div.style.bottom = '-9999px';
    div.style.width = node.rect.width + 'px';
    div.style.height = node.rect.height + '2px';
    if (node.elementId) {
        div.id = node.elementId;
    }
    return div;
}
exports.createDiv = createDiv;
function loadJS(url, callback, render) {
    var loaderScript = document.createElement('script');
    loaderScript.type = 'text/javascript';
    loaderScript.src = url;
    loaderScript.addEventListener('load', function () {
        if (callback) {
            callback();
        }
        if (render) {
            le5le_store_1.Store.set('LT:render', true);
        }
    });
    document.body.appendChild(loaderScript);
}
exports.loadJS = loadJS;
//# sourceMappingURL=utils.js.map